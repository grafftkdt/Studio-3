
pokuy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009580  08009580  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009588  08009588  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009588  08009588  00019588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800958c  0800958c  0001958c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08009590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200000a0  0800962c  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800962c  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb62  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e17  00000000  00000000  0002ec2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00030a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00031918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016550  00000000  00000000  00032738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6d1  00000000  00000000  00048c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec04  00000000  00000000  00058359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6f5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004294  00000000  00000000  000e6fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009544 	.word	0x08009544

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	08009544 	.word	0x08009544

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b974 	b.w	800106c <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468e      	mov	lr, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d14d      	bne.n	8000e46 <__udivmoddi4+0xaa>
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4694      	mov	ip, r2
 8000dae:	d969      	bls.n	8000e84 <__udivmoddi4+0xe8>
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b152      	cbz	r2, 8000dcc <__udivmoddi4+0x30>
 8000db6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dba:	f1c2 0120 	rsb	r1, r2, #32
 8000dbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000dc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000dca:	4094      	lsls	r4, r2
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	0c21      	lsrs	r1, r4, #16
 8000dd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000dd6:	fa1f f78c 	uxth.w	r7, ip
 8000dda:	fb08 e316 	mls	r3, r8, r6, lr
 8000dde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000de2:	fb06 f107 	mul.w	r1, r6, r7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d90a      	bls.n	8000e00 <__udivmoddi4+0x64>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000df2:	f080 811f 	bcs.w	8001034 <__udivmoddi4+0x298>
 8000df6:	4299      	cmp	r1, r3
 8000df8:	f240 811c 	bls.w	8001034 <__udivmoddi4+0x298>
 8000dfc:	3e02      	subs	r6, #2
 8000dfe:	4463      	add	r3, ip
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e08:	fb08 3310 	mls	r3, r8, r0, r3
 8000e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e10:	fb00 f707 	mul.w	r7, r0, r7
 8000e14:	42a7      	cmp	r7, r4
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x92>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e20:	f080 810a 	bcs.w	8001038 <__udivmoddi4+0x29c>
 8000e24:	42a7      	cmp	r7, r4
 8000e26:	f240 8107 	bls.w	8001038 <__udivmoddi4+0x29c>
 8000e2a:	4464      	add	r4, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	1be4      	subs	r4, r4, r7
 8000e34:	2600      	movs	r6, #0
 8000e36:	b11d      	cbz	r5, 8000e40 <__udivmoddi4+0xa4>
 8000e38:	40d4      	lsrs	r4, r2
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d909      	bls.n	8000e5e <__udivmoddi4+0xc2>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	f000 80ef 	beq.w	800102e <__udivmoddi4+0x292>
 8000e50:	2600      	movs	r6, #0
 8000e52:	e9c5 0100 	strd	r0, r1, [r5]
 8000e56:	4630      	mov	r0, r6
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	fab3 f683 	clz	r6, r3
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d14a      	bne.n	8000efc <__udivmoddi4+0x160>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d302      	bcc.n	8000e70 <__udivmoddi4+0xd4>
 8000e6a:	4282      	cmp	r2, r0
 8000e6c:	f200 80f9 	bhi.w	8001062 <__udivmoddi4+0x2c6>
 8000e70:	1a84      	subs	r4, r0, r2
 8000e72:	eb61 0303 	sbc.w	r3, r1, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	469e      	mov	lr, r3
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d0e0      	beq.n	8000e40 <__udivmoddi4+0xa4>
 8000e7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e82:	e7dd      	b.n	8000e40 <__udivmoddi4+0xa4>
 8000e84:	b902      	cbnz	r2, 8000e88 <__udivmoddi4+0xec>
 8000e86:	deff      	udf	#255	; 0xff
 8000e88:	fab2 f282 	clz	r2, r2
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	f040 8092 	bne.w	8000fb6 <__udivmoddi4+0x21a>
 8000e92:	eba1 010c 	sub.w	r1, r1, ip
 8000e96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9a:	fa1f fe8c 	uxth.w	lr, ip
 8000e9e:	2601      	movs	r6, #1
 8000ea0:	0c20      	lsrs	r0, r4, #16
 8000ea2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ea6:	fb07 1113 	mls	r1, r7, r3, r1
 8000eaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eae:	fb0e f003 	mul.w	r0, lr, r3
 8000eb2:	4288      	cmp	r0, r1
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x12c>
 8000eb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x12a>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f200 80cb 	bhi.w	800105c <__udivmoddi4+0x2c0>
 8000ec6:	4643      	mov	r3, r8
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ed4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed8:	fb0e fe00 	mul.w	lr, lr, r0
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x156>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x154>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f200 80bb 	bhi.w	8001066 <__udivmoddi4+0x2ca>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	eba4 040e 	sub.w	r4, r4, lr
 8000ef6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000efa:	e79c      	b.n	8000e36 <__udivmoddi4+0x9a>
 8000efc:	f1c6 0720 	rsb	r7, r6, #32
 8000f00:	40b3      	lsls	r3, r6
 8000f02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f12:	431c      	orrs	r4, r3
 8000f14:	40f9      	lsrs	r1, r7
 8000f16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f22:	0c20      	lsrs	r0, r4, #16
 8000f24:	fa1f fe8c 	uxth.w	lr, ip
 8000f28:	fb09 1118 	mls	r1, r9, r8, r1
 8000f2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f30:	fb08 f00e 	mul.w	r0, r8, lr
 8000f34:	4288      	cmp	r0, r1
 8000f36:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3a:	d90b      	bls.n	8000f54 <__udivmoddi4+0x1b8>
 8000f3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f44:	f080 8088 	bcs.w	8001058 <__udivmoddi4+0x2bc>
 8000f48:	4288      	cmp	r0, r1
 8000f4a:	f240 8085 	bls.w	8001058 <__udivmoddi4+0x2bc>
 8000f4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f52:	4461      	add	r1, ip
 8000f54:	1a09      	subs	r1, r1, r0
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000f60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f68:	458e      	cmp	lr, r1
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x1e2>
 8000f6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f74:	d26c      	bcs.n	8001050 <__udivmoddi4+0x2b4>
 8000f76:	458e      	cmp	lr, r1
 8000f78:	d96a      	bls.n	8001050 <__udivmoddi4+0x2b4>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4461      	add	r1, ip
 8000f7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f82:	fba0 9402 	umull	r9, r4, r0, r2
 8000f86:	eba1 010e 	sub.w	r1, r1, lr
 8000f8a:	42a1      	cmp	r1, r4
 8000f8c:	46c8      	mov	r8, r9
 8000f8e:	46a6      	mov	lr, r4
 8000f90:	d356      	bcc.n	8001040 <__udivmoddi4+0x2a4>
 8000f92:	d053      	beq.n	800103c <__udivmoddi4+0x2a0>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x212>
 8000f96:	ebb3 0208 	subs.w	r2, r3, r8
 8000f9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000fa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000fa6:	40f1      	lsrs	r1, r6
 8000fa8:	431f      	orrs	r7, r3
 8000faa:	e9c5 7100 	strd	r7, r1, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	f1c2 0320 	rsb	r3, r2, #32
 8000fba:	40d8      	lsrs	r0, r3
 8000fbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	4301      	orrs	r1, r0
 8000fc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fcc:	fa1f fe8c 	uxth.w	lr, ip
 8000fd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd8:	0c0b      	lsrs	r3, r1, #16
 8000fda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fde:	fb00 f60e 	mul.w	r6, r0, lr
 8000fe2:	429e      	cmp	r6, r3
 8000fe4:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x260>
 8000fea:	eb1c 0303 	adds.w	r3, ip, r3
 8000fee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ff2:	d22f      	bcs.n	8001054 <__udivmoddi4+0x2b8>
 8000ff4:	429e      	cmp	r6, r3
 8000ff6:	d92d      	bls.n	8001054 <__udivmoddi4+0x2b8>
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	1b9b      	subs	r3, r3, r6
 8000ffe:	b289      	uxth	r1, r1
 8001000:	fbb3 f6f7 	udiv	r6, r3, r7
 8001004:	fb07 3316 	mls	r3, r7, r6, r3
 8001008:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800100c:	fb06 f30e 	mul.w	r3, r6, lr
 8001010:	428b      	cmp	r3, r1
 8001012:	d908      	bls.n	8001026 <__udivmoddi4+0x28a>
 8001014:	eb1c 0101 	adds.w	r1, ip, r1
 8001018:	f106 38ff 	add.w	r8, r6, #4294967295
 800101c:	d216      	bcs.n	800104c <__udivmoddi4+0x2b0>
 800101e:	428b      	cmp	r3, r1
 8001020:	d914      	bls.n	800104c <__udivmoddi4+0x2b0>
 8001022:	3e02      	subs	r6, #2
 8001024:	4461      	add	r1, ip
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800102c:	e738      	b.n	8000ea0 <__udivmoddi4+0x104>
 800102e:	462e      	mov	r6, r5
 8001030:	4628      	mov	r0, r5
 8001032:	e705      	b.n	8000e40 <__udivmoddi4+0xa4>
 8001034:	4606      	mov	r6, r0
 8001036:	e6e3      	b.n	8000e00 <__udivmoddi4+0x64>
 8001038:	4618      	mov	r0, r3
 800103a:	e6f8      	b.n	8000e2e <__udivmoddi4+0x92>
 800103c:	454b      	cmp	r3, r9
 800103e:	d2a9      	bcs.n	8000f94 <__udivmoddi4+0x1f8>
 8001040:	ebb9 0802 	subs.w	r8, r9, r2
 8001044:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001048:	3801      	subs	r0, #1
 800104a:	e7a3      	b.n	8000f94 <__udivmoddi4+0x1f8>
 800104c:	4646      	mov	r6, r8
 800104e:	e7ea      	b.n	8001026 <__udivmoddi4+0x28a>
 8001050:	4620      	mov	r0, r4
 8001052:	e794      	b.n	8000f7e <__udivmoddi4+0x1e2>
 8001054:	4640      	mov	r0, r8
 8001056:	e7d1      	b.n	8000ffc <__udivmoddi4+0x260>
 8001058:	46d0      	mov	r8, sl
 800105a:	e77b      	b.n	8000f54 <__udivmoddi4+0x1b8>
 800105c:	3b02      	subs	r3, #2
 800105e:	4461      	add	r1, ip
 8001060:	e732      	b.n	8000ec8 <__udivmoddi4+0x12c>
 8001062:	4630      	mov	r0, r6
 8001064:	e709      	b.n	8000e7a <__udivmoddi4+0xde>
 8001066:	4464      	add	r4, ip
 8001068:	3802      	subs	r0, #2
 800106a:	e742      	b.n	8000ef2 <__udivmoddi4+0x156>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001074:	ed2d 8b02 	vpush	{d8}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f002 fdd6 	bl	8003c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f001 fb46 	bl	8002710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f001 fdc2 	bl	8002c0c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001088:	f001 fbd8 	bl	800283c <MX_TIM1_Init>
  MX_TIM4_Init();
 800108c:	f001 fcae 	bl	80029ec <MX_TIM4_Init>
  MX_TIM2_Init();
 8001090:	f001 fc2c 	bl	80028ec <MX_TIM2_Init>
  MX_DMA_Init();
 8001094:	f001 fd9a 	bl	8002bcc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001098:	f001 fd6c 	bl	8002b74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800109c:	f001 fba0 	bl	80027e0 <MX_I2C1_Init>
  MX_TIM5_Init();
 80010a0:	f001 fd1a 	bl	8002ad8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //UART Zoneeeeeeeeeeeeeee
  HAL_UART_Receive_DMA(&huart2,RxBuffer, 64);
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	4996      	ldr	r1, [pc, #600]	; (8001300 <main+0x290>)
 80010a8:	4896      	ldr	r0, [pc, #600]	; (8001304 <main+0x294>)
 80010aa:	f007 f8b7 	bl	800821c <HAL_UART_Receive_DMA>
  ///////////////////////////////////////////////////////

  HAL_TIM_Base_Start_IT(&htim2);
 80010ae:	4896      	ldr	r0, [pc, #600]	; (8001308 <main+0x298>)
 80010b0:	f006 f82b 	bl	800710a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80010b4:	4895      	ldr	r0, [pc, #596]	; (800130c <main+0x29c>)
 80010b6:	f006 f828 	bl	800710a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010ba:	213c      	movs	r1, #60	; 0x3c
 80010bc:	4894      	ldr	r0, [pc, #592]	; (8001310 <main+0x2a0>)
 80010be:	f006 f941 	bl	8007344 <HAL_TIM_Encoder_Start>
//  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010c2:	2104      	movs	r1, #4
 80010c4:	4890      	ldr	r0, [pc, #576]	; (8001308 <main+0x298>)
 80010c6:	f006 f879 	bl	80071bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4891      	ldr	r0, [pc, #580]	; (8001314 <main+0x2a4>)
 80010ce:	f006 f875 	bl	80071bc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uartprotocol();
 80010d2:	f001 fe31 	bl	8002d38 <uartprotocol>
    /* USER CODE BEGIN 3 */
//	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm);
//	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, cw);


	  angel = (((htim1.Instance->CNT)*0.08789062));
 80010d6:	4b8e      	ldr	r3, [pc, #568]	; (8001310 <main+0x2a0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9bd 	bl	800045c <__aeabi_ui2d>
 80010e2:	a385      	add	r3, pc, #532	; (adr r3, 80012f8 <main+0x288>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fa32 	bl	8000550 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fcdc 	bl	8000ab0 <__aeabi_d2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a87      	ldr	r2, [pc, #540]	; (8001318 <main+0x2a8>)
 80010fc:	6013      	str	r3, [r2, #0]

	  ttt = htim1.Instance->CNT;
 80010fe:	4b84      	ldr	r3, [pc, #528]	; (8001310 <main+0x2a0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110c:	4b83      	ldr	r3, [pc, #524]	; (800131c <main+0x2ac>)
 800110e:	edc3 7a00 	vstr	s15, [r3]
	 tt = htim5.Instance->CNT;
 8001112:	4b7e      	ldr	r3, [pc, #504]	; (800130c <main+0x29c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	2200      	movs	r2, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	60fa      	str	r2, [r7, #12]
 800111e:	4b80      	ldr	r3, [pc, #512]	; (8001320 <main+0x2b0>)
 8001120:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001124:	e9c3 1200 	strd	r1, r2, [r3]
	 t = tt;
 8001128:	4b7d      	ldr	r3, [pc, #500]	; (8001320 <main+0x2b0>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fdd5 	bl	8000ce0 <__aeabi_ul2f>
 8001136:	4603      	mov	r3, r0
 8001138:	4a7a      	ldr	r2, [pc, #488]	; (8001324 <main+0x2b4>)
 800113a:	6013      	str	r3, [r2, #0]
	 trad = (t/1000000);
 800113c:	4b79      	ldr	r3, [pc, #484]	; (8001324 <main+0x2b4>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001328 <main+0x2b8>
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	4b78      	ldr	r3, [pc, #480]	; (800132c <main+0x2bc>)
 800114c:	edc3 7a00 	vstr	s15, [r3]
	 PID2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001150:	2120      	movs	r1, #32
 8001152:	4877      	ldr	r0, [pc, #476]	; (8001330 <main+0x2c0>)
 8001154:	f003 fc36 	bl	80049c4 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001162:	4b74      	ldr	r3, [pc, #464]	; (8001334 <main+0x2c4>)
 8001164:	edc3 7a00 	vstr	s15, [r3]

	  station[1]= 30;
 8001168:	4b73      	ldr	r3, [pc, #460]	; (8001338 <main+0x2c8>)
 800116a:	221e      	movs	r2, #30
 800116c:	705a      	strb	r2, [r3, #1]
	  station[2]= 60;
 800116e:	4b72      	ldr	r3, [pc, #456]	; (8001338 <main+0x2c8>)
 8001170:	223c      	movs	r2, #60	; 0x3c
 8001172:	709a      	strb	r2, [r3, #2]
	  station[3]= 220;
 8001174:	4b70      	ldr	r3, [pc, #448]	; (8001338 <main+0x2c8>)
 8001176:	22dc      	movs	r2, #220	; 0xdc
 8001178:	70da      	strb	r2, [r3, #3]
	  station[4]= 120;
 800117a:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <main+0x2c8>)
 800117c:	2278      	movs	r2, #120	; 0x78
 800117e:	711a      	strb	r2, [r3, #4]
	  station[5]= 140;
 8001180:	4b6d      	ldr	r3, [pc, #436]	; (8001338 <main+0x2c8>)
 8001182:	228c      	movs	r2, #140	; 0x8c
 8001184:	715a      	strb	r2, [r3, #5]
	  station[6]= 170;
 8001186:	4b6c      	ldr	r3, [pc, #432]	; (8001338 <main+0x2c8>)
 8001188:	22aa      	movs	r2, #170	; 0xaa
 800118a:	719a      	strb	r2, [r3, #6]
	  station[7]= 75;
 800118c:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <main+0x2c8>)
 800118e:	224b      	movs	r2, #75	; 0x4b
 8001190:	71da      	strb	r2, [r3, #7]
	  station[8]= 180;
 8001192:	4b69      	ldr	r3, [pc, #420]	; (8001338 <main+0x2c8>)
 8001194:	22b4      	movs	r2, #180	; 0xb4
 8001196:	721a      	strb	r2, [r3, #8]
	  station[9]= 200;
 8001198:	4b67      	ldr	r3, [pc, #412]	; (8001338 <main+0x2c8>)
 800119a:	22c8      	movs	r2, #200	; 0xc8
 800119c:	725a      	strb	r2, [r3, #9]

	  if(numberofstation>=1)
 800119e:	4b67      	ldr	r3, [pc, #412]	; (800133c <main+0x2cc>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00e      	beq.n	80011c4 <main+0x154>
	  {
		  thetainput= station[goal[nextstation]];
 80011a6:	4b66      	ldr	r3, [pc, #408]	; (8001340 <main+0x2d0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b65      	ldr	r3, [pc, #404]	; (8001344 <main+0x2d4>)
 80011ae:	5c9b      	ldrb	r3, [r3, r2]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b61      	ldr	r3, [pc, #388]	; (8001338 <main+0x2c8>)
 80011b4:	5c9b      	ldrb	r3, [r3, r2]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011be:	4b62      	ldr	r3, [pc, #392]	; (8001348 <main+0x2d8>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if (sethome == 1)
 80011c4:	4b61      	ldr	r3, [pc, #388]	; (800134c <main+0x2dc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d141      	bne.n	8001250 <main+0x1e0>
	  {
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==1)
 80011cc:	2120      	movs	r1, #32
 80011ce:	4858      	ldr	r0, [pc, #352]	; (8001330 <main+0x2c0>)
 80011d0:	f003 fbf8 	bl	80049c4 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10d      	bne.n	80011f6 <main+0x186>
		  {
		  	  testsethome = 1;
 80011da:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <main+0x2e0>)
 80011dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011e0:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, homepwm);
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <main+0x2e4>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b48      	ldr	r3, [pc, #288]	; (8001308 <main+0x298>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 , 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	484f      	ldr	r0, [pc, #316]	; (8001330 <main+0x2c0>)
 80011f2:	f003 fbff 	bl	80049f4 <HAL_GPIO_WritePin>
		  }

		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==0)
 80011f6:	2120      	movs	r1, #32
 80011f8:	484d      	ldr	r0, [pc, #308]	; (8001330 <main+0x2c0>)
 80011fa:	f003 fbe3 	bl	80049c4 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d125      	bne.n	8001250 <main+0x1e0>
		  {
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <main+0x298>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2200      	movs	r2, #0
 800120a:	639a      	str	r2, [r3, #56]	; 0x38
			htim1.Instance->CNT = 0;
 800120c:	4b40      	ldr	r3, [pc, #256]	; (8001310 <main+0x2a0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24

			if(htim1.Instance->CNT == 0)
 8001214:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <main+0x2a0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <main+0x1e0>
			{
				htim1.Instance->CNT = 0;
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <main+0x2a0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
				sethome = 0;
 8001226:	4b49      	ldr	r3, [pc, #292]	; (800134c <main+0x2dc>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
				Timestamp_home = micros();
 800122c:	f002 fa20 	bl	8003670 <micros>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4948      	ldr	r1, [pc, #288]	; (8001358 <main+0x2e8>)
 8001236:	e9c1 2300 	strd	r2, r3, [r1]
//				pwm = 0;
				homeset = 1;
 800123a:	4b48      	ldr	r3, [pc, #288]	; (800135c <main+0x2ec>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
				testsethome = 0;
 8001240:	4b43      	ldr	r3, [pc, #268]	; (8001350 <main+0x2e0>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
				stoprun=1;
 8001248:	4b45      	ldr	r3, [pc, #276]	; (8001360 <main+0x2f0>)
 800124a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800124e:	601a      	str	r2, [r3, #0]
			}

		  }
	  }

	  if (micros() - Timestamp_home >= 2000000 && homeset ==1)
 8001250:	f002 fa0e 	bl	8003670 <micros>
 8001254:	4b40      	ldr	r3, [pc, #256]	; (8001358 <main+0x2e8>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	ebb0 0a02 	subs.w	sl, r0, r2
 800125e:	eb61 0b03 	sbc.w	fp, r1, r3
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <main+0x2f4>)
 8001264:	459a      	cmp	sl, r3
 8001266:	f17b 0300 	sbcs.w	r3, fp, #0
 800126a:	d30a      	bcc.n	8001282 <main+0x212>
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <main+0x2ec>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <main+0x212>
	  {
			htim1.Instance->CNT = 0;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <main+0x2a0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
			homeset = 0;
 800127c:	4b37      	ldr	r3, [pc, #220]	; (800135c <main+0x2ec>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
	  }

	 if(gogoal == 1)
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <main+0x2f8>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d11d      	bne.n	80012c6 <main+0x256>
	 {
		 b = thetainput;
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <main+0x2d8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a37      	ldr	r2, [pc, #220]	; (800136c <main+0x2fc>)
 8001290:	6013      	str	r3, [r2, #0]
		 d = winput;
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <main+0x300>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a37      	ldr	r2, [pc, #220]	; (8001374 <main+0x304>)
 8001298:	6013      	str	r3, [r2, #0]
		 count = 0;
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <main+0x308>)
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
		 thetanow = angel;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <main+0x2a8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a35      	ldr	r2, [pc, #212]	; (800137c <main+0x30c>)
 80012a8:	6013      	str	r3, [r2, #0]
		 gogoal = 0;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <main+0x2f8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
		 start = 1;
 80012b0:	4b33      	ldr	r3, [pc, #204]	; (8001380 <main+0x310>)
 80012b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012b6:	601a      	str	r2, [r3, #0]
		 stoprun = 0;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <main+0x2f0>)
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
		 sunflower = 0;
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <main+0x314>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
	 }

	 testclockwiseoranticlockwise = thetainput - thetanow;
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <main+0x2d8>)
 80012c8:	ed93 7a00 	vldr	s14, [r3]
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <main+0x30c>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d6:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <main+0x318>)
 80012d8:	edc3 7a00 	vstr	s15, [r3]

	 if(testclockwiseoranticlockwise >= 0)
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <main+0x318>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	db51      	blt.n	8001390 <main+0x320>
	 {
		 clockwiseoranticlockwise = 1;     //clockwise
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <main+0x31c>)
 80012ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e058      	b.n	80013a8 <main+0x338>
 80012f6:	bf00      	nop
 80012f8:	ea86711e 	.word	0xea86711e
 80012fc:	3fb67fff 	.word	0x3fb67fff
 8001300:	200002b0 	.word	0x200002b0
 8001304:	20000210 	.word	0x20000210
 8001308:	20000150 	.word	0x20000150
 800130c:	200001d0 	.word	0x200001d0
 8001310:	20000110 	.word	0x20000110
 8001314:	20000190 	.word	0x20000190
 8001318:	20000360 	.word	0x20000360
 800131c:	20000468 	.word	0x20000468
 8001320:	200003a0 	.word	0x200003a0
 8001324:	200003c0 	.word	0x200003c0
 8001328:	49742400 	.word	0x49742400
 800132c:	200003ec 	.word	0x200003ec
 8001330:	40020400 	.word	0x40020400
 8001334:	20000384 	.word	0x20000384
 8001338:	20000344 	.word	0x20000344
 800133c:	2000034e 	.word	0x2000034e
 8001340:	2000034f 	.word	0x2000034f
 8001344:	20000478 	.word	0x20000478
 8001348:	200003b0 	.word	0x200003b0
 800134c:	20000018 	.word	0x20000018
 8001350:	20000474 	.word	0x20000474
 8001354:	20000014 	.word	0x20000014
 8001358:	20000398 	.word	0x20000398
 800135c:	20000388 	.word	0x20000388
 8001360:	20000470 	.word	0x20000470
 8001364:	001e8480 	.word	0x001e8480
 8001368:	20000342 	.word	0x20000342
 800136c:	20000434 	.word	0x20000434
 8001370:	200003a8 	.word	0x200003a8
 8001374:	2000043c 	.word	0x2000043c
 8001378:	200003c4 	.word	0x200003c4
 800137c:	200003ac 	.word	0x200003ac
 8001380:	20000464 	.word	0x20000464
 8001384:	200002f4 	.word	0x200002f4
 8001388:	200003b8 	.word	0x200003b8
 800138c:	200003bc 	.word	0x200003bc
	 }
	 else if(testclockwiseoranticlockwise < 0)
 8001390:	4baf      	ldr	r3, [pc, #700]	; (8001650 <main+0x5e0>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	d503      	bpl.n	80013a8 <main+0x338>
	 {
		 clockwiseoranticlockwise = 0;     //anticlockwise
 80013a0:	4bac      	ldr	r3, [pc, #688]	; (8001654 <main+0x5e4>)
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
	 }

	 l = thetainput - thetanow;
 80013a8:	4bab      	ldr	r3, [pc, #684]	; (8001658 <main+0x5e8>)
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	4bab      	ldr	r3, [pc, #684]	; (800165c <main+0x5ec>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b8:	4ba9      	ldr	r3, [pc, #676]	; (8001660 <main+0x5f0>)
 80013ba:	edc3 7a00 	vstr	s15, [r3]
	 thetadiff = fabs(l);
 80013be:	4ba8      	ldr	r3, [pc, #672]	; (8001660 <main+0x5f0>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	eef0 7ae7 	vabs.f32	s15, s15
 80013c8:	4ba6      	ldr	r3, [pc, #664]	; (8001664 <main+0x5f4>)
 80013ca:	edc3 7a00 	vstr	s15, [r3]
	 thetainputrad = ((thetainput*M_PI)/180);
 80013ce:	4ba2      	ldr	r3, [pc, #648]	; (8001658 <main+0x5e8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f864 	bl	80004a0 <__aeabi_f2d>
 80013d8:	a39b      	add	r3, pc, #620	; (adr r3, 8001648 <main+0x5d8>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f8b7 	bl	8000550 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b9e      	ldr	r3, [pc, #632]	; (8001668 <main+0x5f8>)
 80013f0:	f7ff f9d8 	bl	80007a4 <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb58 	bl	8000ab0 <__aeabi_d2f>
 8001400:	4603      	mov	r3, r0
 8001402:	4a9a      	ldr	r2, [pc, #616]	; (800166c <main+0x5fc>)
 8001404:	6013      	str	r3, [r2, #0]
	 thetanowrad = ((thetanow*M_PI)/180);
 8001406:	4b95      	ldr	r3, [pc, #596]	; (800165c <main+0x5ec>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f848 	bl	80004a0 <__aeabi_f2d>
 8001410:	a38d      	add	r3, pc, #564	; (adr r3, 8001648 <main+0x5d8>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f89b 	bl	8000550 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b90      	ldr	r3, [pc, #576]	; (8001668 <main+0x5f8>)
 8001428:	f7ff f9bc 	bl	80007a4 <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb3c 	bl	8000ab0 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	4a8d      	ldr	r2, [pc, #564]	; (8001670 <main+0x600>)
 800143c:	6013      	str	r3, [r2, #0]
	 m = thetainputrad - thetanowrad;
 800143e:	4b8b      	ldr	r3, [pc, #556]	; (800166c <main+0x5fc>)
 8001440:	ed93 7a00 	vldr	s14, [r3]
 8001444:	4b8a      	ldr	r3, [pc, #552]	; (8001670 <main+0x600>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144e:	4b89      	ldr	r3, [pc, #548]	; (8001674 <main+0x604>)
 8001450:	edc3 7a00 	vstr	s15, [r3]
	 thetadiffrad = fabs(m);
 8001454:	4b87      	ldr	r3, [pc, #540]	; (8001674 <main+0x604>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eef0 7ae7 	vabs.f32	s15, s15
 800145e:	4b86      	ldr	r3, [pc, #536]	; (8001678 <main+0x608>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
	 wmaxrad = sqrt(alpharad*thetadiffrad);
 8001464:	4b85      	ldr	r3, [pc, #532]	; (800167c <main+0x60c>)
 8001466:	ed93 7a00 	vldr	s14, [r3]
 800146a:	4b83      	ldr	r3, [pc, #524]	; (8001678 <main+0x608>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	ee17 0a90 	vmov	r0, s15
 8001478:	f7ff f812 	bl	80004a0 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	ec43 2b10 	vmov	d0, r2, r3
 8001484:	f007 ff80 	bl	8009388 <sqrt>
 8001488:	ec53 2b10 	vmov	r2, r3, d0
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb0e 	bl	8000ab0 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	4a7a      	ldr	r2, [pc, #488]	; (8001680 <main+0x610>)
 8001498:	6013      	str	r3, [r2, #0]
	 winputrad = ((winput*2*M_PI)/60);
 800149a:	4b7a      	ldr	r3, [pc, #488]	; (8001684 <main+0x614>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014a4:	ee17 0a90 	vmov	r0, s15
 80014a8:	f7fe fffa 	bl	80004a0 <__aeabi_f2d>
 80014ac:	a366      	add	r3, pc, #408	; (adr r3, 8001648 <main+0x5d8>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f84d 	bl	8000550 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b71      	ldr	r3, [pc, #452]	; (8001688 <main+0x618>)
 80014c4:	f7ff f96e 	bl	80007a4 <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff faee 	bl	8000ab0 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a6d      	ldr	r2, [pc, #436]	; (800168c <main+0x61c>)
 80014d8:	6013      	str	r3, [r2, #0]
	 n = -1;
 80014da:	4b6d      	ldr	r3, [pc, #436]	; (8001690 <main+0x620>)
 80014dc:	4a6d      	ldr	r2, [pc, #436]	; (8001694 <main+0x624>)
 80014de:	601a      	str	r2, [r3, #0]

	 if(wmaxrad < winputrad && start == 1) //case not reach to input
 80014e0:	4b67      	ldr	r3, [pc, #412]	; (8001680 <main+0x610>)
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	4b69      	ldr	r3, [pc, #420]	; (800168c <main+0x61c>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	f140 830c 	bpl.w	8001b10 <main+0xaa0>
 80014f8:	4b67      	ldr	r3, [pc, #412]	; (8001698 <main+0x628>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001502:	eef4 7a47 	vcmp.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	f040 8301 	bne.w	8001b10 <main+0xaa0>
	 {
		 if(clockwiseoranticlockwise == 1)
 800150e:	4b51      	ldr	r3, [pc, #324]	; (8001654 <main+0x5e4>)
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001518:	eef4 7a47 	vcmp.f32	s15, s14
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	f040 817c 	bne.w	800181c <main+0x7ac>
	     {
			 thalfrad = wmaxrad/alpharad;
 8001524:	4b56      	ldr	r3, [pc, #344]	; (8001680 <main+0x610>)
 8001526:	edd3 6a00 	vldr	s13, [r3]
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <main+0x60c>)
 800152c:	ed93 7a00 	vldr	s14, [r3]
 8001530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <main+0x62c>)
 8001536:	edc3 7a00 	vstr	s15, [r3]
			 timerad = 2*thalfrad;
 800153a:	4b58      	ldr	r3, [pc, #352]	; (800169c <main+0x62c>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001544:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <main+0x630>)
 8001546:	edc3 7a00 	vstr	s15, [r3]

			 if(count == 0)
 800154a:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <main+0x634>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001558:	d10b      	bne.n	8001572 <main+0x502>
			 {
				 timestamploop1rad = trad;
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <main+0x638>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a53      	ldr	r2, [pc, #332]	; (80016ac <main+0x63c>)
 8001560:	6013      	str	r3, [r2, #0]
				 run = 1;
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <main+0x640>)
 8001564:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001568:	601a      	str	r2, [r3, #0]
				 count = 1;
 800156a:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <main+0x634>)
 800156c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001570:	601a      	str	r2, [r3, #0]
			 }

			 timeuseinloop1rad = trad - timestamploop1rad;
 8001572:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <main+0x638>)
 8001574:	ed93 7a00 	vldr	s14, [r3]
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <main+0x63c>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001582:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <main+0x644>)
 8001584:	edc3 7a00 	vstr	s15, [r3]


			 if(timeuseinloop1rad <= thalfrad)    //first half
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <main+0x644>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b43      	ldr	r3, [pc, #268]	; (800169c <main+0x62c>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	f200 8098 	bhi.w	80016d0 <main+0x660>
			 {
				 k = (0.5)*(alpharad)*(timeuseinloop1rad)*(timeuseinloop1rad);
 80015a0:	4b36      	ldr	r3, [pc, #216]	; (800167c <main+0x60c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff7b 	bl	80004a0 <__aeabi_f2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <main+0x648>)
 80015b0:	f7fe ffce 	bl	8000550 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4614      	mov	r4, r2
 80015ba:	461d      	mov	r5, r3
 80015bc:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <main+0x644>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff6d 	bl	80004a0 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe ffbf 	bl	8000550 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <main+0x644>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff5e 	bl	80004a0 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe ffb0 	bl	8000550 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa5a 	bl	8000ab0 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <main+0x64c>)
 8001600:	6013      	str	r3, [r2, #0]
				 thetarad = k+thetanowrad;
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <main+0x64c>)
 8001604:	ed93 7a00 	vldr	s14, [r3]
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <main+0x600>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <main+0x650>)
 8001614:	edc3 7a00 	vstr	s15, [r3]
				 wrad = (alpharad)*(timeuseinloop1rad);
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <main+0x60c>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <main+0x644>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <main+0x654>)
 800162a:	edc3 7a00 	vstr	s15, [r3]
				 thetahalfrad = thetarad;
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <main+0x650>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <main+0x658>)
 8001634:	6013      	str	r3, [r2, #0]
				 wradhalf = wrad;
 8001636:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <main+0x654>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a24      	ldr	r2, [pc, #144]	; (80016cc <main+0x65c>)
 800163c:	6013      	str	r3, [r2, #0]
		 if(clockwiseoranticlockwise == 1)
 800163e:	f000 be61 	b.w	8002304 <main+0x1294>
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	54442d18 	.word	0x54442d18
 800164c:	400921fb 	.word	0x400921fb
 8001650:	200003b8 	.word	0x200003b8
 8001654:	200003bc 	.word	0x200003bc
 8001658:	200003b0 	.word	0x200003b0
 800165c:	200003ac 	.word	0x200003ac
 8001660:	20000458 	.word	0x20000458
 8001664:	200003b4 	.word	0x200003b4
 8001668:	40668000 	.word	0x40668000
 800166c:	200003d0 	.word	0x200003d0
 8001670:	200003d4 	.word	0x200003d4
 8001674:	2000045c 	.word	0x2000045c
 8001678:	200003d8 	.word	0x200003d8
 800167c:	2000001c 	.word	0x2000001c
 8001680:	200003dc 	.word	0x200003dc
 8001684:	200003a8 	.word	0x200003a8
 8001688:	404e0000 	.word	0x404e0000
 800168c:	200003e0 	.word	0x200003e0
 8001690:	20000460 	.word	0x20000460
 8001694:	bf800000 	.word	0xbf800000
 8001698:	20000464 	.word	0x20000464
 800169c:	200003e4 	.word	0x200003e4
 80016a0:	200003e8 	.word	0x200003e8
 80016a4:	200003c4 	.word	0x200003c4
 80016a8:	200003ec 	.word	0x200003ec
 80016ac:	200003f0 	.word	0x200003f0
 80016b0:	2000046c 	.word	0x2000046c
 80016b4:	200003f4 	.word	0x200003f4
 80016b8:	3fe00000 	.word	0x3fe00000
 80016bc:	20000454 	.word	0x20000454
 80016c0:	200003f8 	.word	0x200003f8
 80016c4:	20000400 	.word	0x20000400
 80016c8:	200003fc 	.word	0x200003fc
 80016cc:	2000042c 	.word	0x2000042c
			 }

			 else if(timeuseinloop1rad > thalfrad && timeuseinloop1rad <= timerad)
 80016d0:	4ba8      	ldr	r3, [pc, #672]	; (8001974 <main+0x904>)
 80016d2:	ed93 7a00 	vldr	s14, [r3]
 80016d6:	4ba8      	ldr	r3, [pc, #672]	; (8001978 <main+0x908>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	dd7a      	ble.n	80017dc <main+0x76c>
 80016e6:	4ba3      	ldr	r3, [pc, #652]	; (8001974 <main+0x904>)
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	4ba3      	ldr	r3, [pc, #652]	; (800197c <main+0x90c>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	d86f      	bhi.n	80017dc <main+0x76c>
			 {
				 a = timeuseinloop1rad-thalfrad;
 80016fc:	4b9d      	ldr	r3, [pc, #628]	; (8001974 <main+0x904>)
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	4b9d      	ldr	r3, [pc, #628]	; (8001978 <main+0x908>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	4b9c      	ldr	r3, [pc, #624]	; (8001980 <main+0x910>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
				 thetarad = (wradhalf*a)-(0.5*alpharad*a*a)+thetahalfrad;
 8001712:	4b9c      	ldr	r3, [pc, #624]	; (8001984 <main+0x914>)
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	4b99      	ldr	r3, [pc, #612]	; (8001980 <main+0x910>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001722:	ee17 0a90 	vmov	r0, s15
 8001726:	f7fe febb 	bl	80004a0 <__aeabi_f2d>
 800172a:	4680      	mov	r8, r0
 800172c:	4689      	mov	r9, r1
 800172e:	4b96      	ldr	r3, [pc, #600]	; (8001988 <main+0x918>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe feb4 	bl	80004a0 <__aeabi_f2d>
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b93      	ldr	r3, [pc, #588]	; (800198c <main+0x91c>)
 800173e:	f7fe ff07 	bl	8000550 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	4b8d      	ldr	r3, [pc, #564]	; (8001980 <main+0x910>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fea6 	bl	80004a0 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fef8 	bl	8000550 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4614      	mov	r4, r2
 8001766:	461d      	mov	r5, r3
 8001768:	4b85      	ldr	r3, [pc, #532]	; (8001980 <main+0x910>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fe97 	bl	80004a0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f7fe fee9 	bl	8000550 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4640      	mov	r0, r8
 8001784:	4649      	mov	r1, r9
 8001786:	f7fe fd2b 	bl	80001e0 <__aeabi_dsub>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <main+0x920>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe82 	bl	80004a0 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fd1e 	bl	80001e4 <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f97e 	bl	8000ab0 <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a77      	ldr	r2, [pc, #476]	; (8001994 <main+0x924>)
 80017b8:	6013      	str	r3, [r2, #0]
				 wrad = wradhalf-(alpharad*a);
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <main+0x914>)
 80017bc:	ed93 7a00 	vldr	s14, [r3]
 80017c0:	4b71      	ldr	r3, [pc, #452]	; (8001988 <main+0x918>)
 80017c2:	edd3 6a00 	vldr	s13, [r3]
 80017c6:	4b6e      	ldr	r3, [pc, #440]	; (8001980 <main+0x910>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d4:	4b70      	ldr	r3, [pc, #448]	; (8001998 <main+0x928>)
 80017d6:	edc3 7a00 	vstr	s15, [r3]
 80017da:	e198      	b.n	8001b0e <main+0xa9e>
			 }

			 else if(timeuseinloop1rad > timerad && stoprun == 0)
 80017dc:	4b65      	ldr	r3, [pc, #404]	; (8001974 <main+0x904>)
 80017de:	ed93 7a00 	vldr	s14, [r3]
 80017e2:	4b66      	ldr	r3, [pc, #408]	; (800197c <main+0x90c>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	dc01      	bgt.n	80017f6 <main+0x786>
		 if(clockwiseoranticlockwise == 1)
 80017f2:	f000 bd87 	b.w	8002304 <main+0x1294>
			 else if(timeuseinloop1rad > timerad && stoprun == 0)
 80017f6:	4b69      	ldr	r3, [pc, #420]	; (800199c <main+0x92c>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001804:	f040 857e 	bne.w	8002304 <main+0x1294>
			 {
				 run = 0;
 8001808:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <main+0x930>)
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
				 stoprun = 1;
 8001810:	4b62      	ldr	r3, [pc, #392]	; (800199c <main+0x92c>)
 8001812:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001816:	601a      	str	r2, [r3, #0]
		 if(clockwiseoranticlockwise == 1)
 8001818:	f000 bd74 	b.w	8002304 <main+0x1294>

				 //theta = angel;
			 }

		 }
		 else if(clockwiseoranticlockwise == 0)
 800181c:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <main+0x934>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	f040 856b 	bne.w	8002304 <main+0x1294>
		 {
			 thalfrad = wmaxrad/alpharad;
 800182e:	4b5e      	ldr	r3, [pc, #376]	; (80019a8 <main+0x938>)
 8001830:	edd3 6a00 	vldr	s13, [r3]
 8001834:	4b54      	ldr	r3, [pc, #336]	; (8001988 <main+0x918>)
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183e:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <main+0x908>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
			 timerad = 2*thalfrad;
 8001844:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <main+0x908>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800184e:	4b4b      	ldr	r3, [pc, #300]	; (800197c <main+0x90c>)
 8001850:	edc3 7a00 	vstr	s15, [r3]

			 if(count == 0)
 8001854:	4b55      	ldr	r3, [pc, #340]	; (80019ac <main+0x93c>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	d10b      	bne.n	800187c <main+0x80c>
			 {
				 run = 1;
 8001864:	4b4e      	ldr	r3, [pc, #312]	; (80019a0 <main+0x930>)
 8001866:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800186a:	601a      	str	r2, [r3, #0]
				 timestamploop1rad = trad;
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <main+0x940>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a50      	ldr	r2, [pc, #320]	; (80019b4 <main+0x944>)
 8001872:	6013      	str	r3, [r2, #0]
				 count = 1;
 8001874:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <main+0x93c>)
 8001876:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800187a:	601a      	str	r2, [r3, #0]
			 }

			 timeuseinloop1rad = trad - timestamploop1rad;
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <main+0x940>)
 800187e:	ed93 7a00 	vldr	s14, [r3]
 8001882:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <main+0x944>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <main+0x904>)
 800188e:	edc3 7a00 	vstr	s15, [r3]

			 if(timeuseinloop1rad <= thalfrad)    //first half
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <main+0x904>)
 8001894:	ed93 7a00 	vldr	s14, [r3]
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <main+0x908>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	f200 808d 	bhi.w	80019c4 <main+0x954>
			 {
				 k = (n)*(0.5)*(alpharad)*(timeuseinloop1rad)*(timeuseinloop1rad);
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <main+0x948>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdf6 	bl	80004a0 <__aeabi_f2d>
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b34      	ldr	r3, [pc, #208]	; (800198c <main+0x91c>)
 80018ba:	f7fe fe49 	bl	8000550 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4614      	mov	r4, r2
 80018c4:	461d      	mov	r5, r3
 80018c6:	4b30      	ldr	r3, [pc, #192]	; (8001988 <main+0x918>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fde8 	bl	80004a0 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fe3a 	bl	8000550 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <main+0x904>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fdd9 	bl	80004a0 <__aeabi_f2d>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4620      	mov	r0, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	f7fe fe2b 	bl	8000550 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4614      	mov	r4, r2
 8001900:	461d      	mov	r5, r3
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <main+0x904>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fdca 	bl	80004a0 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fe1c 	bl	8000550 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f8c6 	bl	8000ab0 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	4a25      	ldr	r2, [pc, #148]	; (80019bc <main+0x94c>)
 8001928:	6013      	str	r3, [r2, #0]
				 thetarad = k+thetanowrad;
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <main+0x94c>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <main+0x950>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <main+0x924>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
				 wrad = (n)*(alpharad)*(timeuseinloop1rad);
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <main+0x948>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <main+0x918>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <main+0x904>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <main+0x928>)
 800195c:	edc3 7a00 	vstr	s15, [r3]
				 thetahalfrad = thetarad;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <main+0x924>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <main+0x920>)
 8001966:	6013      	str	r3, [r2, #0]
				 wradhalf = wrad;
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <main+0x928>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <main+0x914>)
 800196e:	6013      	str	r3, [r2, #0]
		 if(clockwiseoranticlockwise == 1)
 8001970:	f000 bcc8 	b.w	8002304 <main+0x1294>
 8001974:	200003f4 	.word	0x200003f4
 8001978:	200003e4 	.word	0x200003e4
 800197c:	200003e8 	.word	0x200003e8
 8001980:	20000430 	.word	0x20000430
 8001984:	2000042c 	.word	0x2000042c
 8001988:	2000001c 	.word	0x2000001c
 800198c:	3fe00000 	.word	0x3fe00000
 8001990:	200003fc 	.word	0x200003fc
 8001994:	200003f8 	.word	0x200003f8
 8001998:	20000400 	.word	0x20000400
 800199c:	20000470 	.word	0x20000470
 80019a0:	2000046c 	.word	0x2000046c
 80019a4:	200003bc 	.word	0x200003bc
 80019a8:	200003dc 	.word	0x200003dc
 80019ac:	200003c4 	.word	0x200003c4
 80019b0:	200003ec 	.word	0x200003ec
 80019b4:	200003f0 	.word	0x200003f0
 80019b8:	20000460 	.word	0x20000460
 80019bc:	20000454 	.word	0x20000454
 80019c0:	200003d4 	.word	0x200003d4
			 }

			 else if(timeuseinloop1rad > thalfrad && timeuseinloop1rad <= timerad)
 80019c4:	4bbb      	ldr	r3, [pc, #748]	; (8001cb4 <main+0xc44>)
 80019c6:	ed93 7a00 	vldr	s14, [r3]
 80019ca:	4bbb      	ldr	r3, [pc, #748]	; (8001cb8 <main+0xc48>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	dd7a      	ble.n	8001ad0 <main+0xa60>
 80019da:	4bb6      	ldr	r3, [pc, #728]	; (8001cb4 <main+0xc44>)
 80019dc:	ed93 7a00 	vldr	s14, [r3]
 80019e0:	4bb6      	ldr	r3, [pc, #728]	; (8001cbc <main+0xc4c>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d86f      	bhi.n	8001ad0 <main+0xa60>
			 {
				 a = timeuseinloop1rad-thalfrad;
 80019f0:	4bb0      	ldr	r3, [pc, #704]	; (8001cb4 <main+0xc44>)
 80019f2:	ed93 7a00 	vldr	s14, [r3]
 80019f6:	4bb0      	ldr	r3, [pc, #704]	; (8001cb8 <main+0xc48>)
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a00:	4baf      	ldr	r3, [pc, #700]	; (8001cc0 <main+0xc50>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]
				 thetarad = (wradhalf*a)+(0.5*alpharad*a*a)+thetahalfrad;
 8001a06:	4baf      	ldr	r3, [pc, #700]	; (8001cc4 <main+0xc54>)
 8001a08:	ed93 7a00 	vldr	s14, [r3]
 8001a0c:	4bac      	ldr	r3, [pc, #688]	; (8001cc0 <main+0xc50>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a16:	ee17 0a90 	vmov	r0, s15
 8001a1a:	f7fe fd41 	bl	80004a0 <__aeabi_f2d>
 8001a1e:	4680      	mov	r8, r0
 8001a20:	4689      	mov	r9, r1
 8001a22:	4ba9      	ldr	r3, [pc, #676]	; (8001cc8 <main+0xc58>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd3a 	bl	80004a0 <__aeabi_f2d>
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4ba6      	ldr	r3, [pc, #664]	; (8001ccc <main+0xc5c>)
 8001a32:	f7fe fd8d 	bl	8000550 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	461d      	mov	r5, r3
 8001a3e:	4ba0      	ldr	r3, [pc, #640]	; (8001cc0 <main+0xc50>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd2c 	bl	80004a0 <__aeabi_f2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fd7e 	bl	8000550 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	4b98      	ldr	r3, [pc, #608]	; (8001cc0 <main+0xc50>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fd1d 	bl	80004a0 <__aeabi_f2d>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fd6f 	bl	8000550 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4640      	mov	r0, r8
 8001a78:	4649      	mov	r1, r9
 8001a7a:	f7fe fbb3 	bl	80001e4 <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	461d      	mov	r5, r3
 8001a86:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <main+0xc60>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd08 	bl	80004a0 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fba4 	bl	80001e4 <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f804 	bl	8000ab0 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <main+0xc64>)
 8001aac:	6013      	str	r3, [r2, #0]
				 wrad = wradhalf+(alpharad*a);
 8001aae:	4b86      	ldr	r3, [pc, #536]	; (8001cc8 <main+0xc58>)
 8001ab0:	ed93 7a00 	vldr	s14, [r3]
 8001ab4:	4b82      	ldr	r3, [pc, #520]	; (8001cc0 <main+0xc50>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001abe:	4b81      	ldr	r3, [pc, #516]	; (8001cc4 <main+0xc54>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac8:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <main+0xc68>)
 8001aca:	edc3 7a00 	vstr	s15, [r3]
 8001ace:	e01e      	b.n	8001b0e <main+0xa9e>
			 }

			 else if(timeuseinloop1rad > timerad && stoprun == 0)
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <main+0xc44>)
 8001ad2:	ed93 7a00 	vldr	s14, [r3]
 8001ad6:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <main+0xc4c>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae4:	dc01      	bgt.n	8001aea <main+0xa7a>
		 if(clockwiseoranticlockwise == 1)
 8001ae6:	f000 bc0d 	b.w	8002304 <main+0x1294>
			 else if(timeuseinloop1rad > timerad && stoprun == 0)
 8001aea:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <main+0xc6c>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af8:	f040 8404 	bne.w	8002304 <main+0x1294>
			 {
				 run = 0;
 8001afc:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <main+0xc70>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
				 stoprun = 1;
 8001b04:	4b75      	ldr	r3, [pc, #468]	; (8001cdc <main+0xc6c>)
 8001b06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b0a:	601a      	str	r2, [r3, #0]
		 if(clockwiseoranticlockwise == 1)
 8001b0c:	e3fa      	b.n	8002304 <main+0x1294>
 8001b0e:	e3f9      	b.n	8002304 <main+0x1294>
				 //theta = angel;

			 }
		 }
	  }
	  else if(wmaxrad >= winputrad && start == 1)
 8001b10:	4b74      	ldr	r3, [pc, #464]	; (8001ce4 <main+0xc74>)
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	4b74      	ldr	r3, [pc, #464]	; (8001ce8 <main+0xc78>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	f2c0 83ef 	blt.w	8002306 <main+0x1296>
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <main+0xc7c>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b32:	eef4 7a47 	vcmp.f32	s15, s14
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	f040 83e4 	bne.w	8002306 <main+0x1296>
	  {
		 if(clockwiseoranticlockwise == 1)
 8001b3e:	4b6c      	ldr	r3, [pc, #432]	; (8001cf0 <main+0xc80>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b48:	eef4 7a47 	vcmp.f32	s15, s14
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	f040 81ee 	bne.w	8001f30 <main+0xec0>
		 {
			  if(count == 0)
 8001b54:	4b67      	ldr	r3, [pc, #412]	; (8001cf4 <main+0xc84>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	d10b      	bne.n	8001b7c <main+0xb0c>
			  {
				  run = 1;
 8001b64:	4b5e      	ldr	r3, [pc, #376]	; (8001ce0 <main+0xc70>)
 8001b66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b6a:	601a      	str	r2, [r3, #0]
				  timestamplooprad = trad;
 8001b6c:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <main+0xc88>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a62      	ldr	r2, [pc, #392]	; (8001cfc <main+0xc8c>)
 8001b72:	6013      	str	r3, [r2, #0]
				  count = 1;
 8001b74:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <main+0xc84>)
 8001b76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b7a:	601a      	str	r2, [r3, #0]
			  }

			  timeuseinlooprad = trad - timestamplooprad;
 8001b7c:	4b5e      	ldr	r3, [pc, #376]	; (8001cf8 <main+0xc88>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	4b5e      	ldr	r3, [pc, #376]	; (8001cfc <main+0xc8c>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8c:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <main+0xc90>)
 8001b8e:	edc3 7a00 	vstr	s15, [r3]
			  c = (winputrad*winputrad)/alpharad;
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <main+0xc78>)
 8001b94:	ed93 7a00 	vldr	s14, [r3]
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <main+0xc78>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ba2:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <main+0xc58>)
 8001ba4:	ed93 7a00 	vldr	s14, [r3]
 8001ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bac:	4b55      	ldr	r3, [pc, #340]	; (8001d04 <main+0xc94>)
 8001bae:	edc3 7a00 	vstr	s15, [r3]
			  thetastablerad = thetadiffrad - c;
 8001bb2:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <main+0xc98>)
 8001bb4:	ed93 7a00 	vldr	s14, [r3]
 8001bb8:	4b52      	ldr	r3, [pc, #328]	; (8001d04 <main+0xc94>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <main+0xc9c>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
			  f = winputrad/alpharad;
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <main+0xc78>)
 8001bca:	edd3 6a00 	vldr	s13, [r3]
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <main+0xc58>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <main+0xca0>)
 8001bda:	edc3 7a00 	vstr	s15, [r3]
			  g = thetastablerad/winputrad;
 8001bde:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <main+0xc9c>)
 8001be0:	edd3 6a00 	vldr	s13, [r3]
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <main+0xc78>)
 8001be6:	ed93 7a00 	vldr	s14, [r3]
 8001bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bee:	4b49      	ldr	r3, [pc, #292]	; (8001d14 <main+0xca4>)
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
			  tstablerad = g;
 8001bf4:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <main+0xca4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a47      	ldr	r2, [pc, #284]	; (8001d18 <main+0xca8>)
 8001bfa:	6013      	str	r3, [r2, #0]
			  tstableirad = f;
 8001bfc:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <main+0xca0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a46      	ldr	r2, [pc, #280]	; (8001d1c <main+0xcac>)
 8001c02:	6013      	str	r3, [r2, #0]
			  tstablefrad = f + g;
 8001c04:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <main+0xca0>)
 8001c06:	ed93 7a00 	vldr	s14, [r3]
 8001c0a:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <main+0xca4>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <main+0xcb0>)
 8001c16:	edc3 7a00 	vstr	s15, [r3]
			  time1rad = f + g + f;
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <main+0xca0>)
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <main+0xca4>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <main+0xca0>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c34:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <main+0xcb4>)
 8001c36:	edc3 7a00 	vstr	s15, [r3]

			  if(timeuseinlooprad <= tstableirad)
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <main+0xc90>)
 8001c3c:	ed93 7a00 	vldr	s14, [r3]
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <main+0xcac>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d873      	bhi.n	8001d38 <main+0xcc8>
			  {
				   wrad = alpharad*timeuseinlooprad;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <main+0xc58>)
 8001c52:	ed93 7a00 	vldr	s14, [r3]
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <main+0xc90>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <main+0xc68>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
				   j = (wrad*wrad)/(2*alpharad);
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <main+0xc68>)
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <main+0xc68>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <main+0xc58>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <main+0xcb8>)
 8001c86:	edc3 7a00 	vstr	s15, [r3]
				   thetarad = j+thetanowrad;
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <main+0xcb8>)
 8001c8c:	ed93 7a00 	vldr	s14, [r3]
 8001c90:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <main+0xcbc>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <main+0xc64>)
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
				   thetastableirad = thetarad;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <main+0xc64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <main+0xcc0>)
 8001ca6:	6013      	str	r3, [r2, #0]
				   wstableifrad = wrad;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <main+0xc68>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <main+0xcc4>)
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e329      	b.n	8002306 <main+0x1296>
 8001cb2:	bf00      	nop
 8001cb4:	200003f4 	.word	0x200003f4
 8001cb8:	200003e4 	.word	0x200003e4
 8001cbc:	200003e8 	.word	0x200003e8
 8001cc0:	20000430 	.word	0x20000430
 8001cc4:	2000042c 	.word	0x2000042c
 8001cc8:	2000001c 	.word	0x2000001c
 8001ccc:	3fe00000 	.word	0x3fe00000
 8001cd0:	200003fc 	.word	0x200003fc
 8001cd4:	200003f8 	.word	0x200003f8
 8001cd8:	20000400 	.word	0x20000400
 8001cdc:	20000470 	.word	0x20000470
 8001ce0:	2000046c 	.word	0x2000046c
 8001ce4:	200003dc 	.word	0x200003dc
 8001ce8:	200003e0 	.word	0x200003e0
 8001cec:	20000464 	.word	0x20000464
 8001cf0:	200003bc 	.word	0x200003bc
 8001cf4:	200003c4 	.word	0x200003c4
 8001cf8:	200003ec 	.word	0x200003ec
 8001cfc:	20000404 	.word	0x20000404
 8001d00:	20000408 	.word	0x20000408
 8001d04:	20000438 	.word	0x20000438
 8001d08:	200003d8 	.word	0x200003d8
 8001d0c:	2000040c 	.word	0x2000040c
 8001d10:	20000440 	.word	0x20000440
 8001d14:	20000444 	.word	0x20000444
 8001d18:	20000410 	.word	0x20000410
 8001d1c:	20000414 	.word	0x20000414
 8001d20:	20000418 	.word	0x20000418
 8001d24:	2000041c 	.word	0x2000041c
 8001d28:	20000450 	.word	0x20000450
 8001d2c:	200003d4 	.word	0x200003d4
 8001d30:	20000420 	.word	0x20000420
 8001d34:	20000428 	.word	0x20000428
			  }

			  else if(timeuseinlooprad > tstableirad && timeuseinlooprad <= tstablefrad)
 8001d38:	4b6e      	ldr	r3, [pc, #440]	; (8001ef4 <main+0xe84>)
 8001d3a:	ed93 7a00 	vldr	s14, [r3]
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <main+0xe88>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	dd2e      	ble.n	8001dac <main+0xd3c>
 8001d4e:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <main+0xe84>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4b69      	ldr	r3, [pc, #420]	; (8001efc <main+0xe8c>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d823      	bhi.n	8001dac <main+0xd3c>
			  {
				   h = timeuseinlooprad-tstableirad;
 8001d64:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <main+0xe84>)
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <main+0xe88>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d74:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <main+0xe90>)
 8001d76:	edc3 7a00 	vstr	s15, [r3]
				   thetarad = (wstableifrad*h)+(thetastableirad);
 8001d7a:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <main+0xe94>)
 8001d7c:	ed93 7a00 	vldr	s14, [r3]
 8001d80:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <main+0xe90>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <main+0xe98>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d94:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <main+0xe9c>)
 8001d96:	edc3 7a00 	vstr	s15, [r3]
				   wrad = wstableifrad;
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <main+0xe94>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a5c      	ldr	r2, [pc, #368]	; (8001f10 <main+0xea0>)
 8001da0:	6013      	str	r3, [r2, #0]
				   thetastablefrad = thetarad;
 8001da2:	4b5a      	ldr	r3, [pc, #360]	; (8001f0c <main+0xe9c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5b      	ldr	r2, [pc, #364]	; (8001f14 <main+0xea4>)
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e2ac      	b.n	8002306 <main+0x1296>
			  }

			  else if(timeuseinlooprad > tstablefrad && timeuseinlooprad <= time1rad)
 8001dac:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <main+0xe84>)
 8001dae:	ed93 7a00 	vldr	s14, [r3]
 8001db2:	4b52      	ldr	r3, [pc, #328]	; (8001efc <main+0xe8c>)
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dd7a      	ble.n	8001eb8 <main+0xe48>
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <main+0xe84>)
 8001dc4:	ed93 7a00 	vldr	s14, [r3]
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <main+0xea8>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d86f      	bhi.n	8001eb8 <main+0xe48>
			  {
				   i = timeuseinlooprad-tstablefrad;
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <main+0xe84>)
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <main+0xe8c>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de8:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <main+0xeac>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]
				   thetarad = (wstableifrad*i)-(0.5*alpharad*i*i)+(thetastablefrad);
 8001dee:	4b45      	ldr	r3, [pc, #276]	; (8001f04 <main+0xe94>)
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <main+0xeac>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	ee17 0a90 	vmov	r0, s15
 8001e02:	f7fe fb4d 	bl	80004a0 <__aeabi_f2d>
 8001e06:	4680      	mov	r8, r0
 8001e08:	4689      	mov	r9, r1
 8001e0a:	4b45      	ldr	r3, [pc, #276]	; (8001f20 <main+0xeb0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb46 	bl	80004a0 <__aeabi_f2d>
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <main+0xeb4>)
 8001e1a:	f7fe fb99 	bl	8000550 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4614      	mov	r4, r2
 8001e24:	461d      	mov	r5, r3
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <main+0xeac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb38 	bl	80004a0 <__aeabi_f2d>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fb8a 	bl	8000550 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	461d      	mov	r5, r3
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <main+0xeac>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb29 	bl	80004a0 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fb7b 	bl	8000550 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4640      	mov	r0, r8
 8001e60:	4649      	mov	r1, r9
 8001e62:	f7fe f9bd 	bl	80001e0 <__aeabi_dsub>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	461d      	mov	r5, r3
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <main+0xea4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb14 	bl	80004a0 <__aeabi_f2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe f9b0 	bl	80001e4 <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fe10 	bl	8000ab0 <__aeabi_d2f>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <main+0xe9c>)
 8001e94:	6013      	str	r3, [r2, #0]
				   wrad = wstableifrad-(alpharad*i);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <main+0xe94>)
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <main+0xeb0>)
 8001e9e:	edd3 6a00 	vldr	s13, [r3]
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <main+0xeac>)
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <main+0xea0>)
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
 8001eb6:	e226      	b.n	8002306 <main+0x1296>
			  }

			  else if(timeuseinlooprad > time1rad && stoprun == 0)
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <main+0xe84>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <main+0xea8>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	f340 821b 	ble.w	8002306 <main+0x1296>
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <main+0xeb8>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	f040 8212 	bne.w	8002306 <main+0x1296>
			  {
				   run = 0;
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <main+0xebc>)
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
				   stoprun = 1;
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <main+0xeb8>)
 8001eec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e208      	b.n	8002306 <main+0x1296>
 8001ef4:	20000408 	.word	0x20000408
 8001ef8:	20000414 	.word	0x20000414
 8001efc:	20000418 	.word	0x20000418
 8001f00:	20000448 	.word	0x20000448
 8001f04:	20000428 	.word	0x20000428
 8001f08:	20000420 	.word	0x20000420
 8001f0c:	200003f8 	.word	0x200003f8
 8001f10:	20000400 	.word	0x20000400
 8001f14:	20000424 	.word	0x20000424
 8001f18:	2000041c 	.word	0x2000041c
 8001f1c:	2000044c 	.word	0x2000044c
 8001f20:	2000001c 	.word	0x2000001c
 8001f24:	3fe00000 	.word	0x3fe00000
 8001f28:	20000470 	.word	0x20000470
 8001f2c:	2000046c 	.word	0x2000046c
				   //theta = angel;

			  }
	  	 }
		 else if(clockwiseoranticlockwise == 0)
 8001f30:	4b7d      	ldr	r3, [pc, #500]	; (8002128 <main+0x10b8>)
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	f040 81e2 	bne.w	8002306 <main+0x1296>
		 {
			  if(count == 0)
 8001f42:	4b7a      	ldr	r3, [pc, #488]	; (800212c <main+0x10bc>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f50:	d10b      	bne.n	8001f6a <main+0xefa>
			  {
				  run = 1;
 8001f52:	4b77      	ldr	r3, [pc, #476]	; (8002130 <main+0x10c0>)
 8001f54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f58:	601a      	str	r2, [r3, #0]
				  timestamplooprad = trad;
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <main+0x10c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a76      	ldr	r2, [pc, #472]	; (8002138 <main+0x10c8>)
 8001f60:	6013      	str	r3, [r2, #0]
				  count = 1;
 8001f62:	4b72      	ldr	r3, [pc, #456]	; (800212c <main+0x10bc>)
 8001f64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f68:	601a      	str	r2, [r3, #0]
			  }

			  timeuseinlooprad = trad - timestamplooprad;
 8001f6a:	4b72      	ldr	r3, [pc, #456]	; (8002134 <main+0x10c4>)
 8001f6c:	ed93 7a00 	vldr	s14, [r3]
 8001f70:	4b71      	ldr	r3, [pc, #452]	; (8002138 <main+0x10c8>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7a:	4b70      	ldr	r3, [pc, #448]	; (800213c <main+0x10cc>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
			  c = (winputrad*winputrad)/alpharad;
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <main+0x10d0>)
 8001f82:	ed93 7a00 	vldr	s14, [r3]
 8001f86:	4b6e      	ldr	r3, [pc, #440]	; (8002140 <main+0x10d0>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f90:	4b6c      	ldr	r3, [pc, #432]	; (8002144 <main+0x10d4>)
 8001f92:	ed93 7a00 	vldr	s14, [r3]
 8001f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f9a:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <main+0x10d8>)
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
			  thetastablerad = thetadiffrad - c;
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <main+0x10dc>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	4b68      	ldr	r3, [pc, #416]	; (8002148 <main+0x10d8>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb0:	4b67      	ldr	r3, [pc, #412]	; (8002150 <main+0x10e0>)
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
			  f = winputrad/alpharad;
 8001fb6:	4b62      	ldr	r3, [pc, #392]	; (8002140 <main+0x10d0>)
 8001fb8:	edd3 6a00 	vldr	s13, [r3]
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <main+0x10d4>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <main+0x10e4>)
 8001fc8:	edc3 7a00 	vstr	s15, [r3]
			  g = thetastablerad/winputrad;
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <main+0x10e0>)
 8001fce:	edd3 6a00 	vldr	s13, [r3]
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <main+0x10d0>)
 8001fd4:	ed93 7a00 	vldr	s14, [r3]
 8001fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fdc:	4b5e      	ldr	r3, [pc, #376]	; (8002158 <main+0x10e8>)
 8001fde:	edc3 7a00 	vstr	s15, [r3]
			  tstablerad = g;
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	; (8002158 <main+0x10e8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5d      	ldr	r2, [pc, #372]	; (800215c <main+0x10ec>)
 8001fe8:	6013      	str	r3, [r2, #0]
			  tstableirad = f;
 8001fea:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <main+0x10e4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5c      	ldr	r2, [pc, #368]	; (8002160 <main+0x10f0>)
 8001ff0:	6013      	str	r3, [r2, #0]
			  tstablefrad = f + g;
 8001ff2:	4b58      	ldr	r3, [pc, #352]	; (8002154 <main+0x10e4>)
 8001ff4:	ed93 7a00 	vldr	s14, [r3]
 8001ff8:	4b57      	ldr	r3, [pc, #348]	; (8002158 <main+0x10e8>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	4b58      	ldr	r3, [pc, #352]	; (8002164 <main+0x10f4>)
 8002004:	edc3 7a00 	vstr	s15, [r3]
			  time1rad = f + g + f;
 8002008:	4b52      	ldr	r3, [pc, #328]	; (8002154 <main+0x10e4>)
 800200a:	ed93 7a00 	vldr	s14, [r3]
 800200e:	4b52      	ldr	r3, [pc, #328]	; (8002158 <main+0x10e8>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <main+0x10e4>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002022:	4b51      	ldr	r3, [pc, #324]	; (8002168 <main+0x10f8>)
 8002024:	edc3 7a00 	vstr	s15, [r3]

			  if(timeuseinlooprad <= tstableirad)
 8002028:	4b44      	ldr	r3, [pc, #272]	; (800213c <main+0x10cc>)
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <main+0x10f0>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d83a      	bhi.n	80020b4 <main+0x1044>
			  {
//						   alpharad = 0.5;
				   wrad = n*alpharad*timeuseinlooprad;
 800203e:	4b4b      	ldr	r3, [pc, #300]	; (800216c <main+0x10fc>)
 8002040:	ed93 7a00 	vldr	s14, [r3]
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <main+0x10d4>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <main+0x10cc>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	4b45      	ldr	r3, [pc, #276]	; (8002170 <main+0x1100>)
 800205a:	edc3 7a00 	vstr	s15, [r3]
				   j = (n*wrad*wrad)/(2*alpharad);
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <main+0x10fc>)
 8002060:	ed93 7a00 	vldr	s14, [r3]
 8002064:	4b42      	ldr	r3, [pc, #264]	; (8002170 <main+0x1100>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <main+0x1100>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <main+0x10d4>)
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <main+0x1104>)
 8002088:	edc3 7a00 	vstr	s15, [r3]
				   thetarad = j+thetanowrad;
 800208c:	4b39      	ldr	r3, [pc, #228]	; (8002174 <main+0x1104>)
 800208e:	ed93 7a00 	vldr	s14, [r3]
 8002092:	4b39      	ldr	r3, [pc, #228]	; (8002178 <main+0x1108>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209c:	4b37      	ldr	r3, [pc, #220]	; (800217c <main+0x110c>)
 800209e:	edc3 7a00 	vstr	s15, [r3]
				   thetastableirad = thetarad;
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <main+0x110c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a36      	ldr	r2, [pc, #216]	; (8002180 <main+0x1110>)
 80020a8:	6013      	str	r3, [r2, #0]
				   wstableifrad = wrad;
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <main+0x1100>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a35      	ldr	r2, [pc, #212]	; (8002184 <main+0x1114>)
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e128      	b.n	8002306 <main+0x1296>
			  }

			  else if(timeuseinlooprad > tstableirad && timeuseinlooprad <= tstablefrad)
 80020b4:	4b21      	ldr	r3, [pc, #132]	; (800213c <main+0x10cc>)
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <main+0x10f0>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	dd62      	ble.n	8002190 <main+0x1120>
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <main+0x10cc>)
 80020cc:	ed93 7a00 	vldr	s14, [r3]
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <main+0x10f4>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	d857      	bhi.n	8002190 <main+0x1120>
			  {
//						   alpha = 0;
				   h = timeuseinlooprad-tstableirad;
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <main+0x10cc>)
 80020e2:	ed93 7a00 	vldr	s14, [r3]
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <main+0x10f0>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <main+0x1118>)
 80020f2:	edc3 7a00 	vstr	s15, [r3]
				   thetarad = (wstableifrad*h)+(thetastableirad);
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <main+0x1114>)
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <main+0x1118>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <main+0x1110>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <main+0x110c>)
 8002112:	edc3 7a00 	vstr	s15, [r3]
				   wrad = wstableifrad;
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <main+0x1114>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <main+0x1100>)
 800211c:	6013      	str	r3, [r2, #0]
				   thetastablefrad = thetarad;
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <main+0x110c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <main+0x111c>)
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e0ee      	b.n	8002306 <main+0x1296>
 8002128:	200003bc 	.word	0x200003bc
 800212c:	200003c4 	.word	0x200003c4
 8002130:	2000046c 	.word	0x2000046c
 8002134:	200003ec 	.word	0x200003ec
 8002138:	20000404 	.word	0x20000404
 800213c:	20000408 	.word	0x20000408
 8002140:	200003e0 	.word	0x200003e0
 8002144:	2000001c 	.word	0x2000001c
 8002148:	20000438 	.word	0x20000438
 800214c:	200003d8 	.word	0x200003d8
 8002150:	2000040c 	.word	0x2000040c
 8002154:	20000440 	.word	0x20000440
 8002158:	20000444 	.word	0x20000444
 800215c:	20000410 	.word	0x20000410
 8002160:	20000414 	.word	0x20000414
 8002164:	20000418 	.word	0x20000418
 8002168:	2000041c 	.word	0x2000041c
 800216c:	20000460 	.word	0x20000460
 8002170:	20000400 	.word	0x20000400
 8002174:	20000450 	.word	0x20000450
 8002178:	200003d4 	.word	0x200003d4
 800217c:	200003f8 	.word	0x200003f8
 8002180:	20000420 	.word	0x20000420
 8002184:	20000428 	.word	0x20000428
 8002188:	20000448 	.word	0x20000448
 800218c:	20000424 	.word	0x20000424
			  }

			  else if(timeuseinlooprad > tstablefrad && timeuseinlooprad <= time1rad)
 8002190:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <main+0x1264>)
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <main+0x1268>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	dd7a      	ble.n	800229c <main+0x122c>
 80021a6:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <main+0x1264>)
 80021a8:	ed93 7a00 	vldr	s14, [r3]
 80021ac:	4b4b      	ldr	r3, [pc, #300]	; (80022dc <main+0x126c>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ba:	d86f      	bhi.n	800229c <main+0x122c>
			  {
//						   alpha = -0.5;
				   i = timeuseinlooprad-tstablefrad;
 80021bc:	4b45      	ldr	r3, [pc, #276]	; (80022d4 <main+0x1264>)
 80021be:	ed93 7a00 	vldr	s14, [r3]
 80021c2:	4b45      	ldr	r3, [pc, #276]	; (80022d8 <main+0x1268>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021cc:	4b44      	ldr	r3, [pc, #272]	; (80022e0 <main+0x1270>)
 80021ce:	edc3 7a00 	vstr	s15, [r3]
				   thetarad = (wstableifrad*i)+(0.5*alpharad*i*i)+(thetastablefrad);
 80021d2:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <main+0x1274>)
 80021d4:	ed93 7a00 	vldr	s14, [r3]
 80021d8:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <main+0x1270>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e2:	ee17 0a90 	vmov	r0, s15
 80021e6:	f7fe f95b 	bl	80004a0 <__aeabi_f2d>
 80021ea:	4680      	mov	r8, r0
 80021ec:	4689      	mov	r9, r1
 80021ee:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <main+0x1278>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f954 	bl	80004a0 <__aeabi_f2d>
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <main+0x127c>)
 80021fe:	f7fe f9a7 	bl	8000550 <__aeabi_dmul>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4614      	mov	r4, r2
 8002208:	461d      	mov	r5, r3
 800220a:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <main+0x1270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f946 	bl	80004a0 <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4620      	mov	r0, r4
 800221a:	4629      	mov	r1, r5
 800221c:	f7fe f998 	bl	8000550 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4614      	mov	r4, r2
 8002226:	461d      	mov	r5, r3
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <main+0x1270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f937 	bl	80004a0 <__aeabi_f2d>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4620      	mov	r0, r4
 8002238:	4629      	mov	r1, r5
 800223a:	f7fe f989 	bl	8000550 <__aeabi_dmul>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4640      	mov	r0, r8
 8002244:	4649      	mov	r1, r9
 8002246:	f7fd ffcd 	bl	80001e4 <__adddf3>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4614      	mov	r4, r2
 8002250:	461d      	mov	r5, r3
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <main+0x1280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f922 	bl	80004a0 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fd ffbe 	bl	80001e4 <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fc1e 	bl	8000ab0 <__aeabi_d2f>
 8002274:	4603      	mov	r3, r0
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <main+0x1284>)
 8002278:	6013      	str	r3, [r2, #0]
				   wrad = wstableifrad+(alpharad*i);
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <main+0x1278>)
 800227c:	ed93 7a00 	vldr	s14, [r3]
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <main+0x1270>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <main+0x1274>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <main+0x1288>)
 8002296:	edc3 7a00 	vstr	s15, [r3]
 800229a:	e034      	b.n	8002306 <main+0x1296>
			  }

			  else if(timeuseinlooprad > time1rad && stoprun == 0)
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <main+0x1264>)
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <main+0x126c>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	dd29      	ble.n	8002306 <main+0x1296>
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <main+0x128c>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c0:	d121      	bne.n	8002306 <main+0x1296>
			  {
				  run = 0;
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <main+0x1290>)
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
				  stoprun = 1;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <main+0x128c>)
 80022cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e018      	b.n	8002306 <main+0x1296>
 80022d4:	20000408 	.word	0x20000408
 80022d8:	20000418 	.word	0x20000418
 80022dc:	2000041c 	.word	0x2000041c
 80022e0:	2000044c 	.word	0x2000044c
 80022e4:	20000428 	.word	0x20000428
 80022e8:	2000001c 	.word	0x2000001c
 80022ec:	3fe00000 	.word	0x3fe00000
 80022f0:	20000424 	.word	0x20000424
 80022f4:	200003f8 	.word	0x200003f8
 80022f8:	20000400 	.word	0x20000400
 80022fc:	20000470 	.word	0x20000470
 8002300:	2000046c 	.word	0x2000046c
		 if(clockwiseoranticlockwise == 1)
 8002304:	bf00      	nop

			  }
	  	   }
	  }
	  theta = (thetarad*180)/(M_PI);
 8002306:	4bc6      	ldr	r3, [pc, #792]	; (8002620 <main+0x15b0>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8002624 <main+0x15b4>
 8002310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002314:	ee17 0a90 	vmov	r0, s15
 8002318:	f7fe f8c2 	bl	80004a0 <__aeabi_f2d>
 800231c:	a3bc      	add	r3, pc, #752	; (adr r3, 8002610 <main+0x15a0>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe fa3f 	bl	80007a4 <__aeabi_ddiv>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fbbf 	bl	8000ab0 <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	4abc      	ldr	r2, [pc, #752]	; (8002628 <main+0x15b8>)
 8002336:	6013      	str	r3, [r2, #0]
	  w = (wrad*60)/(2*M_PI);
 8002338:	4bbc      	ldr	r3, [pc, #752]	; (800262c <main+0x15bc>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8002630 <main+0x15c0>
 8002342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f8a9 	bl	80004a0 <__aeabi_f2d>
 800234e:	a3b2      	add	r3, pc, #712	; (adr r3, 8002618 <main+0x15a8>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe fa26 	bl	80007a4 <__aeabi_ddiv>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fba6 	bl	8000ab0 <__aeabi_d2f>
 8002364:	4603      	mov	r3, r0
 8002366:	4ab3      	ldr	r2, [pc, #716]	; (8002634 <main+0x15c4>)
 8002368:	6013      	str	r3, [r2, #0]

//	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (int) pwm);
	  ///////////////PID////////////////
//	  x_bar = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);

	  if (micros() - Timestamp_Encoder >= 100)
 800236a:	f001 f981 	bl	8003670 <micros>
 800236e:	4bb2      	ldr	r3, [pc, #712]	; (8002638 <main+0x15c8>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	1a84      	subs	r4, r0, r2
 8002376:	603c      	str	r4, [r7, #0]
 8002378:	eb61 0303 	sbc.w	r3, r1, r3
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002382:	460b      	mov	r3, r1
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	4613      	mov	r3, r2
 8002388:	f173 0300 	sbcs.w	r3, r3, #0
 800238c:	f4fe aea1 	bcc.w	80010d2 <main+0x62>
	  {
 			Timestamp_Encoder = micros();
 8002390:	f001 f96e 	bl	8003670 <micros>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	49a7      	ldr	r1, [pc, #668]	; (8002638 <main+0x15c8>)
 800239a:	e9c1 2300 	strd	r2, r3, [r1]
			EncoderVel = (EncoderVel * 99 + EncoderVelocity_Update()) / 100.0;
 800239e:	4ba7      	ldr	r3, [pc, #668]	; (800263c <main+0x15cc>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002640 <main+0x15d0>
 80023a8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80023ac:	f001 f8f2 	bl	8003594 <EncoderVelocity_Update>
 80023b0:	eef0 7a40 	vmov.f32	s15, s0
 80023b4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80023b8:	ee17 0a90 	vmov	r0, s15
 80023bc:	f7fe f870 	bl	80004a0 <__aeabi_f2d>
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	4b9f      	ldr	r3, [pc, #636]	; (8002644 <main+0x15d4>)
 80023c6:	f7fe f9ed 	bl	80007a4 <__aeabi_ddiv>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fb6d 	bl	8000ab0 <__aeabi_d2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a98      	ldr	r2, [pc, #608]	; (800263c <main+0x15cc>)
 80023da:	6013      	str	r3, [r2, #0]
			wgu = EncoderVel*60 / 4095;
 80023dc:	4b97      	ldr	r3, [pc, #604]	; (800263c <main+0x15cc>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002630 <main+0x15c0>
 80023e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ea:	eddf 6a97 	vldr	s13, [pc, #604]	; 8002648 <main+0x15d8>
 80023ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f2:	4b96      	ldr	r3, [pc, #600]	; (800264c <main+0x15dc>)
 80023f4:	edc3 7a00 	vstr	s15, [r3]

			if (wgu > 15 || wgu<-15)
 80023f8:	4b94      	ldr	r3, [pc, #592]	; (800264c <main+0x15dc>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240a:	dc09      	bgt.n	8002420 <main+0x13b0>
 800240c:	4b8f      	ldr	r3, [pc, #572]	; (800264c <main+0x15dc>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d503      	bpl.n	8002428 <main+0x13b8>
			{
				wgu = 0;
 8002420:	4b8a      	ldr	r3, [pc, #552]	; (800264c <main+0x15dc>)
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
			}

			error = (theta - angel);
 8002428:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <main+0x15b8>)
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	4b88      	ldr	r3, [pc, #544]	; (8002650 <main+0x15e0>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002438:	4b86      	ldr	r3, [pc, #536]	; (8002654 <main+0x15e4>)
 800243a:	edc3 7a00 	vstr	s15, [r3]

			if (error<0)
 800243e:	4b85      	ldr	r3, [pc, #532]	; (8002654 <main+0x15e4>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	d509      	bpl.n	8002462 <main+0x13f2>
			{
				error =0-error;
 800244e:	4b81      	ldr	r3, [pc, #516]	; (8002654 <main+0x15e4>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002658 <main+0x15e8>
 8002458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245c:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <main+0x15e4>)
 800245e:	edc3 7a00 	vstr	s15, [r3]
			}

			integral += error;
 8002462:	4b7e      	ldr	r3, [pc, #504]	; (800265c <main+0x15ec>)
 8002464:	ed93 7a00 	vldr	s14, [r3]
 8002468:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <main+0x15e4>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002472:	4b7a      	ldr	r3, [pc, #488]	; (800265c <main+0x15ec>)
 8002474:	edc3 7a00 	vstr	s15, [r3]
			if(stoprun!=1)
 8002478:	4b79      	ldr	r3, [pc, #484]	; (8002660 <main+0x15f0>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002482:	eef4 7a47 	vcmp.f32	s15, s14
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	d040      	beq.n	800250e <main+0x149e>
			{
				PID_p = Kp*error;
 800248c:	4b75      	ldr	r3, [pc, #468]	; (8002664 <main+0x15f4>)
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	4b70      	ldr	r3, [pc, #448]	; (8002654 <main+0x15e4>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	4b72      	ldr	r3, [pc, #456]	; (8002668 <main+0x15f8>)
 800249e:	edc3 7a00 	vstr	s15, [r3]
				PID_i = Ki*integral/Timestamp_Encoder;
 80024a2:	4b72      	ldr	r3, [pc, #456]	; (800266c <main+0x15fc>)
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	4b6c      	ldr	r3, [pc, #432]	; (800265c <main+0x15ec>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee27 8a27 	vmul.f32	s16, s14, s15
 80024b2:	4b61      	ldr	r3, [pc, #388]	; (8002638 <main+0x15c8>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fc10 	bl	8000ce0 <__aeabi_ul2f>
 80024c0:	ee07 0a10 	vmov	s14, r0
 80024c4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80024c8:	4b69      	ldr	r3, [pc, #420]	; (8002670 <main+0x1600>)
 80024ca:	edc3 7a00 	vstr	s15, [r3]
				PID_d = Kd*(error-last);
 80024ce:	4b61      	ldr	r3, [pc, #388]	; (8002654 <main+0x15e4>)
 80024d0:	ed93 7a00 	vldr	s14, [r3]
 80024d4:	4b67      	ldr	r3, [pc, #412]	; (8002674 <main+0x1604>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024de:	4b66      	ldr	r3, [pc, #408]	; (8002678 <main+0x1608>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	4b64      	ldr	r3, [pc, #400]	; (800267c <main+0x160c>)
 80024ea:	edc3 7a00 	vstr	s15, [r3]
				PID = PID_p + PID_i + PID_d;
 80024ee:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <main+0x15f8>)
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	4b5e      	ldr	r3, [pc, #376]	; (8002670 <main+0x1600>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024fe:	4b5f      	ldr	r3, [pc, #380]	; (800267c <main+0x160c>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002508:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <main+0x1610>)
 800250a:	edc3 7a00 	vstr	s15, [r3]
			}

			last = error;
 800250e:	4b51      	ldr	r3, [pc, #324]	; (8002654 <main+0x15e4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a58      	ldr	r2, [pc, #352]	; (8002674 <main+0x1604>)
 8002514:	6013      	str	r3, [r2, #0]
			if (sethome == 0)
 8002516:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <main+0x1614>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <main+0x14b6>
			{
				pwm = PID  ;
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <main+0x1610>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a59      	ldr	r2, [pc, #356]	; (8002688 <main+0x1618>)
 8002524:	6013      	str	r3, [r2, #0]
			}



			if (pwm > 10000 )
 8002526:	4b58      	ldr	r3, [pc, #352]	; (8002688 <main+0x1618>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800268c <main+0x161c>
 8002530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	dd02      	ble.n	8002540 <main+0x14d0>
			{
				 pwm = 10000;
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <main+0x1618>)
 800253c:	4a54      	ldr	r2, [pc, #336]	; (8002690 <main+0x1620>)
 800253e:	601a      	str	r2, [r3, #0]
			}

			if (angel < thetainput )
 8002540:	4b43      	ldr	r3, [pc, #268]	; (8002650 <main+0x15e0>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <main+0x1624>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002554:	d517      	bpl.n	8002586 <main+0x1516>
			{

			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (int)pwm+inpwm);
 8002556:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <main+0x1618>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <main+0x1628>)
 8002566:	edd3 7a00 	vldr	s15, [r3]
 800256a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256e:	4b4b      	ldr	r3, [pc, #300]	; (800269c <main+0x162c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002576:	ee17 2a90 	vmov	r2, s15
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 , 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2140      	movs	r1, #64	; 0x40
 8002580:	4847      	ldr	r0, [pc, #284]	; (80026a0 <main+0x1630>)
 8002582:	f002 fa37 	bl	80049f4 <HAL_GPIO_WritePin>
			}

			if (angel > thetainput)
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <main+0x15e0>)
 8002588:	ed93 7a00 	vldr	s14, [r3]
 800258c:	4b41      	ldr	r3, [pc, #260]	; (8002694 <main+0x1624>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	dd17      	ble.n	80025cc <main+0x155c>
			{

			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (int)pwm+inpwm);
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <main+0x1618>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <main+0x1628>)
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b4:	4b39      	ldr	r3, [pc, #228]	; (800269c <main+0x162c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025bc:	ee17 2a90 	vmov	r2, s15
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 , 1);
 80025c2:	2201      	movs	r2, #1
 80025c4:	2140      	movs	r1, #64	; 0x40
 80025c6:	4836      	ldr	r0, [pc, #216]	; (80026a0 <main+0x1630>)
 80025c8:	f002 fa14 	bl	80049f4 <HAL_GPIO_WritePin>
			}

			if(run == 0 && stoprun == 1 && sunflower == 0)
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <main+0x1634>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d17a      	bne.n	80026d2 <main+0x1662>
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <main+0x15f0>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025e6:	eef4 7a47 	vcmp.f32	s15, s14
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	d170      	bne.n	80026d2 <main+0x1662>
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <main+0x1638>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d16c      	bne.n	80026d2 <main+0x1662>





				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <main+0x162c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2200      	movs	r2, #0
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
				pwm = 0;
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <main+0x1618>)
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e050      	b.n	80026ac <main+0x163c>
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	54442d18 	.word	0x54442d18
 8002614:	400921fb 	.word	0x400921fb
 8002618:	54442d18 	.word	0x54442d18
 800261c:	401921fb 	.word	0x401921fb
 8002620:	200003f8 	.word	0x200003f8
 8002624:	43340000 	.word	0x43340000
 8002628:	200003c8 	.word	0x200003c8
 800262c:	20000400 	.word	0x20000400
 8002630:	42700000 	.word	0x42700000
 8002634:	200003cc 	.word	0x200003cc
 8002638:	20000390 	.word	0x20000390
 800263c:	20000358 	.word	0x20000358
 8002640:	42c60000 	.word	0x42c60000
 8002644:	40590000 	.word	0x40590000
 8002648:	457ff000 	.word	0x457ff000
 800264c:	2000035c 	.word	0x2000035c
 8002650:	20000360 	.word	0x20000360
 8002654:	2000036c 	.word	0x2000036c
 8002658:	00000000 	.word	0x00000000
 800265c:	20000368 	.word	0x20000368
 8002660:	20000470 	.word	0x20000470
 8002664:	20000004 	.word	0x20000004
 8002668:	20000378 	.word	0x20000378
 800266c:	20000008 	.word	0x20000008
 8002670:	2000037c 	.word	0x2000037c
 8002674:	20000370 	.word	0x20000370
 8002678:	2000000c 	.word	0x2000000c
 800267c:	20000380 	.word	0x20000380
 8002680:	20000374 	.word	0x20000374
 8002684:	20000018 	.word	0x20000018
 8002688:	20000364 	.word	0x20000364
 800268c:	461c4000 	.word	0x461c4000
 8002690:	461c4000 	.word	0x461c4000
 8002694:	200003b0 	.word	0x200003b0
 8002698:	20000010 	.word	0x20000010
 800269c:	20000150 	.word	0x20000150
 80026a0:	40020400 	.word	0x40020400
 80026a4:	2000046c 	.word	0x2000046c
 80026a8:	200002f4 	.word	0x200002f4
				PID = 0;
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <main+0x1688>)
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
				PID_i  = 0;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <main+0x168c>)
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
				PID_d = 0;
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <main+0x1690>)
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

				integral = 0;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <main+0x1694>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
				finishtask = 1;
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <main+0x1698>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]


//				EndEffector();
			}

			if (finishtask == 1)
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <main+0x1698>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f47e acfb 	bne.w	80010d2 <main+0x62>
			  {
				sendAck(2);
 80026dc:	2002      	movs	r0, #2
 80026de:	f000 ff09 	bl	80034f4 <sendAck>
//				sunflower=7;
				finishtask = 0;
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <main+0x1698>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
				sunflower = 1;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <main+0x169c>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
				EndEffector();
 80026ee:	f000 ff25 	bl	800353c <EndEffector>
	  uartprotocol();
 80026f2:	f7fe bcee 	b.w	80010d2 <main+0x62>
 80026f6:	bf00      	nop
 80026f8:	20000374 	.word	0x20000374
 80026fc:	2000037c 	.word	0x2000037c
 8002700:	20000380 	.word	0x20000380
 8002704:	20000368 	.word	0x20000368
 8002708:	200002f0 	.word	0x200002f0
 800270c:	200002f4 	.word	0x200002f4

08002710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b094      	sub	sp, #80	; 0x50
 8002714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002716:	f107 0320 	add.w	r3, r7, #32
 800271a:	2230      	movs	r2, #48	; 0x30
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f006 fe2a 	bl	8009378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <SystemClock_Config+0xc8>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <SystemClock_Config+0xc8>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002742:	6413      	str	r3, [r2, #64]	; 0x40
 8002744:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <SystemClock_Config+0xc8>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002750:	2300      	movs	r3, #0
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <SystemClock_Config+0xcc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <SystemClock_Config+0xcc>)
 800275a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <SystemClock_Config+0xcc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800276c:	2302      	movs	r3, #2
 800276e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002770:	2301      	movs	r3, #1
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002774:	2310      	movs	r3, #16
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002778:	2302      	movs	r3, #2
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800277c:	2300      	movs	r3, #0
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002780:	2308      	movs	r3, #8
 8002782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002784:	2364      	movs	r3, #100	; 0x64
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002788:	2302      	movs	r3, #2
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800278c:	2304      	movs	r3, #4
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002790:	f107 0320 	add.w	r3, r7, #32
 8002794:	4618      	mov	r0, r3
 8002796:	f003 ffff 	bl	8006798 <HAL_RCC_OscConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027a0:	f000 ff80 	bl	80036a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a4:	230f      	movs	r3, #15
 80027a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a8:	2302      	movs	r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	2103      	movs	r1, #3
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fa57 	bl	8006c74 <HAL_RCC_ClockConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027cc:	f000 ff6a 	bl	80036a4 <Error_Handler>
  }
}
 80027d0:	bf00      	nop
 80027d2:	3750      	adds	r7, #80	; 0x50
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000

080027e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_I2C1_Init+0x50>)
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <MX_I2C1_Init+0x54>)
 80027e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <MX_I2C1_Init+0x50>)
 80027ec:	4a12      	ldr	r2, [pc, #72]	; (8002838 <MX_I2C1_Init+0x58>)
 80027ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <MX_I2C1_Init+0x50>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_I2C1_Init+0x50>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_I2C1_Init+0x50>)
 80027fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <MX_I2C1_Init+0x50>)
 8002806:	2200      	movs	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_I2C1_Init+0x50>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <MX_I2C1_Init+0x50>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_I2C1_Init+0x50>)
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <MX_I2C1_Init+0x50>)
 800281e:	f002 f91b 	bl	8004a58 <HAL_I2C_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002828:	f000 ff3c 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200000bc 	.word	0x200000bc
 8002834:	40005400 	.word	0x40005400
 8002838:	000186a0 	.word	0x000186a0

0800283c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	; 0x30
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f006 fd94 	bl	8009378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <MX_TIM1_Init+0xa8>)
 800285a:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <MX_TIM1_Init+0xac>)
 800285c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <MX_TIM1_Init+0xa8>)
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <MX_TIM1_Init+0xa8>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <MX_TIM1_Init+0xa8>)
 800286c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002870:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <MX_TIM1_Init+0xa8>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <MX_TIM1_Init+0xa8>)
 800287a:	2200      	movs	r2, #0
 800287c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <MX_TIM1_Init+0xa8>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002884:	2301      	movs	r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800289c:	2301      	movs	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	4619      	mov	r1, r3
 80028ae:	480d      	ldr	r0, [pc, #52]	; (80028e4 <MX_TIM1_Init+0xa8>)
 80028b0:	f004 fcb6 	bl	8007220 <HAL_TIM_Encoder_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80028ba:	f000 fef3 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	4806      	ldr	r0, [pc, #24]	; (80028e4 <MX_TIM1_Init+0xa8>)
 80028cc:	f005 faf8 	bl	8007ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80028d6:	f000 fee5 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028da:	bf00      	nop
 80028dc:	3730      	adds	r7, #48	; 0x30
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000110 	.word	0x20000110
 80028e8:	40010000 	.word	0x40010000

080028ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08e      	sub	sp, #56	; 0x38
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002900:	f107 0320 	add.w	r3, r7, #32
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
 8002918:	615a      	str	r2, [r3, #20]
 800291a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800291c:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <MX_TIM2_Init+0xfc>)
 800291e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002924:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <MX_TIM2_Init+0xfc>)
 8002926:	2200      	movs	r2, #0
 8002928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292a:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <MX_TIM2_Init+0xfc>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <MX_TIM2_Init+0xfc>)
 8002932:	f242 7210 	movw	r2, #10000	; 0x2710
 8002936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <MX_TIM2_Init+0xfc>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <MX_TIM2_Init+0xfc>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002944:	4828      	ldr	r0, [pc, #160]	; (80029e8 <MX_TIM2_Init+0xfc>)
 8002946:	f004 fbb5 	bl	80070b4 <HAL_TIM_Base_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002950:	f000 fea8 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800295a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800295e:	4619      	mov	r1, r3
 8002960:	4821      	ldr	r0, [pc, #132]	; (80029e8 <MX_TIM2_Init+0xfc>)
 8002962:	f004 fef5 	bl	8007750 <HAL_TIM_ConfigClockSource>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800296c:	f000 fe9a 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002970:	481d      	ldr	r0, [pc, #116]	; (80029e8 <MX_TIM2_Init+0xfc>)
 8002972:	f004 fbee 	bl	8007152 <HAL_TIM_PWM_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800297c:	f000 fe92 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002988:	f107 0320 	add.w	r3, r7, #32
 800298c:	4619      	mov	r1, r3
 800298e:	4816      	ldr	r0, [pc, #88]	; (80029e8 <MX_TIM2_Init+0xfc>)
 8002990:	f005 fa96 	bl	8007ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800299a:	f000 fe83 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800299e:	2360      	movs	r3, #96	; 0x60
 80029a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	2200      	movs	r2, #0
 80029b2:	4619      	mov	r1, r3
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <MX_TIM2_Init+0xfc>)
 80029b6:	f004 fe05 	bl	80075c4 <HAL_TIM_PWM_ConfigChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80029c0:	f000 fe70 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2204      	movs	r2, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4807      	ldr	r0, [pc, #28]	; (80029e8 <MX_TIM2_Init+0xfc>)
 80029cc:	f004 fdfa 	bl	80075c4 <HAL_TIM_PWM_ConfigChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80029d6:	f000 fe65 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029da:	4803      	ldr	r0, [pc, #12]	; (80029e8 <MX_TIM2_Init+0xfc>)
 80029dc:	f000 ff82 	bl	80038e4 <HAL_TIM_MspPostInit>

}
 80029e0:	bf00      	nop
 80029e2:	3738      	adds	r7, #56	; 0x38
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000150 	.word	0x20000150

080029ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08e      	sub	sp, #56	; 0x38
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a00:	f107 0320 	add.w	r3, r7, #32
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
 8002a18:	615a      	str	r2, [r3, #20]
 8002a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ad4 <MX_TIM4_Init+0xe8>)
 8002a20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a42:	4823      	ldr	r0, [pc, #140]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a44:	f004 fb36 	bl	80070b4 <HAL_TIM_Base_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002a4e:	f000 fe29 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	481c      	ldr	r0, [pc, #112]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a60:	f004 fe76 	bl	8007750 <HAL_TIM_ConfigClockSource>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002a6a:	f000 fe1b 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a6e:	4818      	ldr	r0, [pc, #96]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a70:	f004 fb6f 	bl	8007152 <HAL_TIM_PWM_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002a7a:	f000 fe13 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a86:	f107 0320 	add.w	r3, r7, #32
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4810      	ldr	r0, [pc, #64]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002a8e:	f005 fa17 	bl	8007ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002a98:	f000 fe04 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a9c:	2360      	movs	r3, #96	; 0x60
 8002a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2204      	movs	r2, #4
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002ab4:	f004 fd86 	bl	80075c4 <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002abe:	f000 fdf1 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <MX_TIM4_Init+0xe4>)
 8002ac4:	f000 ff0e 	bl	80038e4 <HAL_TIM_MspPostInit>

}
 8002ac8:	bf00      	nop
 8002aca:	3738      	adds	r7, #56	; 0x38
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000190 	.word	0x20000190
 8002ad4:	40000800 	.word	0x40000800

08002ad8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aec:	463b      	mov	r3, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <MX_TIM5_Init+0x98>)
 8002af8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002afc:	2263      	movs	r2, #99	; 0x63
 8002afe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b06:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b1a:	4814      	ldr	r0, [pc, #80]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002b1c:	f004 faca 	bl	80070b4 <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002b26:	f000 fdbd 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b30:	f107 0308 	add.w	r3, r7, #8
 8002b34:	4619      	mov	r1, r3
 8002b36:	480d      	ldr	r0, [pc, #52]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002b38:	f004 fe0a 	bl	8007750 <HAL_TIM_ConfigClockSource>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002b42:	f000 fdaf 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b4e:	463b      	mov	r3, r7
 8002b50:	4619      	mov	r1, r3
 8002b52:	4806      	ldr	r0, [pc, #24]	; (8002b6c <MX_TIM5_Init+0x94>)
 8002b54:	f005 f9b4 	bl	8007ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002b5e:	f000 fda1 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200001d0 	.word	0x200001d0
 8002b70:	40000c00 	.word	0x40000c00

08002b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002b7a:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <MX_USART2_UART_Init+0x54>)
 8002b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002b80:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b8c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_USART2_UART_Init+0x50>)
 8002bb0:	f005 fa08 	bl	8007fc4 <HAL_UART_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002bba:	f000 fd73 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000210 	.word	0x20000210
 8002bc8:	40004400 	.word	0x40004400

08002bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_DMA_Init+0x3c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <MX_DMA_Init+0x3c>)
 8002bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_DMA_Init+0x3c>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2010      	movs	r0, #16
 8002bf4:	f001 f98b 	bl	8003f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002bf8:	2010      	movs	r0, #16
 8002bfa:	f001 f9a4 	bl	8003f46 <HAL_NVIC_EnableIRQ>

}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800

08002c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a3c      	ldr	r2, [pc, #240]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a35      	ldr	r2, [pc, #212]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a2e      	ldr	r2, [pc, #184]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <MX_GPIO_Init+0x110>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	4822      	ldr	r0, [pc, #136]	; (8002d20 <MX_GPIO_Init+0x114>)
 8002c98:	f001 feac 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <MX_GPIO_Init+0x118>)
 8002ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481d      	ldr	r0, [pc, #116]	; (8002d28 <MX_GPIO_Init+0x11c>)
 8002cb2:	f001 fd03 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <MX_GPIO_Init+0x120>)
 8002cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4819      	ldr	r0, [pc, #100]	; (8002d30 <MX_GPIO_Init+0x124>)
 8002cca:	f001 fcf7 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10;
 8002cce:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8002cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4813      	ldr	r0, [pc, #76]	; (8002d30 <MX_GPIO_Init+0x124>)
 8002ce4:	f001 fcea 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ce8:	2340      	movs	r3, #64	; 0x40
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4808      	ldr	r0, [pc, #32]	; (8002d20 <MX_GPIO_Init+0x114>)
 8002d00:	f001 fcdc 	bl	80046bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	2006      	movs	r0, #6
 8002d0a:	f001 f900 	bl	8003f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d0e:	2006      	movs	r0, #6
 8002d10:	f001 f919 	bl	8003f46 <HAL_NVIC_EnableIRQ>

}
 8002d14:	bf00      	nop
 8002d16:	3728      	adds	r7, #40	; 0x28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020400 	.word	0x40020400
 8002d24:	10210000 	.word	0x10210000
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	10110000 	.word	0x10110000
 8002d30:	40020000 	.word	0x40020000
 8002d34:	00000000 	.word	0x00000000

08002d38 <uartprotocol>:
enum
{
	init=0,startmode=1,collectdataframe2_1=2,collectdataframe2_2=3,loopframe3=4,collectdataframe3=5,checksum=6,checkconnect=7
};

void uartprotocol(){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	; 0x38
 8002d3c:	af00      	add	r7, sp, #0

	Posdata=huart2.RxXferSize-huart2.hdmarx->Instance->NDTR;
 8002d3e:	4b98      	ldr	r3, [pc, #608]	; (8002fa0 <uartprotocol+0x268>)
 8002d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b96      	ldr	r3, [pc, #600]	; (8002fa0 <uartprotocol+0x268>)
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b94      	ldr	r3, [pc, #592]	; (8002fa4 <uartprotocol+0x26c>)
 8002d54:	701a      	strb	r2, [r3, #0]
	if(Posdata!=PosdataPre )
 8002d56:	4b93      	ldr	r3, [pc, #588]	; (8002fa4 <uartprotocol+0x26c>)
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	4b93      	ldr	r3, [pc, #588]	; (8002fa8 <uartprotocol+0x270>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f000 83a4 	beq.w	80034ac <uartprotocol+0x774>
	{
		switch(stateuart)
 8002d64:	4b91      	ldr	r3, [pc, #580]	; (8002fac <uartprotocol+0x274>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	f200 8392 	bhi.w	8003492 <uartprotocol+0x75a>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <uartprotocol+0x3c>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d95 	.word	0x08002d95
 8002d78:	08002db9 	.word	0x08002db9
 8002d7c:	08002f6b 	.word	0x08002f6b
 8002d80:	08002fc5 	.word	0x08002fc5
 8002d84:	08002ff9 	.word	0x08002ff9
 8002d88:	08003025 	.word	0x08003025
 8002d8c:	08003099 	.word	0x08003099
 8002d90:	0800346d 	.word	0x0800346d
		{
			case 0:			//init >> check if it connect to MCU
				if (RxBuffer[PosdataPre] == 0b10010010)
 8002d94:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <uartprotocol+0x270>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b85      	ldr	r3, [pc, #532]	; (8002fb0 <uartprotocol+0x278>)
 8002d9c:	5c9b      	ldrb	r3, [r3, r2]
 8002d9e:	2b92      	cmp	r3, #146	; 0x92
 8002da0:	f040 8372 	bne.w	8003488 <uartprotocol+0x750>
				{
					mode = 2;		//connect mcu
 8002da4:	4b83      	ldr	r3, [pc, #524]	; (8002fb4 <uartprotocol+0x27c>)
 8002da6:	2202      	movs	r2, #2
 8002da8:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002daa:	4b83      	ldr	r3, [pc, #524]	; (8002fb8 <uartprotocol+0x280>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
					stateuart = checkconnect;
 8002db0:	4b7e      	ldr	r3, [pc, #504]	; (8002fac <uartprotocol+0x274>)
 8002db2:	2207      	movs	r2, #7
 8002db4:	701a      	strb	r2, [r3, #0]
				}
			break;
 8002db6:	e367      	b.n	8003488 <uartprotocol+0x750>

			case 1:			//startmode >> check Start+Mode
				if (RxBuffer[PosdataPre] == 0b10010011)
 8002db8:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <uartprotocol+0x270>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <uartprotocol+0x278>)
 8002dc0:	5c9b      	ldrb	r3, [r3, r2]
 8002dc2:	2b93      	cmp	r3, #147	; 0x93
 8002dc4:	d109      	bne.n	8002dda <uartprotocol+0xa2>
				{
					mode = 3;		//disconnect mcu
 8002dc6:	4b7b      	ldr	r3, [pc, #492]	; (8002fb4 <uartprotocol+0x27c>)
 8002dc8:	2203      	movs	r2, #3
 8002dca:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002dcc:	4b7a      	ldr	r3, [pc, #488]	; (8002fb8 <uartprotocol+0x280>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
					stateuart = checksum;
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <uartprotocol+0x274>)
 8002dd4:	2206      	movs	r2, #6
 8002dd6:	701a      	strb	r2, [r3, #0]
					frame = 1;
					stateuart = checksum;
				}


			break;
 8002dd8:	e358      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10010100)
 8002dda:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <uartprotocol+0x270>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b73      	ldr	r3, [pc, #460]	; (8002fb0 <uartprotocol+0x278>)
 8002de2:	5c9b      	ldrb	r3, [r3, r2]
 8002de4:	2b94      	cmp	r3, #148	; 0x94
 8002de6:	d10c      	bne.n	8002e02 <uartprotocol+0xca>
					mode = 4;		//set angular velocity
 8002de8:	4b72      	ldr	r3, [pc, #456]	; (8002fb4 <uartprotocol+0x27c>)
 8002dea:	2204      	movs	r2, #4
 8002dec:	701a      	strb	r2, [r3, #0]
					frame = 2;
 8002dee:	4b72      	ldr	r3, [pc, #456]	; (8002fb8 <uartprotocol+0x280>)
 8002df0:	2202      	movs	r2, #2
 8002df2:	701a      	strb	r2, [r3, #0]
					data = 0x94;
 8002df4:	4b71      	ldr	r3, [pc, #452]	; (8002fbc <uartprotocol+0x284>)
 8002df6:	2294      	movs	r2, #148	; 0x94
 8002df8:	701a      	strb	r2, [r3, #0]
					stateuart = collectdataframe2_1;
 8002dfa:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <uartprotocol+0x274>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	701a      	strb	r2, [r3, #0]
			break;
 8002e00:	e344      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10010101)
 8002e02:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <uartprotocol+0x270>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <uartprotocol+0x278>)
 8002e0a:	5c9b      	ldrb	r3, [r3, r2]
 8002e0c:	2b95      	cmp	r3, #149	; 0x95
 8002e0e:	d10c      	bne.n	8002e2a <uartprotocol+0xf2>
					mode = 5;		//set angular position
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <uartprotocol+0x27c>)
 8002e12:	2205      	movs	r2, #5
 8002e14:	701a      	strb	r2, [r3, #0]
					frame = 2;
 8002e16:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <uartprotocol+0x280>)
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
					data = 0x95;
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <uartprotocol+0x284>)
 8002e1e:	2295      	movs	r2, #149	; 0x95
 8002e20:	701a      	strb	r2, [r3, #0]
					stateuart = collectdataframe2_1;
 8002e22:	4b62      	ldr	r3, [pc, #392]	; (8002fac <uartprotocol+0x274>)
 8002e24:	2202      	movs	r2, #2
 8002e26:	701a      	strb	r2, [r3, #0]
			break;
 8002e28:	e330      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10010110)
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <uartprotocol+0x270>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b5f      	ldr	r3, [pc, #380]	; (8002fb0 <uartprotocol+0x278>)
 8002e32:	5c9b      	ldrb	r3, [r3, r2]
 8002e34:	2b96      	cmp	r3, #150	; 0x96
 8002e36:	d10c      	bne.n	8002e52 <uartprotocol+0x11a>
					mode = 6;		//set goal 1 station
 8002e38:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <uartprotocol+0x27c>)
 8002e3a:	2206      	movs	r2, #6
 8002e3c:	701a      	strb	r2, [r3, #0]
					frame = 2;
 8002e3e:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <uartprotocol+0x280>)
 8002e40:	2202      	movs	r2, #2
 8002e42:	701a      	strb	r2, [r3, #0]
					data = 0x96;
 8002e44:	4b5d      	ldr	r3, [pc, #372]	; (8002fbc <uartprotocol+0x284>)
 8002e46:	2296      	movs	r2, #150	; 0x96
 8002e48:	701a      	strb	r2, [r3, #0]
					stateuart = collectdataframe2_1;
 8002e4a:	4b58      	ldr	r3, [pc, #352]	; (8002fac <uartprotocol+0x274>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]
			break;
 8002e50:	e31c      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10010111)
 8002e52:	4b55      	ldr	r3, [pc, #340]	; (8002fa8 <uartprotocol+0x270>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b55      	ldr	r3, [pc, #340]	; (8002fb0 <uartprotocol+0x278>)
 8002e5a:	5c9b      	ldrb	r3, [r3, r2]
 8002e5c:	2b97      	cmp	r3, #151	; 0x97
 8002e5e:	d10c      	bne.n	8002e7a <uartprotocol+0x142>
					mode = 7;		//set goal n station
 8002e60:	4b54      	ldr	r3, [pc, #336]	; (8002fb4 <uartprotocol+0x27c>)
 8002e62:	2207      	movs	r2, #7
 8002e64:	701a      	strb	r2, [r3, #0]
					frame = 3;
 8002e66:	4b54      	ldr	r3, [pc, #336]	; (8002fb8 <uartprotocol+0x280>)
 8002e68:	2203      	movs	r2, #3
 8002e6a:	701a      	strb	r2, [r3, #0]
					data = 0x97;
 8002e6c:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <uartprotocol+0x284>)
 8002e6e:	2297      	movs	r2, #151	; 0x97
 8002e70:	701a      	strb	r2, [r3, #0]
					stateuart = loopframe3;
 8002e72:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <uartprotocol+0x274>)
 8002e74:	2204      	movs	r2, #4
 8002e76:	701a      	strb	r2, [r3, #0]
			break;
 8002e78:	e308      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10011000)
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <uartprotocol+0x270>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <uartprotocol+0x278>)
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	2b98      	cmp	r3, #152	; 0x98
 8002e86:	d109      	bne.n	8002e9c <uartprotocol+0x164>
					mode = 8;		//go goal
 8002e88:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <uartprotocol+0x27c>)
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <uartprotocol+0x280>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
					stateuart = checksum;
 8002e94:	4b45      	ldr	r3, [pc, #276]	; (8002fac <uartprotocol+0x274>)
 8002e96:	2206      	movs	r2, #6
 8002e98:	701a      	strb	r2, [r3, #0]
			break;
 8002e9a:	e2f7      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10011001)
 8002e9c:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <uartprotocol+0x270>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <uartprotocol+0x278>)
 8002ea4:	5c9b      	ldrb	r3, [r3, r2]
 8002ea6:	2b99      	cmp	r3, #153	; 0x99
 8002ea8:	d109      	bne.n	8002ebe <uartprotocol+0x186>
					mode = 9;		//request current station
 8002eaa:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <uartprotocol+0x27c>)
 8002eac:	2209      	movs	r2, #9
 8002eae:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002eb0:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <uartprotocol+0x280>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
					stateuart = checksum;
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <uartprotocol+0x274>)
 8002eb8:	2206      	movs	r2, #6
 8002eba:	701a      	strb	r2, [r3, #0]
			break;
 8002ebc:	e2e6      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10011010)
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <uartprotocol+0x270>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <uartprotocol+0x278>)
 8002ec6:	5c9b      	ldrb	r3, [r3, r2]
 8002ec8:	2b9a      	cmp	r3, #154	; 0x9a
 8002eca:	d109      	bne.n	8002ee0 <uartprotocol+0x1a8>
					mode = 10;		//request angular position
 8002ecc:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <uartprotocol+0x27c>)
 8002ece:	220a      	movs	r2, #10
 8002ed0:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002ed2:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <uartprotocol+0x280>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
					stateuart = checksum;
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <uartprotocol+0x274>)
 8002eda:	2206      	movs	r2, #6
 8002edc:	701a      	strb	r2, [r3, #0]
			break;
 8002ede:	e2d5      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10011011)
 8002ee0:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <uartprotocol+0x270>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <uartprotocol+0x278>)
 8002ee8:	5c9b      	ldrb	r3, [r3, r2]
 8002eea:	2b9b      	cmp	r3, #155	; 0x9b
 8002eec:	d109      	bne.n	8002f02 <uartprotocol+0x1ca>
					mode = 11;		//request angular velocity
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <uartprotocol+0x27c>)
 8002ef0:	220b      	movs	r2, #11
 8002ef2:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <uartprotocol+0x280>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
					stateuart = checksum;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <uartprotocol+0x274>)
 8002efc:	2206      	movs	r2, #6
 8002efe:	701a      	strb	r2, [r3, #0]
			break;
 8002f00:	e2c4      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10011100)
 8002f02:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <uartprotocol+0x270>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <uartprotocol+0x278>)
 8002f0a:	5c9b      	ldrb	r3, [r3, r2]
 8002f0c:	2b9c      	cmp	r3, #156	; 0x9c
 8002f0e:	d109      	bne.n	8002f24 <uartprotocol+0x1ec>
					mode = 12;		//enable gripper
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <uartprotocol+0x27c>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002f16:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <uartprotocol+0x280>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
					stateuart = checksum;
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <uartprotocol+0x274>)
 8002f1e:	2206      	movs	r2, #6
 8002f20:	701a      	strb	r2, [r3, #0]
			break;
 8002f22:	e2b3      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10011101)
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <uartprotocol+0x270>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <uartprotocol+0x278>)
 8002f2c:	5c9b      	ldrb	r3, [r3, r2]
 8002f2e:	2b9d      	cmp	r3, #157	; 0x9d
 8002f30:	d109      	bne.n	8002f46 <uartprotocol+0x20e>
					mode = 13;		//disable gripper
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <uartprotocol+0x27c>)
 8002f34:	220d      	movs	r2, #13
 8002f36:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <uartprotocol+0x280>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
					stateuart = checksum;
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <uartprotocol+0x274>)
 8002f40:	2206      	movs	r2, #6
 8002f42:	701a      	strb	r2, [r3, #0]
			break;
 8002f44:	e2a2      	b.n	800348c <uartprotocol+0x754>
				else if (RxBuffer[PosdataPre] == 0b10011110)
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <uartprotocol+0x270>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <uartprotocol+0x278>)
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	2b9e      	cmp	r3, #158	; 0x9e
 8002f52:	f040 829b 	bne.w	800348c <uartprotocol+0x754>
					mode = 14;		//set home
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <uartprotocol+0x27c>)
 8002f58:	220e      	movs	r2, #14
 8002f5a:	701a      	strb	r2, [r3, #0]
					frame = 1;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <uartprotocol+0x280>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
					stateuart = checksum;
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <uartprotocol+0x274>)
 8002f64:	2206      	movs	r2, #6
 8002f66:	701a      	strb	r2, [r3, #0]
			break;
 8002f68:	e290      	b.n	800348c <uartprotocol+0x754>

			case 2:			//collect data frame 2_1
				if (frame == 2)
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <uartprotocol+0x280>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d111      	bne.n	8002f96 <uartprotocol+0x25e>
				{
					dataframe21 = RxBuffer[PosdataPre];
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <uartprotocol+0x270>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <uartprotocol+0x278>)
 8002f7a:	5c9a      	ldrb	r2, [r3, r2]
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <uartprotocol+0x288>)
 8002f7e:	701a      	strb	r2, [r3, #0]
					data += RxBuffer[PosdataPre];
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <uartprotocol+0x270>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <uartprotocol+0x278>)
 8002f88:	5c9a      	ldrb	r2, [r3, r2]
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <uartprotocol+0x284>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <uartprotocol+0x284>)
 8002f94:	701a      	strb	r2, [r3, #0]
				}
				stateuart = collectdataframe2_2;
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <uartprotocol+0x274>)
 8002f98:	2203      	movs	r2, #3
 8002f9a:	701a      	strb	r2, [r3, #0]

			break;
 8002f9c:	e279      	b.n	8003492 <uartprotocol+0x75a>
 8002f9e:	bf00      	nop
 8002fa0:	20000210 	.word	0x20000210
 8002fa4:	200002f8 	.word	0x200002f8
 8002fa8:	200002f9 	.word	0x200002f9
 8002fac:	200002fa 	.word	0x200002fa
 8002fb0:	200002b0 	.word	0x200002b0
 8002fb4:	200002fb 	.word	0x200002fb
 8002fb8:	200002fc 	.word	0x200002fc
 8002fbc:	200002fd 	.word	0x200002fd
 8002fc0:	200002fe 	.word	0x200002fe

			case 3:			//collect data frame 2_2
				if (frame == 2)
 8002fc4:	4b94      	ldr	r3, [pc, #592]	; (8003218 <uartprotocol+0x4e0>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d111      	bne.n	8002ff0 <uartprotocol+0x2b8>
				{
					dataframe22 = RxBuffer[PosdataPre];
 8002fcc:	4b93      	ldr	r3, [pc, #588]	; (800321c <uartprotocol+0x4e4>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b93      	ldr	r3, [pc, #588]	; (8003220 <uartprotocol+0x4e8>)
 8002fd4:	5c9a      	ldrb	r2, [r3, r2]
 8002fd6:	4b93      	ldr	r3, [pc, #588]	; (8003224 <uartprotocol+0x4ec>)
 8002fd8:	701a      	strb	r2, [r3, #0]
					data += RxBuffer[PosdataPre];
 8002fda:	4b90      	ldr	r3, [pc, #576]	; (800321c <uartprotocol+0x4e4>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b8f      	ldr	r3, [pc, #572]	; (8003220 <uartprotocol+0x4e8>)
 8002fe2:	5c9a      	ldrb	r2, [r3, r2]
 8002fe4:	4b90      	ldr	r3, [pc, #576]	; (8003228 <uartprotocol+0x4f0>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	4b8e      	ldr	r3, [pc, #568]	; (8003228 <uartprotocol+0x4f0>)
 8002fee:	701a      	strb	r2, [r3, #0]
				}
				stateuart = checksum;
 8002ff0:	4b8e      	ldr	r3, [pc, #568]	; (800322c <uartprotocol+0x4f4>)
 8002ff2:	2206      	movs	r2, #6
 8002ff4:	701a      	strb	r2, [r3, #0]

			break;
 8002ff6:	e24c      	b.n	8003492 <uartprotocol+0x75a>

			case 4:			//loop frame 3
				{
				loopcollect = RxBuffer[PosdataPre];
 8002ff8:	4b88      	ldr	r3, [pc, #544]	; (800321c <uartprotocol+0x4e4>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b88      	ldr	r3, [pc, #544]	; (8003220 <uartprotocol+0x4e8>)
 8003000:	5c9a      	ldrb	r2, [r3, r2]
 8003002:	4b8b      	ldr	r3, [pc, #556]	; (8003230 <uartprotocol+0x4f8>)
 8003004:	701a      	strb	r2, [r3, #0]
				data += RxBuffer[PosdataPre];
 8003006:	4b85      	ldr	r3, [pc, #532]	; (800321c <uartprotocol+0x4e4>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b84      	ldr	r3, [pc, #528]	; (8003220 <uartprotocol+0x4e8>)
 800300e:	5c9a      	ldrb	r2, [r3, r2]
 8003010:	4b85      	ldr	r3, [pc, #532]	; (8003228 <uartprotocol+0x4f0>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	4413      	add	r3, r2
 8003016:	b2da      	uxtb	r2, r3
 8003018:	4b83      	ldr	r3, [pc, #524]	; (8003228 <uartprotocol+0x4f0>)
 800301a:	701a      	strb	r2, [r3, #0]
				stateuart = collectdataframe3;
 800301c:	4b83      	ldr	r3, [pc, #524]	; (800322c <uartprotocol+0x4f4>)
 800301e:	2205      	movs	r2, #5
 8003020:	701a      	strb	r2, [r3, #0]
				}
			break;
 8003022:	e236      	b.n	8003492 <uartprotocol+0x75a>

			case 5:			//collect data frame 3
				if (countloop < loopcollect)
 8003024:	4b83      	ldr	r3, [pc, #524]	; (8003234 <uartprotocol+0x4fc>)
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	4b81      	ldr	r3, [pc, #516]	; (8003230 <uartprotocol+0x4f8>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d22f      	bcs.n	8003090 <uartprotocol+0x358>
				{
					data += RxBuffer[PosdataPre];
 8003030:	4b7a      	ldr	r3, [pc, #488]	; (800321c <uartprotocol+0x4e4>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <uartprotocol+0x4e8>)
 8003038:	5c9a      	ldrb	r2, [r3, r2]
 800303a:	4b7b      	ldr	r3, [pc, #492]	; (8003228 <uartprotocol+0x4f0>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	4413      	add	r3, r2
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b79      	ldr	r3, [pc, #484]	; (8003228 <uartprotocol+0x4f0>)
 8003044:	701a      	strb	r2, [r3, #0]
					nstation[countloop] = (RxBuffer[PosdataPre] & 0b1111);
 8003046:	4b75      	ldr	r3, [pc, #468]	; (800321c <uartprotocol+0x4e4>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4b74      	ldr	r3, [pc, #464]	; (8003220 <uartprotocol+0x4e8>)
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	4a78      	ldr	r2, [pc, #480]	; (8003234 <uartprotocol+0x4fc>)
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	b2d9      	uxtb	r1, r3
 800305a:	4b77      	ldr	r3, [pc, #476]	; (8003238 <uartprotocol+0x500>)
 800305c:	5499      	strb	r1, [r3, r2]
					nstation[countloop+1] = ((RxBuffer[PosdataPre] & 0b11110000) >>4 );
 800305e:	4b6f      	ldr	r3, [pc, #444]	; (800321c <uartprotocol+0x4e4>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4b6e      	ldr	r3, [pc, #440]	; (8003220 <uartprotocol+0x4e8>)
 8003066:	5c9a      	ldrb	r2, [r3, r2]
 8003068:	4b72      	ldr	r3, [pc, #456]	; (8003234 <uartprotocol+0x4fc>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	0912      	lsrs	r2, r2, #4
 8003070:	b2d1      	uxtb	r1, r2
 8003072:	4a71      	ldr	r2, [pc, #452]	; (8003238 <uartprotocol+0x500>)
 8003074:	54d1      	strb	r1, [r2, r3]
					countloop += 2;
 8003076:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <uartprotocol+0x4fc>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	3302      	adds	r3, #2
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <uartprotocol+0x4fc>)
 8003080:	701a      	strb	r2, [r3, #0]
					stateuart = collectdataframe3;
 8003082:	4b6a      	ldr	r3, [pc, #424]	; (800322c <uartprotocol+0x4f4>)
 8003084:	2205      	movs	r2, #5
 8003086:	701a      	strb	r2, [r3, #0]
					sunflower = 2;
 8003088:	4b6c      	ldr	r3, [pc, #432]	; (800323c <uartprotocol+0x504>)
 800308a:	2202      	movs	r2, #2
 800308c:	601a      	str	r2, [r3, #0]
				else
				{
					stateuart = checksum;
				}

			break;
 800308e:	e200      	b.n	8003492 <uartprotocol+0x75a>
					stateuart = checksum;
 8003090:	4b66      	ldr	r3, [pc, #408]	; (800322c <uartprotocol+0x4f4>)
 8003092:	2206      	movs	r2, #6
 8003094:	701a      	strb	r2, [r3, #0]
			break;
 8003096:	e1fc      	b.n	8003492 <uartprotocol+0x75a>

			case 6:			//checksum
				data= ~(data);
 8003098:	4b63      	ldr	r3, [pc, #396]	; (8003228 <uartprotocol+0x4f0>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	43db      	mvns	r3, r3
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	4b61      	ldr	r3, [pc, #388]	; (8003228 <uartprotocol+0x4f0>)
 80030a2:	701a      	strb	r2, [r3, #0]
				sunflower = 10;
 80030a4:	4b65      	ldr	r3, [pc, #404]	; (800323c <uartprotocol+0x504>)
 80030a6:	220a      	movs	r2, #10
 80030a8:	601a      	str	r2, [r3, #0]
				if (mode == 3 && RxBuffer[PosdataPre] == 0b01101100)	//disconnect
 80030aa:	4b65      	ldr	r3, [pc, #404]	; (8003240 <uartprotocol+0x508>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d10d      	bne.n	80030ce <uartprotocol+0x396>
 80030b2:	4b5a      	ldr	r3, [pc, #360]	; (800321c <uartprotocol+0x4e4>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <uartprotocol+0x4e8>)
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	2b6c      	cmp	r3, #108	; 0x6c
 80030be:	d106      	bne.n	80030ce <uartprotocol+0x396>
				{
					sendAck(1);
 80030c0:	2001      	movs	r0, #1
 80030c2:	f000 fa17 	bl	80034f4 <sendAck>
					stateuart = startmode;
 80030c6:	4b59      	ldr	r3, [pc, #356]	; (800322c <uartprotocol+0x4f4>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e1cd      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 4 && RxBuffer[PosdataPre] == data )	//set angular velocity
 80030ce:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <uartprotocol+0x508>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d124      	bne.n	8003120 <uartprotocol+0x3e8>
 80030d6:	4b51      	ldr	r3, [pc, #324]	; (800321c <uartprotocol+0x4e4>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b50      	ldr	r3, [pc, #320]	; (8003220 <uartprotocol+0x4e8>)
 80030de:	5c9a      	ldrb	r2, [r3, r2]
 80030e0:	4b51      	ldr	r3, [pc, #324]	; (8003228 <uartprotocol+0x4f0>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d11b      	bne.n	8003120 <uartprotocol+0x3e8>
				{
					winput = dataframe22*10/255;			//rpm
 80030e8:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <uartprotocol+0x4ec>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4a53      	ldr	r2, [pc, #332]	; (8003244 <uartprotocol+0x50c>)
 80030f8:	fb82 1203 	smull	r1, r2, r2, r3
 80030fc:	441a      	add	r2, r3
 80030fe:	11d2      	asrs	r2, r2, #7
 8003100:	17db      	asrs	r3, r3, #31
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310c:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <uartprotocol+0x510>)
 800310e:	edc3 7a00 	vstr	s15, [r3]
					sendAck(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f000 f9ee 	bl	80034f4 <sendAck>
					stateuart = startmode;
 8003118:	4b44      	ldr	r3, [pc, #272]	; (800322c <uartprotocol+0x4f4>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e1a4      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 5 && RxBuffer[PosdataPre] ==  data )	//set angular position
 8003120:	4b47      	ldr	r3, [pc, #284]	; (8003240 <uartprotocol+0x508>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d129      	bne.n	800317c <uartprotocol+0x444>
 8003128:	4b3c      	ldr	r3, [pc, #240]	; (800321c <uartprotocol+0x4e4>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b3c      	ldr	r3, [pc, #240]	; (8003220 <uartprotocol+0x4e8>)
 8003130:	5c9a      	ldrb	r2, [r3, r2]
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <uartprotocol+0x4f0>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d120      	bne.n	800317c <uartprotocol+0x444>
				{
					thetainput = ((dataframe21*256) + dataframe22)*180/(10000*3.14159265);  	//degree
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <uartprotocol+0x514>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	4a38      	ldr	r2, [pc, #224]	; (8003224 <uartprotocol+0x4ec>)
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	4413      	add	r3, r2
 8003146:	22b4      	movs	r2, #180	; 0xb4
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f995 	bl	800047c <__aeabi_i2d>
 8003152:	a32f      	add	r3, pc, #188	; (adr r3, 8003210 <uartprotocol+0x4d8>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f7fd fb24 	bl	80007a4 <__aeabi_ddiv>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f7fd fca4 	bl	8000ab0 <__aeabi_d2f>
 8003168:	4603      	mov	r3, r0
 800316a:	4a39      	ldr	r2, [pc, #228]	; (8003250 <uartprotocol+0x518>)
 800316c:	6013      	str	r3, [r2, #0]
					sendAck(1);
 800316e:	2001      	movs	r0, #1
 8003170:	f000 f9c0 	bl	80034f4 <sendAck>
					stateuart = startmode;
 8003174:	4b2d      	ldr	r3, [pc, #180]	; (800322c <uartprotocol+0x4f4>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e176      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 6 && RxBuffer[PosdataPre] == data )	//set goal 1 station
 800317c:	4b30      	ldr	r3, [pc, #192]	; (8003240 <uartprotocol+0x508>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b06      	cmp	r3, #6
 8003182:	d119      	bne.n	80031b8 <uartprotocol+0x480>
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <uartprotocol+0x4e4>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <uartprotocol+0x4e8>)
 800318c:	5c9a      	ldrb	r2, [r3, r2]
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <uartprotocol+0x4f0>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d110      	bne.n	80031b8 <uartprotocol+0x480>
				{
					goal[0] = dataframe22;
 8003196:	4b23      	ldr	r3, [pc, #140]	; (8003224 <uartprotocol+0x4ec>)
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <uartprotocol+0x51c>)
 800319c:	701a      	strb	r2, [r3, #0]
					numberofstation=1;
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <uartprotocol+0x520>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
					nextstation=0;
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <uartprotocol+0x524>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
					sendAck(1);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f000 f9a2 	bl	80034f4 <sendAck>
					stateuart = startmode;
 80031b0:	4b1e      	ldr	r3, [pc, #120]	; (800322c <uartprotocol+0x4f4>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e158      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 7 && RxBuffer[PosdataPre] == data )	//set goal n station
 80031b8:	4b21      	ldr	r3, [pc, #132]	; (8003240 <uartprotocol+0x508>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b07      	cmp	r3, #7
 80031be:	d112      	bne.n	80031e6 <uartprotocol+0x4ae>
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <uartprotocol+0x4e4>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <uartprotocol+0x4e8>)
 80031c8:	5c9a      	ldrb	r2, [r3, r2]
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <uartprotocol+0x4f0>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d109      	bne.n	80031e6 <uartprotocol+0x4ae>
				{
					sunflower =3;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <uartprotocol+0x504>)
 80031d4:	2203      	movs	r2, #3
 80031d6:	601a      	str	r2, [r3, #0]
					sendAck(1);
 80031d8:	2001      	movs	r0, #1
 80031da:	f000 f98b 	bl	80034f4 <sendAck>
					stateuart = startmode;
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <uartprotocol+0x4f4>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e141      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 8 && RxBuffer[PosdataPre] == 0b01100111)	//go goal
 80031e6:	4b16      	ldr	r3, [pc, #88]	; (8003240 <uartprotocol+0x508>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d13a      	bne.n	8003264 <uartprotocol+0x52c>
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <uartprotocol+0x4e4>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <uartprotocol+0x4e8>)
 80031f6:	5c9b      	ldrb	r3, [r3, r2]
 80031f8:	2b67      	cmp	r3, #103	; 0x67
 80031fa:	d133      	bne.n	8003264 <uartprotocol+0x52c>
				{
					gogoal = 1;
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <uartprotocol+0x528>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
					sendAck(1);
 8003202:	2001      	movs	r0, #1
 8003204:	f000 f976 	bl	80034f4 <sendAck>
					stateuart = startmode;
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <uartprotocol+0x4f4>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e12c      	b.n	800346a <uartprotocol+0x732>
 8003210:	4bc6a7f0 	.word	0x4bc6a7f0
 8003214:	40deadfb 	.word	0x40deadfb
 8003218:	200002fc 	.word	0x200002fc
 800321c:	200002f9 	.word	0x200002f9
 8003220:	200002b0 	.word	0x200002b0
 8003224:	200002ff 	.word	0x200002ff
 8003228:	200002fd 	.word	0x200002fd
 800322c:	200002fa 	.word	0x200002fa
 8003230:	20000341 	.word	0x20000341
 8003234:	20000340 	.word	0x20000340
 8003238:	20000300 	.word	0x20000300
 800323c:	200002f4 	.word	0x200002f4
 8003240:	200002fb 	.word	0x200002fb
 8003244:	80808081 	.word	0x80808081
 8003248:	200003a8 	.word	0x200003a8
 800324c:	200002fe 	.word	0x200002fe
 8003250:	200003b0 	.word	0x200003b0
 8003254:	20000478 	.word	0x20000478
 8003258:	2000034e 	.word	0x2000034e
 800325c:	2000034f 	.word	0x2000034f
 8003260:	20000342 	.word	0x20000342
				}

				else if (mode == 9 && RxBuffer[PosdataPre] == 0b01100110)	//request current station
 8003264:	4b96      	ldr	r3, [pc, #600]	; (80034c0 <uartprotocol+0x788>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b09      	cmp	r3, #9
 800326a:	d10d      	bne.n	8003288 <uartprotocol+0x550>
 800326c:	4b95      	ldr	r3, [pc, #596]	; (80034c4 <uartprotocol+0x78c>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4b95      	ldr	r3, [pc, #596]	; (80034c8 <uartprotocol+0x790>)
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	2b66      	cmp	r3, #102	; 0x66
 8003278:	d106      	bne.n	8003288 <uartprotocol+0x550>
				{
					sendAck(1);
 800327a:	2001      	movs	r0, #1
 800327c:	f000 f93a 	bl	80034f4 <sendAck>
					stateuart = startmode;
 8003280:	4b92      	ldr	r3, [pc, #584]	; (80034cc <uartprotocol+0x794>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e0f0      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 10 && RxBuffer[PosdataPre] == 0b01100101)	//request angular position
 8003288:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <uartprotocol+0x788>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b0a      	cmp	r3, #10
 800328e:	d16c      	bne.n	800336a <uartprotocol+0x632>
 8003290:	4b8c      	ldr	r3, [pc, #560]	; (80034c4 <uartprotocol+0x78c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <uartprotocol+0x790>)
 8003298:	5c9b      	ldrb	r3, [r3, r2]
 800329a:	2b65      	cmp	r3, #101	; 0x65
 800329c:	d165      	bne.n	800336a <uartprotocol+0x632>
				{
					sendAck(1);
 800329e:	2001      	movs	r0, #1
 80032a0:	f000 f928 	bl	80034f4 <sendAck>
					float radthousand = angel*10000*3.14/180;		//angel = present degree that read from encoder
 80032a4:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <uartprotocol+0x798>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80034d4 <uartprotocol+0x79c>
 80032ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b2:	ee17 0a90 	vmov	r0, s15
 80032b6:	f7fd f8f3 	bl	80004a0 <__aeabi_f2d>
 80032ba:	a37f      	add	r3, pc, #508	; (adr r3, 80034b8 <uartprotocol+0x780>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f7fd f946 	bl	8000550 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	4b81      	ldr	r3, [pc, #516]	; (80034d8 <uartprotocol+0x7a0>)
 80032d2:	f7fd fa67 	bl	80007a4 <__aeabi_ddiv>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	f7fd fbe7 	bl	8000ab0 <__aeabi_d2f>
 80032e2:	4603      	mov	r3, r0
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
					uint8_t p1 = (uint8_t)(radthousand/256);
 80032e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032ea:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80034dc <uartprotocol+0x7a4>
 80032ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80032fa:	793b      	ldrb	r3, [r7, #4]
 80032fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					uint8_t p2 = (uint8_t)((int)(radthousand)%256);
 8003300:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003308:	ee17 3a90 	vmov	r3, s15
 800330c:	425a      	negs	r2, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	bf58      	it	pl
 8003314:	4253      	negpl	r3, r2
 8003316:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					uint8_t checksumposition = ~((0b10011010+p1+p2) & 0xff);
 800331a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800331e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003322:	4413      	add	r3, r2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	3b66      	subs	r3, #102	; 0x66
 8003328:	b2db      	uxtb	r3, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					uint8_t position[32] = {0b10011010, p1,p2,checksumposition};
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	2220      	movs	r2, #32
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f006 f81d 	bl	8009378 <memset>
 800333e:	239a      	movs	r3, #154	; 0x9a
 8003340:	733b      	strb	r3, [r7, #12]
 8003342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003346:	737b      	strb	r3, [r7, #13]
 8003348:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800334c:	73bb      	strb	r3, [r7, #14]
 800334e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003352:	73fb      	strb	r3, [r7, #15]
					HAL_UART_Transmit(&huart2, position, 4, 100);
 8003354:	f107 010c 	add.w	r1, r7, #12
 8003358:	2364      	movs	r3, #100	; 0x64
 800335a:	2204      	movs	r2, #4
 800335c:	4860      	ldr	r0, [pc, #384]	; (80034e0 <uartprotocol+0x7a8>)
 800335e:	f004 fe7e 	bl	800805e <HAL_UART_Transmit>
					stateuart = startmode;
 8003362:	4b5a      	ldr	r3, [pc, #360]	; (80034cc <uartprotocol+0x794>)
 8003364:	2201      	movs	r2, #1
 8003366:	701a      	strb	r2, [r3, #0]
				{
 8003368:	e07f      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 11 && RxBuffer[PosdataPre] == 0b01100100)	//request angular velocity
 800336a:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <uartprotocol+0x788>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b0b      	cmp	r3, #11
 8003370:	d13c      	bne.n	80033ec <uartprotocol+0x6b4>
 8003372:	4b54      	ldr	r3, [pc, #336]	; (80034c4 <uartprotocol+0x78c>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <uartprotocol+0x790>)
 800337a:	5c9b      	ldrb	r3, [r3, r2]
 800337c:	2b64      	cmp	r3, #100	; 0x64
 800337e:	d135      	bne.n	80033ec <uartprotocol+0x6b4>
				{
					sendAck(1);
 8003380:	2001      	movs	r0, #1
 8003382:	f000 f8b7 	bl	80034f4 <sendAck>
					uint8_t omega = (uint8_t)(wgu*255/10);			// wgu = present omega that read from encoder
 8003386:	4b57      	ldr	r3, [pc, #348]	; (80034e4 <uartprotocol+0x7ac>)
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80034e8 <uartprotocol+0x7b0>
 8003390:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003394:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003398:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800339c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80033a4:	793b      	ldrb	r3, [r7, #4]
 80033a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					uint8_t checksumvelocity = ~((0b10011011+omega) & 0xff);
 80033aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80033ae:	3b65      	subs	r3, #101	; 0x65
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					uint8_t velocity[32] = {0b10011011, 0,omega,checksumvelocity};
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	2220      	movs	r2, #32
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f005 ffd9 	bl	8009378 <memset>
 80033c6:	239b      	movs	r3, #155	; 0x9b
 80033c8:	733b      	strb	r3, [r7, #12]
 80033ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80033ce:	73bb      	strb	r3, [r7, #14]
 80033d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033d4:	73fb      	strb	r3, [r7, #15]
					HAL_UART_Transmit(&huart2, velocity, 4, 100);
 80033d6:	f107 010c 	add.w	r1, r7, #12
 80033da:	2364      	movs	r3, #100	; 0x64
 80033dc:	2204      	movs	r2, #4
 80033de:	4840      	ldr	r0, [pc, #256]	; (80034e0 <uartprotocol+0x7a8>)
 80033e0:	f004 fe3d 	bl	800805e <HAL_UART_Transmit>
					stateuart = startmode;
 80033e4:	4b39      	ldr	r3, [pc, #228]	; (80034cc <uartprotocol+0x794>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
				{
 80033ea:	e03e      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 12 && RxBuffer[PosdataPre] == 0b01100011)	//enable gripper
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <uartprotocol+0x788>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d110      	bne.n	8003416 <uartprotocol+0x6de>
 80033f4:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <uartprotocol+0x78c>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <uartprotocol+0x790>)
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	2b63      	cmp	r3, #99	; 0x63
 8003400:	d109      	bne.n	8003416 <uartprotocol+0x6de>
				{
					gripper = 1;
 8003402:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <uartprotocol+0x7b4>)
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
					sendAck(1);
 8003408:	2001      	movs	r0, #1
 800340a:	f000 f873 	bl	80034f4 <sendAck>
					stateuart = startmode;
 800340e:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <uartprotocol+0x794>)
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e029      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 13 && RxBuffer[PosdataPre] == 0b01100010)	//disable gripper
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <uartprotocol+0x788>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b0d      	cmp	r3, #13
 800341c:	d110      	bne.n	8003440 <uartprotocol+0x708>
 800341e:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <uartprotocol+0x78c>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <uartprotocol+0x790>)
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	2b62      	cmp	r3, #98	; 0x62
 800342a:	d109      	bne.n	8003440 <uartprotocol+0x708>
				{
					gripper = 0;
 800342c:	4b2f      	ldr	r3, [pc, #188]	; (80034ec <uartprotocol+0x7b4>)
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
					sendAck(1);
 8003432:	2001      	movs	r0, #1
 8003434:	f000 f85e 	bl	80034f4 <sendAck>
					stateuart = startmode;
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <uartprotocol+0x794>)
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e014      	b.n	800346a <uartprotocol+0x732>
				}

				else if (mode == 14 && RxBuffer[PosdataPre] == 0b01100001)	//set home
 8003440:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <uartprotocol+0x788>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b0e      	cmp	r3, #14
 8003446:	d123      	bne.n	8003490 <uartprotocol+0x758>
 8003448:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <uartprotocol+0x78c>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <uartprotocol+0x790>)
 8003450:	5c9b      	ldrb	r3, [r3, r2]
 8003452:	2b61      	cmp	r3, #97	; 0x61
 8003454:	d11c      	bne.n	8003490 <uartprotocol+0x758>
				{
					sethome = 1;
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <uartprotocol+0x7b8>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]
					sendAck(1);
 800345c:	2001      	movs	r0, #1
 800345e:	f000 f849 	bl	80034f4 <sendAck>
					stateuart = startmode;
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <uartprotocol+0x794>)
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
				}

			break;
 8003468:	e012      	b.n	8003490 <uartprotocol+0x758>
 800346a:	e011      	b.n	8003490 <uartprotocol+0x758>

			case 7:		//checkconnect
				if (RxBuffer[PosdataPre] == 0b01101101)
 800346c:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <uartprotocol+0x78c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <uartprotocol+0x790>)
 8003474:	5c9b      	ldrb	r3, [r3, r2]
 8003476:	2b6d      	cmp	r3, #109	; 0x6d
 8003478:	d102      	bne.n	8003480 <uartprotocol+0x748>
				{
					sendAck(1);
 800347a:	2001      	movs	r0, #1
 800347c:	f000 f83a 	bl	80034f4 <sendAck>
				}
				stateuart = startmode;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <uartprotocol+0x794>)
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
			break;
 8003486:	e004      	b.n	8003492 <uartprotocol+0x75a>
			break;
 8003488:	bf00      	nop
 800348a:	e002      	b.n	8003492 <uartprotocol+0x75a>
			break;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <uartprotocol+0x75a>
			break;
 8003490:	bf00      	nop

		}
		PosdataPre=(PosdataPre+1)%huart2.RxXferSize;
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <uartprotocol+0x78c>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	3301      	adds	r3, #1
 8003498:	4a11      	ldr	r2, [pc, #68]	; (80034e0 <uartprotocol+0x7a8>)
 800349a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800349c:	fb93 f1f2 	sdiv	r1, r3, r2
 80034a0:	fb01 f202 	mul.w	r2, r1, r2
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <uartprotocol+0x78c>)
 80034aa:	701a      	strb	r2, [r3, #0]
	}
}
 80034ac:	bf00      	nop
 80034ae:	3738      	adds	r7, #56	; 0x38
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	f3af 8000 	nop.w
 80034b8:	51eb851f 	.word	0x51eb851f
 80034bc:	40091eb8 	.word	0x40091eb8
 80034c0:	200002fb 	.word	0x200002fb
 80034c4:	200002f9 	.word	0x200002f9
 80034c8:	200002b0 	.word	0x200002b0
 80034cc:	200002fa 	.word	0x200002fa
 80034d0:	20000360 	.word	0x20000360
 80034d4:	461c4000 	.word	0x461c4000
 80034d8:	40668000 	.word	0x40668000
 80034dc:	43800000 	.word	0x43800000
 80034e0:	20000210 	.word	0x20000210
 80034e4:	2000035c 	.word	0x2000035c
 80034e8:	437f0000 	.word	0x437f0000
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000018 	.word	0x20000018

080034f4 <sendAck>:

void sendAck(uint8_t ack)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
	static uint8_t ack1[2]={0x58,0b01110101};
	static uint8_t ack2[2]={70,110};
	HAL_Delay(20);
 80034fe:	2014      	movs	r0, #20
 8003500:	f000 fc06 	bl	8003d10 <HAL_Delay>
	if(ack == 1)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <sendAck+0x22>
	{
		HAL_UART_Transmit_IT(&huart2, ack1, 2);
 800350a:	2202      	movs	r2, #2
 800350c:	4908      	ldr	r1, [pc, #32]	; (8003530 <sendAck+0x3c>)
 800350e:	4809      	ldr	r0, [pc, #36]	; (8003534 <sendAck+0x40>)
 8003510:	f004 fe3e 	bl	8008190 <HAL_UART_Transmit_IT>
//	ackackbank = 1;

//		ackcount = ackcount + 1;
	}

}
 8003514:	e007      	b.n	8003526 <sendAck+0x32>
	else if(ack ==2)
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d104      	bne.n	8003526 <sendAck+0x32>
		HAL_UART_Transmit_IT(&huart2, ack2, 2);
 800351c:	2202      	movs	r2, #2
 800351e:	4906      	ldr	r1, [pc, #24]	; (8003538 <sendAck+0x44>)
 8003520:	4804      	ldr	r0, [pc, #16]	; (8003534 <sendAck+0x40>)
 8003522:	f004 fe35 	bl	8008190 <HAL_UART_Transmit_IT>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000020 	.word	0x20000020
 8003534:	20000210 	.word	0x20000210
 8003538:	20000024 	.word	0x20000024

0800353c <EndEffector>:

void EndEffector()
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	if (gripper == 1)
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <EndEffector+0x20>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <EndEffector+0x1c>
	{
		static const uint8_t laser_Addr=(0x23<<1);
		static uint8_t pdatastart[1]={0x45};
		HAL_I2C_Master_Transmit_IT(&hi2c1, laser_Addr, pdatastart, 1);
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <EndEffector+0x24>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b299      	uxth	r1, r3
 800354e:	2301      	movs	r3, #1
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <EndEffector+0x28>)
 8003552:	4805      	ldr	r0, [pc, #20]	; (8003568 <EndEffector+0x2c>)
 8003554:	f001 fbc4 	bl	8004ce0 <HAL_I2C_Master_Transmit_IT>
	}
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000000 	.word	0x20000000
 8003560:	0800955c 	.word	0x0800955c
 8003564:	20000028 	.word	0x20000028
 8003568:	200000bc 	.word	0x200000bc

0800356c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d102      	bne.n	8003582 <HAL_GPIO_EXTI_Callback+0x16>
  {
	  TIM1->CNT = 0;
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <HAL_GPIO_EXTI_Callback+0x24>)
 800357e:	2200      	movs	r2, #0
 8003580:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000

08003594 <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 8192
#define  MAX_ENCODER_PERIOD 8192
float EncoderVelocity_Update() {
 8003594:	b5b0      	push	{r4, r5, r7, lr}
 8003596:	ed2d 8b02 	vpush	{d8}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 800359e:	4b23      	ldr	r3, [pc, #140]	; (800362c <EncoderVelocity_Update+0x98>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 80035a6:	f000 f863 	bl	8003670 <micros>
 80035aa:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <EncoderVelocity_Update+0x9c>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035b8:	1a84      	subs	r4, r0, r2
 80035ba:	eb61 0503 	sbc.w	r5, r1, r3
 80035be:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <EncoderVelocity_Update+0xa0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW) {
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	db04      	blt.n	80035de <EncoderVelocity_Update+0x4a>
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e007      	b.n	80035ee <EncoderVelocity_Update+0x5a>
	} else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW) {
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 80035e4:	dc03      	bgt.n	80035ee <EncoderVelocity_Update+0x5a>
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035ec:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80035ee:	4a11      	ldr	r2, [pc, #68]	; (8003634 <EncoderVelocity_Update+0xa0>)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <EncoderVelocity_Update+0x9c>)
 80035f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035fa:	e9c1 2300 	strd	r2, r3, [r1]
	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <EncoderVelocity_Update+0xa4>)
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800360e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003612:	f7fd fb65 	bl	8000ce0 <__aeabi_ul2f>
 8003616:	ee07 0a10 	vmov	s14, r0
 800361a:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 800361e:	eeb0 0a67 	vmov.f32	s0, s15
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	ecbd 8b02 	vpop	{d8}
 800362a:	bdb0      	pop	{r4, r5, r7, pc}
 800362c:	20000110 	.word	0x20000110
 8003630:	20000578 	.word	0x20000578
 8003634:	20000580 	.word	0x20000580
 8003638:	000f4240 	.word	0x000f4240

0800363c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800363c:	b4b0      	push	{r4, r5, r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a08      	ldr	r2, [pc, #32]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += 4294967295;
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	1e54      	subs	r4, r2, #1
 8003654:	f143 0500 	adc.w	r5, r3, #0
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800365a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bcb0      	pop	{r4, r5, r7}
 8003666:	4770      	bx	lr
 8003668:	200001d0 	.word	0x200001d0
 800366c:	20000350 	.word	0x20000350

08003670 <micros>:
uint64_t micros() {
 8003670:	b4b0      	push	{r4, r5, r7}
 8003672:	af00      	add	r7, sp, #0
 	return _micros + htim5.Instance->CNT;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <micros+0x2c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2200      	movs	r2, #0
 800367c:	4618      	mov	r0, r3
 800367e:	4611      	mov	r1, r2
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <micros+0x30>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	1884      	adds	r4, r0, r2
 8003688:	eb41 0503 	adc.w	r5, r1, r3
 800368c:	4622      	mov	r2, r4
 800368e:	462b      	mov	r3, r5
}
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	bcb0      	pop	{r4, r5, r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	200001d0 	.word	0x200001d0
 80036a0:	20000350 	.word	0x20000350

080036a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a8:	b672      	cpsid	i
}
 80036aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036ac:	e7fe      	b.n	80036ac <Error_Handler+0x8>
	...

080036b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <HAL_MspInit+0x4c>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_MspInit+0x4c>)
 80036c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c4:	6453      	str	r3, [r2, #68]	; 0x44
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_MspInit+0x4c>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_MspInit+0x4c>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <HAL_MspInit+0x4c>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_MspInit+0x4c>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80036ee:	2007      	movs	r0, #7
 80036f0:	f000 fc02 	bl	8003ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800

08003700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a21      	ldr	r2, [pc, #132]	; (80037a4 <HAL_I2C_MspInit+0xa4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d13c      	bne.n	800379c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_I2C_MspInit+0xa8>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_I2C_MspInit+0xa8>)
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_I2C_MspInit+0xa8>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800373e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003744:	2312      	movs	r3, #18
 8003746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003748:	2301      	movs	r3, #1
 800374a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003750:	2304      	movs	r3, #4
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	4814      	ldr	r0, [pc, #80]	; (80037ac <HAL_I2C_MspInit+0xac>)
 800375c:	f000 ffae 	bl	80046bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_I2C_MspInit+0xa8>)
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <HAL_I2C_MspInit+0xa8>)
 800376a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800376e:	6413      	str	r3, [r2, #64]	; 0x40
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_I2C_MspInit+0xa8>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	2100      	movs	r1, #0
 8003780:	201f      	movs	r0, #31
 8003782:	f000 fbc4 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003786:	201f      	movs	r0, #31
 8003788:	f000 fbdd 	bl	8003f46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	2020      	movs	r0, #32
 8003792:	f000 fbbc 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003796:	2020      	movs	r0, #32
 8003798:	f000 fbd5 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40005400 	.word	0x40005400
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020400 	.word	0x40020400

080037b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_TIM_Encoder_MspInit+0x84>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d12c      	bne.n	800382c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	4b18      	ldr	r3, [pc, #96]	; (8003838 <HAL_TIM_Encoder_MspInit+0x88>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	4a17      	ldr	r2, [pc, #92]	; (8003838 <HAL_TIM_Encoder_MspInit+0x88>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6453      	str	r3, [r2, #68]	; 0x44
 80037e2:	4b15      	ldr	r3, [pc, #84]	; (8003838 <HAL_TIM_Encoder_MspInit+0x88>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_TIM_Encoder_MspInit+0x88>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a10      	ldr	r2, [pc, #64]	; (8003838 <HAL_TIM_Encoder_MspInit+0x88>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_TIM_Encoder_MspInit+0x88>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800380a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800380e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800381c:	2301      	movs	r3, #1
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	4805      	ldr	r0, [pc, #20]	; (800383c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003828:	f000 ff48 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800382c:	bf00      	nop
 800382e:	3728      	adds	r7, #40	; 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40010000 	.word	0x40010000
 8003838:	40023800 	.word	0x40023800
 800383c:	40020000 	.word	0x40020000

08003840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800386e:	e02e      	b.n	80038ce <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_TIM_Base_MspInit+0x9c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
}
 8003896:	e01a      	b.n	80038ce <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <HAL_TIM_Base_MspInit+0xa0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d115      	bne.n	80038ce <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 80038ac:	f043 0308 	orr.w	r3, r3, #8
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_TIM_Base_MspInit+0x98>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	2032      	movs	r0, #50	; 0x32
 80038c4:	f000 fb23 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80038c8:	2032      	movs	r0, #50	; 0x32
 80038ca:	f000 fb3c 	bl	8003f46 <HAL_NVIC_EnableIRQ>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00

080038e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d13d      	bne.n	8003982 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800393e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003950:	2301      	movs	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	4619      	mov	r1, r3
 800395a:	481e      	ldr	r0, [pc, #120]	; (80039d4 <HAL_TIM_MspPostInit+0xf0>)
 800395c:	f000 feae 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003960:	2308      	movs	r3, #8
 8003962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396c:	2300      	movs	r3, #0
 800396e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003970:	2301      	movs	r3, #1
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	4817      	ldr	r0, [pc, #92]	; (80039d8 <HAL_TIM_MspPostInit+0xf4>)
 800397c:	f000 fe9e 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003980:	e022      	b.n	80039c8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <HAL_TIM_MspPostInit+0xf8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d11d      	bne.n	80039c8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398c:	2300      	movs	r3, #0
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4a0e      	ldr	r2, [pc, #56]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	6313      	str	r3, [r2, #48]	; 0x30
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_TIM_MspPostInit+0xec>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039b8:	2302      	movs	r3, #2
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4619      	mov	r1, r3
 80039c2:	4805      	ldr	r0, [pc, #20]	; (80039d8 <HAL_TIM_MspPostInit+0xf4>)
 80039c4:	f000 fe7a 	bl	80046bc <HAL_GPIO_Init>
}
 80039c8:	bf00      	nop
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40020000 	.word	0x40020000
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40000800 	.word	0x40000800

080039e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a34      	ldr	r2, [pc, #208]	; (8003ad0 <HAL_UART_MspInit+0xf0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d162      	bne.n	8003ac8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <HAL_UART_MspInit+0xf4>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a32      	ldr	r2, [pc, #200]	; (8003ad4 <HAL_UART_MspInit+0xf4>)
 8003a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_UART_MspInit+0xf4>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_UART_MspInit+0xf4>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <HAL_UART_MspInit+0xf4>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_UART_MspInit+0xf4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a46:	2303      	movs	r3, #3
 8003a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a4a:	2307      	movs	r3, #7
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	4619      	mov	r1, r3
 8003a54:	4820      	ldr	r0, [pc, #128]	; (8003ad8 <HAL_UART_MspInit+0xf8>)
 8003a56:	f000 fe31 	bl	80046bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a5c:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <HAL_UART_MspInit+0x100>)
 8003a5e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a60:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a66:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a68:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a9c:	480f      	ldr	r0, [pc, #60]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003a9e:	f000 fa6d 	bl	8003f7c <HAL_DMA_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003aa8:	f7ff fdfc 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <HAL_UART_MspInit+0xfc>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	2026      	movs	r0, #38	; 0x26
 8003abe:	f000 fa26 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ac2:	2026      	movs	r0, #38	; 0x26
 8003ac4:	f000 fa3f 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ac8:	bf00      	nop
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40004400 	.word	0x40004400
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	20000250 	.word	0x20000250
 8003ae0:	40026088 	.word	0x40026088

08003ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ae8:	e7fe      	b.n	8003ae8 <NMI_Handler+0x4>

08003aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aee:	e7fe      	b.n	8003aee <HardFault_Handler+0x4>

08003af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <MemManage_Handler+0x4>

08003af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003afa:	e7fe      	b.n	8003afa <BusFault_Handler+0x4>

08003afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b00:	e7fe      	b.n	8003b00 <UsageFault_Handler+0x4>

08003b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b30:	f000 f8ce 	bl	8003cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f000 ff73 	bl	8004a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <DMA1_Stream5_IRQHandler+0x10>)
 8003b4e:	f000 fb3d 	bl	80041cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000250 	.word	0x20000250

08003b5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <I2C1_EV_IRQHandler+0x10>)
 8003b62:	f001 f963 	bl	8004e2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200000bc 	.word	0x200000bc

08003b70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <I2C1_ER_IRQHandler+0x10>)
 8003b76:	f001 fac6 	bl	8005106 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	200000bc 	.word	0x200000bc

08003b84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b88:	4802      	ldr	r0, [pc, #8]	; (8003b94 <USART2_IRQHandler+0x10>)
 8003b8a:	f004 fbc7 	bl	800831c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000210 	.word	0x20000210

08003b98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b9c:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <TIM5_IRQHandler+0x10>)
 8003b9e:	f003 fc09 	bl	80073b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200001d0 	.word	0x200001d0

08003bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <SystemInit+0x28>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <SystemInit+0x28>)
 8003bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else


  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <SystemInit+0x28>)
 8003bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003bdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003bde:	e003      	b.n	8003be8 <LoopCopyDataInit>

08003be0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003be2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003be4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003be6:	3104      	adds	r1, #4

08003be8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003be8:	480b      	ldr	r0, [pc, #44]	; (8003c18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003bec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003bee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003bf0:	d3f6      	bcc.n	8003be0 <CopyDataInit>
  ldr  r2, =_sbss
 8003bf2:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003bf4:	e002      	b.n	8003bfc <LoopFillZerobss>

08003bf6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bf8:	f842 3b04 	str.w	r3, [r2], #4

08003bfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c00:	d3f9      	bcc.n	8003bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c02:	f7ff ffd3 	bl	8003bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c06:	f005 fb93 	bl	8009330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c0a:	f7fd fa31 	bl	8001070 <main>
  bx  lr    
 8003c0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c14:	08009590 	.word	0x08009590
  ldr  r0, =_sdata
 8003c18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c1c:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8003c20:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8003c24:	20000588 	.word	0x20000588

08003c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c28:	e7fe      	b.n	8003c28 <ADC_IRQHandler>
	...

08003c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <HAL_Init+0x40>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <HAL_Init+0x40>)
 8003c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_Init+0x40>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <HAL_Init+0x40>)
 8003c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_Init+0x40>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_Init+0x40>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c54:	2003      	movs	r0, #3
 8003c56:	f000 f94f 	bl	8003ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f000 f808 	bl	8003c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c60:	f7ff fd26 	bl	80036b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023c00 	.word	0x40023c00

08003c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_InitTick+0x54>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_InitTick+0x58>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	4619      	mov	r1, r3
 8003c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f967 	bl	8003f62 <HAL_SYSTICK_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e00e      	b.n	8003cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b0f      	cmp	r3, #15
 8003ca2:	d80a      	bhi.n	8003cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	f000 f92f 	bl	8003f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cb0:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <HAL_InitTick+0x5c>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	2000002c 	.word	0x2000002c
 8003cc8:	20000034 	.word	0x20000034
 8003ccc:	20000030 	.word	0x20000030

08003cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_IncTick+0x20>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_IncTick+0x24>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_IncTick+0x24>)
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000034 	.word	0x20000034
 8003cf4:	20000584 	.word	0x20000584

08003cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HAL_GetTick+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000584 	.word	0x20000584

08003d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d18:	f7ff ffee 	bl	8003cf8 <HAL_GetTick>
 8003d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d005      	beq.n	8003d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <HAL_Delay+0x44>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d36:	bf00      	nop
 8003d38:	f7ff ffde 	bl	8003cf8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d8f7      	bhi.n	8003d38 <HAL_Delay+0x28>
  {
  }
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000034 	.word	0x20000034

08003d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <__NVIC_SetPriorityGrouping+0x44>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d74:	4013      	ands	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d8a:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <__NVIC_SetPriorityGrouping+0x44>)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	60d3      	str	r3, [r2, #12]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <__NVIC_GetPriorityGrouping+0x18>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	f003 0307 	and.w	r3, r3, #7
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	db0b      	blt.n	8003de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	f003 021f 	and.w	r2, r3, #31
 8003dd4:	4907      	ldr	r1, [pc, #28]	; (8003df4 <__NVIC_EnableIRQ+0x38>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2001      	movs	r0, #1
 8003dde:	fa00 f202 	lsl.w	r2, r0, r2
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	e000e100 	.word	0xe000e100

08003df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	db0a      	blt.n	8003e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	490c      	ldr	r1, [pc, #48]	; (8003e44 <__NVIC_SetPriority+0x4c>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e20:	e00a      	b.n	8003e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	4908      	ldr	r1, [pc, #32]	; (8003e48 <__NVIC_SetPriority+0x50>)
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	3b04      	subs	r3, #4
 8003e30:	0112      	lsls	r2, r2, #4
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	440b      	add	r3, r1
 8003e36:	761a      	strb	r2, [r3, #24]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000e100 	.word	0xe000e100
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f1c3 0307 	rsb	r3, r3, #7
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	bf28      	it	cs
 8003e6a:	2304      	movcs	r3, #4
 8003e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	3304      	adds	r3, #4
 8003e72:	2b06      	cmp	r3, #6
 8003e74:	d902      	bls.n	8003e7c <NVIC_EncodePriority+0x30>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3b03      	subs	r3, #3
 8003e7a:	e000      	b.n	8003e7e <NVIC_EncodePriority+0x32>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	f04f 32ff 	mov.w	r2, #4294967295
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e94:	f04f 31ff 	mov.w	r1, #4294967295
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9e:	43d9      	mvns	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	4313      	orrs	r3, r2
         );
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3724      	adds	r7, #36	; 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec4:	d301      	bcc.n	8003eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e00f      	b.n	8003eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <SysTick_Config+0x40>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed2:	210f      	movs	r1, #15
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	f7ff ff8e 	bl	8003df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <SysTick_Config+0x40>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <SysTick_Config+0x40>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff29 	bl	8003d58 <__NVIC_SetPriorityGrouping>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	4603      	mov	r3, r0
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f20:	f7ff ff3e 	bl	8003da0 <__NVIC_GetPriorityGrouping>
 8003f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7ff ff8e 	bl	8003e4c <NVIC_EncodePriority>
 8003f30:	4602      	mov	r2, r0
 8003f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff5d 	bl	8003df8 <__NVIC_SetPriority>
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff31 	bl	8003dbc <__NVIC_EnableIRQ>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ffa2 	bl	8003eb4 <SysTick_Config>
 8003f70:	4603      	mov	r3, r0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f88:	f7ff feb6 	bl	8003cf8 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e099      	b.n	80040cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb8:	e00f      	b.n	8003fda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fba:	f7ff fe9d 	bl	8003cf8 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d908      	bls.n	8003fda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e078      	b.n	80040cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e8      	bne.n	8003fba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <HAL_DMA_Init+0x158>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004006:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b04      	cmp	r3, #4
 8004032:	d107      	bne.n	8004044 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	4313      	orrs	r3, r2
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b04      	cmp	r3, #4
 800406c:	d117      	bne.n	800409e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fa9f 	bl	80045c4 <DMA_CheckFifoParam>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800409a:	2301      	movs	r3, #1
 800409c:	e016      	b.n	80040cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa56 	bl	8004558 <DMA_CalcBaseAndBitshift>
 80040ac:	4603      	mov	r3, r0
 80040ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	223f      	movs	r2, #63	; 0x3f
 80040b6:	409a      	lsls	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	f010803f 	.word	0xf010803f

080040d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_DMA_Start_IT+0x26>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e040      	b.n	8004180 <HAL_DMA_Start_IT+0xa8>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d12f      	bne.n	8004172 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f9e8 	bl	80044fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004130:	223f      	movs	r2, #63	; 0x3f
 8004132:	409a      	lsls	r2, r3
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0216 	orr.w	r2, r2, #22
 8004146:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0208 	orr.w	r2, r2, #8
 800415e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e005      	b.n	800417e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800417a:	2302      	movs	r3, #2
 800417c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d004      	beq.n	80041a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2280      	movs	r2, #128	; 0x80
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e00c      	b.n	80041c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2205      	movs	r2, #5
 80041aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041d8:	4b8e      	ldr	r3, [pc, #568]	; (8004414 <HAL_DMA_IRQHandler+0x248>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a8e      	ldr	r2, [pc, #568]	; (8004418 <HAL_DMA_IRQHandler+0x24c>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	0a9b      	lsrs	r3, r3, #10
 80041e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	2208      	movs	r2, #8
 80041f8:	409a      	lsls	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01a      	beq.n	8004238 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d013      	beq.n	8004238 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0204 	bic.w	r2, r2, #4
 800421e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004224:	2208      	movs	r2, #8
 8004226:	409a      	lsls	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	2201      	movs	r2, #1
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d012      	beq.n	800426e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	2201      	movs	r2, #1
 800425c:	409a      	lsls	r2, r3
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	f043 0202 	orr.w	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	2204      	movs	r2, #4
 8004274:	409a      	lsls	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d012      	beq.n	80042a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	2204      	movs	r2, #4
 8004292:	409a      	lsls	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	f043 0204 	orr.w	r2, r3, #4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	2210      	movs	r2, #16
 80042aa:	409a      	lsls	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d043      	beq.n	800433c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d03c      	beq.n	800433c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2210      	movs	r2, #16
 80042c8:	409a      	lsls	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d018      	beq.n	800430e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d108      	bne.n	80042fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d024      	beq.n	800433c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
 80042fa:	e01f      	b.n	800433c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
 800430c:	e016      	b.n	800433c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0208 	bic.w	r2, r2, #8
 800432a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	2220      	movs	r2, #32
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 808f 	beq.w	800446c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8087 	beq.w	800446c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	2220      	movs	r2, #32
 8004364:	409a      	lsls	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b05      	cmp	r3, #5
 8004374:	d136      	bne.n	80043e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0216 	bic.w	r2, r2, #22
 8004384:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004394:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <HAL_DMA_IRQHandler+0x1da>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0208 	bic.w	r2, r2, #8
 80043b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	223f      	movs	r2, #63	; 0x3f
 80043bc:	409a      	lsls	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d07e      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
        }
        return;
 80043e2:	e079      	b.n	80044d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10d      	bne.n	800441c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	2b00      	cmp	r3, #0
 8004406:	d031      	beq.n	800446c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
 8004410:	e02c      	b.n	800446c <HAL_DMA_IRQHandler+0x2a0>
 8004412:	bf00      	nop
 8004414:	2000002c 	.word	0x2000002c
 8004418:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d023      	beq.n	800446c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
 800442c:	e01e      	b.n	800446c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10f      	bne.n	800445c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0210 	bic.w	r2, r2, #16
 800444a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	2b00      	cmp	r3, #0
 8004472:	d032      	beq.n	80044da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d022      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2205      	movs	r2, #5
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	3301      	adds	r3, #1
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d307      	bcc.n	80044b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f2      	bne.n	8004498 <HAL_DMA_IRQHandler+0x2cc>
 80044b2:	e000      	b.n	80044b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044b4:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4798      	blx	r3
 80044d6:	e000      	b.n	80044da <HAL_DMA_IRQHandler+0x30e>
        return;
 80044d8:	bf00      	nop
    }
  }
}
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ee:	b2db      	uxtb	r3, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004518:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d108      	bne.n	800453c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800453a:	e007      	b.n	800454c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	3b10      	subs	r3, #16
 8004568:	4a14      	ldr	r2, [pc, #80]	; (80045bc <DMA_CalcBaseAndBitshift+0x64>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d909      	bls.n	800459a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	1d1a      	adds	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	659a      	str	r2, [r3, #88]	; 0x58
 8004598:	e007      	b.n	80045aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	aaaaaaab 	.word	0xaaaaaaab
 80045c0:	08009578 	.word	0x08009578

080045c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11f      	bne.n	800461e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d856      	bhi.n	8004692 <DMA_CheckFifoParam+0xce>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <DMA_CheckFifoParam+0x28>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	0800460f 	.word	0x0800460f
 80045f4:	080045fd 	.word	0x080045fd
 80045f8:	08004693 	.word	0x08004693
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d046      	beq.n	8004696 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460c:	e043      	b.n	8004696 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004616:	d140      	bne.n	800469a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461c:	e03d      	b.n	800469a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004626:	d121      	bne.n	800466c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b03      	cmp	r3, #3
 800462c:	d837      	bhi.n	800469e <DMA_CheckFifoParam+0xda>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <DMA_CheckFifoParam+0x70>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004645 	.word	0x08004645
 8004638:	0800464b 	.word	0x0800464b
 800463c:	08004645 	.word	0x08004645
 8004640:	0800465d 	.word	0x0800465d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	e030      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d025      	beq.n	80046a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465a:	e022      	b.n	80046a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004664:	d11f      	bne.n	80046a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800466a:	e01c      	b.n	80046a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d903      	bls.n	800467a <DMA_CheckFifoParam+0xb6>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d003      	beq.n	8004680 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004678:	e018      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
      break;
 800467e:	e015      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e00b      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      break;
 8004692:	bf00      	nop
 8004694:	e00a      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
 8004698:	e008      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 800469a:	bf00      	nop
 800469c:	e006      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 800469e:	bf00      	nop
 80046a0:	e004      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;   
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 80046aa:	bf00      	nop
    }
  } 
  
  return status; 
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop

080046bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e159      	b.n	800498c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046d8:	2201      	movs	r2, #1
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	f040 8148 	bne.w	8004986 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d00b      	beq.n	8004716 <HAL_GPIO_Init+0x5a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d007      	beq.n	8004716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800470a:	2b11      	cmp	r3, #17
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b12      	cmp	r3, #18
 8004714:	d130      	bne.n	8004778 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800474c:	2201      	movs	r2, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 0201 	and.w	r2, r3, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0xfc>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b12      	cmp	r3, #18
 80047b6:	d123      	bne.n	8004800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	08da      	lsrs	r2, r3, #3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3208      	adds	r2, #8
 80047c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	220f      	movs	r2, #15
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	08da      	lsrs	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3208      	adds	r2, #8
 80047fa:	69b9      	ldr	r1, [r7, #24]
 80047fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0203 	and.w	r2, r3, #3
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80a2 	beq.w	8004986 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_GPIO_Init+0x2e8>)
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <HAL_GPIO_Init+0x2e8>)
 800484c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004850:	6453      	str	r3, [r2, #68]	; 0x44
 8004852:	4b54      	ldr	r3, [pc, #336]	; (80049a4 <HAL_GPIO_Init+0x2e8>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800485e:	4a52      	ldr	r2, [pc, #328]	; (80049a8 <HAL_GPIO_Init+0x2ec>)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	3302      	adds	r3, #2
 8004866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	220f      	movs	r2, #15
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a49      	ldr	r2, [pc, #292]	; (80049ac <HAL_GPIO_Init+0x2f0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d019      	beq.n	80048be <HAL_GPIO_Init+0x202>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a48      	ldr	r2, [pc, #288]	; (80049b0 <HAL_GPIO_Init+0x2f4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_GPIO_Init+0x1fe>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a47      	ldr	r2, [pc, #284]	; (80049b4 <HAL_GPIO_Init+0x2f8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00d      	beq.n	80048b6 <HAL_GPIO_Init+0x1fa>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a46      	ldr	r2, [pc, #280]	; (80049b8 <HAL_GPIO_Init+0x2fc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <HAL_GPIO_Init+0x1f6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a45      	ldr	r2, [pc, #276]	; (80049bc <HAL_GPIO_Init+0x300>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <HAL_GPIO_Init+0x1f2>
 80048aa:	2304      	movs	r3, #4
 80048ac:	e008      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048ae:	2307      	movs	r3, #7
 80048b0:	e006      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048b2:	2303      	movs	r3, #3
 80048b4:	e004      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e002      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048be:	2300      	movs	r3, #0
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	f002 0203 	and.w	r2, r2, #3
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	4093      	lsls	r3, r2
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048d0:	4935      	ldr	r1, [pc, #212]	; (80049a8 <HAL_GPIO_Init+0x2ec>)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	3302      	adds	r3, #2
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048de:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <HAL_GPIO_Init+0x304>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004902:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004908:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <HAL_GPIO_Init+0x304>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800492c:	4a24      	ldr	r2, [pc, #144]	; (80049c0 <HAL_GPIO_Init+0x304>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004932:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004956:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800495c:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <HAL_GPIO_Init+0x304>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3301      	adds	r3, #1
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b0f      	cmp	r3, #15
 8004990:	f67f aea2 	bls.w	80046d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	3724      	adds	r7, #36	; 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40013800 	.word	0x40013800
 80049ac:	40020000 	.word	0x40020000
 80049b0:	40020400 	.word	0x40020400
 80049b4:	40020800 	.word	0x40020800
 80049b8:	40020c00 	.word	0x40020c00
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40013c00 	.word	0x40013c00

080049c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e001      	b.n	80049e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
 8004a00:	4613      	mov	r3, r2
 8004a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a10:	e003      	b.n	8004a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d006      	beq.n	8004a4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a3e:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fd90 	bl	800356c <HAL_GPIO_EXTI_Callback>
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40013c00 	.word	0x40013c00

08004a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e12b      	b.n	8004cc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fe fe3e 	bl	8003700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	; 0x24
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004abc:	f002 fad2 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 8004ac0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4a81      	ldr	r2, [pc, #516]	; (8004ccc <HAL_I2C_Init+0x274>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d807      	bhi.n	8004adc <HAL_I2C_Init+0x84>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a80      	ldr	r2, [pc, #512]	; (8004cd0 <HAL_I2C_Init+0x278>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bf94      	ite	ls
 8004ad4:	2301      	movls	r3, #1
 8004ad6:	2300      	movhi	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e006      	b.n	8004aea <HAL_I2C_Init+0x92>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a7d      	ldr	r2, [pc, #500]	; (8004cd4 <HAL_I2C_Init+0x27c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	bf94      	ite	ls
 8004ae4:	2301      	movls	r3, #1
 8004ae6:	2300      	movhi	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e0e7      	b.n	8004cc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a78      	ldr	r2, [pc, #480]	; (8004cd8 <HAL_I2C_Init+0x280>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	0c9b      	lsrs	r3, r3, #18
 8004afc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a6a      	ldr	r2, [pc, #424]	; (8004ccc <HAL_I2C_Init+0x274>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d802      	bhi.n	8004b2c <HAL_I2C_Init+0xd4>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	e009      	b.n	8004b40 <HAL_I2C_Init+0xe8>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	4a69      	ldr	r2, [pc, #420]	; (8004cdc <HAL_I2C_Init+0x284>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	3301      	adds	r3, #1
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	495c      	ldr	r1, [pc, #368]	; (8004ccc <HAL_I2C_Init+0x274>)
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	d819      	bhi.n	8004b94 <HAL_I2C_Init+0x13c>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e59      	subs	r1, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b6e:	1c59      	adds	r1, r3, #1
 8004b70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b74:	400b      	ands	r3, r1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_I2C_Init+0x138>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1e59      	subs	r1, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8e:	e051      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004b90:	2304      	movs	r3, #4
 8004b92:	e04f      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <HAL_I2C_Init+0x168>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1e58      	subs	r0, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	440b      	add	r3, r1
 8004baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e012      	b.n	8004be6 <HAL_I2C_Init+0x18e>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e58      	subs	r0, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	0099      	lsls	r1, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Init+0x196>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e022      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10e      	bne.n	8004c14 <HAL_I2C_Init+0x1bc>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1e58      	subs	r0, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6859      	ldr	r1, [r3, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	440b      	add	r3, r1
 8004c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c12:	e00f      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1e58      	subs	r0, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	0099      	lsls	r1, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	6809      	ldr	r1, [r1, #0]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6911      	ldr	r1, [r2, #16]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	4311      	orrs	r1, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	000186a0 	.word	0x000186a0
 8004cd0:	001e847f 	.word	0x001e847f
 8004cd4:	003d08ff 	.word	0x003d08ff
 8004cd8:	431bde83 	.word	0x431bde83
 8004cdc:	10624dd3 	.word	0x10624dd3

08004ce0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	460b      	mov	r3, r1
 8004cee:	817b      	strh	r3, [r7, #10]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	f040 8085 	bne.w	8004e10 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d06:	4b46      	ldr	r3, [pc, #280]	; (8004e20 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	08db      	lsrs	r3, r3, #3
 8004d0c:	4a45      	ldr	r2, [pc, #276]	; (8004e24 <HAL_I2C_Master_Transmit_IT+0x144>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	0a1a      	lsrs	r2, r3, #8
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009a      	lsls	r2, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d116      	bne.n	8004d5a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e05b      	b.n	8004e12 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d0db      	beq.n	8004d20 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_I2C_Master_Transmit_IT+0x96>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e04d      	b.n	8004e12 <HAL_I2C_Master_Transmit_IT+0x132>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d007      	beq.n	8004d9c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2221      	movs	r2, #33	; 0x21
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2210      	movs	r2, #16
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	893a      	ldrh	r2, [r7, #8]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004dde:	897a      	ldrh	r2, [r7, #10]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004e0a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e000      	b.n	8004e12 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2000002c 	.word	0x2000002c
 8004e24:	14f8b589 	.word	0x14f8b589
 8004e28:	ffff0000 	.word	0xffff0000

08004e2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d003      	beq.n	8004e64 <HAL_I2C_EV_IRQHandler+0x38>
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	f040 80bd 	bne.w	8004fde <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <HAL_I2C_EV_IRQHandler+0x6e>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e84:	d003      	beq.n	8004e8e <HAL_I2C_EV_IRQHandler+0x62>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e8c:	d101      	bne.n	8004e92 <HAL_I2C_EV_IRQHandler+0x66>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_I2C_EV_IRQHandler+0x68>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	f000 812e 	beq.w	80050f6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_I2C_EV_IRQHandler+0x92>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	0a5b      	lsrs	r3, r3, #9
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 fc55 	bl	8006760 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fd62 	bl	8005980 <I2C_Master_SB>
 8004ebc:	e08e      	b.n	8004fdc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	08db      	lsrs	r3, r3, #3
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_I2C_EV_IRQHandler+0xb2>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	0a5b      	lsrs	r3, r3, #9
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fdd8 	bl	8005a8c <I2C_Master_ADD10>
 8004edc:	e07e      	b.n	8004fdc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_I2C_EV_IRQHandler+0xd2>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	0a5b      	lsrs	r3, r3, #9
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fdf2 	bl	8005ae0 <I2C_Master_ADDR>
 8004efc:	e06e      	b.n	8004fdc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d037      	beq.n	8004f7a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f18:	f000 80ef 	beq.w	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	09db      	lsrs	r3, r3, #7
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00f      	beq.n	8004f48 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	0a9b      	lsrs	r3, r3, #10
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f9ef 	bl	8005324 <I2C_MasterTransmit_TXE>
 8004f46:	e049      	b.n	8004fdc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	089b      	lsrs	r3, r3, #2
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80d2 	beq.w	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	0a5b      	lsrs	r3, r3, #9
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80cb 	beq.w	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d103      	bne.n	8004f72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa76 	bl	800545c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f70:	e0c3      	b.n	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fada 	bl	800552c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f78:	e0bf      	b.n	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f88:	f000 80b7 	beq.w	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00f      	beq.n	8004fb8 <HAL_I2C_EV_IRQHandler+0x18c>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	0a9b      	lsrs	r3, r3, #10
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d009      	beq.n	8004fb8 <HAL_I2C_EV_IRQHandler+0x18c>
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	089b      	lsrs	r3, r3, #2
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb4a 	bl	800564a <I2C_MasterReceive_RXNE>
 8004fb6:	e011      	b.n	8004fdc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	089b      	lsrs	r3, r3, #2
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 809a 	beq.w	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	0a5b      	lsrs	r3, r3, #9
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8093 	beq.w	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fbe9 	bl	80057ac <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fda:	e08e      	b.n	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
 8004fdc:	e08d      	b.n	80050fa <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e007      	b.n	8005000 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d012      	beq.n	8005032 <HAL_I2C_EV_IRQHandler+0x206>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	0a5b      	lsrs	r3, r3, #9
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00c      	beq.n	8005032 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005028:	69b9      	ldr	r1, [r7, #24]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 ffa7 	bl	8005f7e <I2C_Slave_ADDR>
 8005030:	e066      	b.n	8005100 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_I2C_EV_IRQHandler+0x226>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	0a5b      	lsrs	r3, r3, #9
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 ffdc 	bl	8006008 <I2C_Slave_STOPF>
 8005050:	e056      	b.n	8005100 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005052:	7bbb      	ldrb	r3, [r7, #14]
 8005054:	2b21      	cmp	r3, #33	; 0x21
 8005056:	d002      	beq.n	800505e <HAL_I2C_EV_IRQHandler+0x232>
 8005058:	7bbb      	ldrb	r3, [r7, #14]
 800505a:	2b29      	cmp	r3, #41	; 0x29
 800505c:	d125      	bne.n	80050aa <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	09db      	lsrs	r3, r3, #7
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00f      	beq.n	800508a <HAL_I2C_EV_IRQHandler+0x25e>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	0a9b      	lsrs	r3, r3, #10
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_I2C_EV_IRQHandler+0x25e>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 febd 	bl	8005e02 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005088:	e039      	b.n	80050fe <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	089b      	lsrs	r3, r3, #2
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d033      	beq.n	80050fe <HAL_I2C_EV_IRQHandler+0x2d2>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	0a5b      	lsrs	r3, r3, #9
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02d      	beq.n	80050fe <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 feea 	bl	8005e7c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050a8:	e029      	b.n	80050fe <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	099b      	lsrs	r3, r3, #6
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00f      	beq.n	80050d6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	0a9b      	lsrs	r3, r3, #10
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d103      	bne.n	80050d6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fef5 	bl	8005ebe <I2C_SlaveReceive_RXNE>
 80050d4:	e014      	b.n	8005100 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	089b      	lsrs	r3, r3, #2
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00e      	beq.n	8005100 <HAL_I2C_EV_IRQHandler+0x2d4>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	0a5b      	lsrs	r3, r3, #9
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 ff23 	bl	8005f3a <I2C_SlaveReceive_BTF>
 80050f4:	e004      	b.n	8005100 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80050f6:	bf00      	nop
 80050f8:	e002      	b.n	8005100 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050fa:	bf00      	nop
 80050fc:	e000      	b.n	8005100 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b08a      	sub	sp, #40	; 0x28
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800511e:	2300      	movs	r3, #0
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005128:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	0a1b      	lsrs	r3, r3, #8
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00e      	beq.n	8005154 <HAL_I2C_ER_IRQHandler+0x4e>
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005152:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	0a5b      	lsrs	r3, r3, #9
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00e      	beq.n	800517e <HAL_I2C_ER_IRQHandler+0x78>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800517c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	0a9b      	lsrs	r3, r3, #10
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d03f      	beq.n	800520a <HAL_I2C_ER_IRQHandler+0x104>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d039      	beq.n	800520a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005196:	7efb      	ldrb	r3, [r7, #27]
 8005198:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80051b0:	7ebb      	ldrb	r3, [r7, #26]
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d112      	bne.n	80051dc <HAL_I2C_ER_IRQHandler+0xd6>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10f      	bne.n	80051dc <HAL_I2C_ER_IRQHandler+0xd6>
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	2b21      	cmp	r3, #33	; 0x21
 80051c0:	d008      	beq.n	80051d4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	2b29      	cmp	r3, #41	; 0x29
 80051c6:	d005      	beq.n	80051d4 <HAL_I2C_ER_IRQHandler+0xce>
 80051c8:	7cfb      	ldrb	r3, [r7, #19]
 80051ca:	2b28      	cmp	r3, #40	; 0x28
 80051cc:	d106      	bne.n	80051dc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b21      	cmp	r3, #33	; 0x21
 80051d2:	d103      	bne.n	80051dc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 f847 	bl	8006268 <I2C_Slave_AF>
 80051da:	e016      	b.n	800520a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	f043 0304 	orr.w	r3, r3, #4
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051ee:	7efb      	ldrb	r3, [r7, #27]
 80051f0:	2b10      	cmp	r3, #16
 80051f2:	d002      	beq.n	80051fa <HAL_I2C_ER_IRQHandler+0xf4>
 80051f4:	7efb      	ldrb	r3, [r7, #27]
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d107      	bne.n	800520a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	0adb      	lsrs	r3, r3, #11
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <HAL_I2C_ER_IRQHandler+0x12e>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	0a1b      	lsrs	r3, r3, #8
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	f043 0308 	orr.w	r3, r3, #8
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005232:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 f87e 	bl	8006348 <I2C_ITError>
  }
}
 800524c:	bf00      	nop
 800524e:	3728      	adds	r7, #40	; 0x28
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
 80052b0:	4613      	mov	r3, r2
 80052b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005332:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800533a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	2b00      	cmp	r3, #0
 8005348:	d150      	bne.n	80053ec <I2C_MasterTransmit_TXE+0xc8>
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b21      	cmp	r3, #33	; 0x21
 800534e:	d14d      	bne.n	80053ec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b08      	cmp	r3, #8
 8005354:	d01d      	beq.n	8005392 <I2C_MasterTransmit_TXE+0x6e>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b20      	cmp	r3, #32
 800535a:	d01a      	beq.n	8005392 <I2C_MasterTransmit_TXE+0x6e>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005362:	d016      	beq.n	8005392 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005372:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2211      	movs	r2, #17
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff ff62 	bl	8005254 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005390:	e060      	b.n	8005454 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053a0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d107      	bne.n	80053dc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ff7d 	bl	80052d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053da:	e03b      	b.n	8005454 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ff35 	bl	8005254 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053ea:	e033      	b.n	8005454 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b21      	cmp	r3, #33	; 0x21
 80053f0:	d005      	beq.n	80053fe <I2C_MasterTransmit_TXE+0xda>
 80053f2:	7bbb      	ldrb	r3, [r7, #14]
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d12d      	bne.n	8005454 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b22      	cmp	r3, #34	; 0x22
 80053fc:	d12a      	bne.n	8005454 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d108      	bne.n	800541a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005418:	e01c      	b.n	8005454 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d103      	bne.n	800542e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f880 	bl	800552c <I2C_MemoryTransmit_TXE_BTF>
}
 800542c:	e012      	b.n	8005454 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005452:	e7ff      	b.n	8005454 <I2C_MasterTransmit_TXE+0x130>
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b21      	cmp	r3, #33	; 0x21
 8005474:	d156      	bne.n	8005524 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80054a4:	e03e      	b.n	8005524 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d01d      	beq.n	80054e8 <I2C_MasterTransmit_BTF+0x8c>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d01a      	beq.n	80054e8 <I2C_MasterTransmit_BTF+0x8c>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054b8:	d016      	beq.n	80054e8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054c8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2211      	movs	r2, #17
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff feb7 	bl	8005254 <HAL_I2C_MasterTxCpltCallback>
}
 80054e6:	e01d      	b.n	8005524 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054f6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005506:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fe98 	bl	8005254 <HAL_I2C_MasterTxCpltCallback>
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005540:	2b00      	cmp	r3, #0
 8005542:	d11d      	bne.n	8005580 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10b      	bne.n	8005564 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005550:	b2da      	uxtb	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555c:	1c9a      	adds	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005562:	e06e      	b.n	8005642 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005568:	b29b      	uxth	r3, r3
 800556a:	121b      	asrs	r3, r3, #8
 800556c:	b2da      	uxtb	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800557e:	e060      	b.n	8005642 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005584:	2b01      	cmp	r3, #1
 8005586:	d10b      	bne.n	80055a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558c:	b2da      	uxtb	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800559e:	e050      	b.n	8005642 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d14c      	bne.n	8005642 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b22      	cmp	r3, #34	; 0x22
 80055ac:	d108      	bne.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	e040      	b.n	8005642 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d015      	beq.n	80055f6 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	2b21      	cmp	r3, #33	; 0x21
 80055ce:	d112      	bne.n	80055f6 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	781a      	ldrb	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055f4:	e025      	b.n	8005642 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d120      	bne.n	8005642 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b21      	cmp	r3, #33	; 0x21
 8005604:	d11d      	bne.n	8005642 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005614:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005624:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff fe49 	bl	80052d4 <HAL_I2C_MemTxCpltCallback>
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b22      	cmp	r3, #34	; 0x22
 800565c:	f040 80a2 	bne.w	80057a4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d921      	bls.n	80056b2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b03      	cmp	r3, #3
 800569c:	f040 8082 	bne.w	80057a4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ae:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80056b0:	e078      	b.n	80057a4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d074      	beq.n	80057a4 <I2C_MasterReceive_RXNE+0x15a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d002      	beq.n	80056c6 <I2C_MasterReceive_RXNE+0x7c>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d16e      	bne.n	80057a4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 f818 	bl	80066fc <I2C_WaitOnSTOPRequestThroughIT>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d142      	bne.n	8005758 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d10a      	bne.n	8005742 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fdd4 	bl	80052e8 <HAL_I2C_MemRxCpltCallback>
}
 8005740:	e030      	b.n	80057a4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2212      	movs	r2, #18
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff fd89 	bl	8005268 <HAL_I2C_MasterRxCpltCallback>
}
 8005756:	e025      	b.n	80057a4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005766:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fdac 	bl	80052fc <HAL_I2C_ErrorCallback>
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d11b      	bne.n	80057fc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80057fa:	e0bd      	b.n	8005978 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b03      	cmp	r3, #3
 8005804:	d129      	bne.n	800585a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005814:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b04      	cmp	r3, #4
 800581a:	d00a      	beq.n	8005832 <I2C_MasterReceive_BTF+0x86>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d007      	beq.n	8005832 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005830:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005858:	e08e      	b.n	8005978 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d176      	bne.n	8005952 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d002      	beq.n	8005870 <I2C_MasterReceive_BTF+0xc4>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b10      	cmp	r3, #16
 800586e:	d108      	bne.n	8005882 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e019      	b.n	80058b6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b04      	cmp	r3, #4
 8005886:	d002      	beq.n	800588e <I2C_MasterReceive_BTF+0xe2>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d108      	bne.n	80058a0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e00a      	b.n	80058b6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d007      	beq.n	80058b6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005910:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d10a      	bne.n	800593c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fcd7 	bl	80052e8 <HAL_I2C_MemRxCpltCallback>
}
 800593a:	e01d      	b.n	8005978 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2212      	movs	r2, #18
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fc8c 	bl	8005268 <HAL_I2C_MasterRxCpltCallback>
}
 8005950:	e012      	b.n	8005978 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d117      	bne.n	80059c4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059ac:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80059ae:	e067      	b.n	8005a80 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	611a      	str	r2, [r3, #16]
}
 80059c2:	e05d      	b.n	8005a80 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059cc:	d133      	bne.n	8005a36 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b21      	cmp	r3, #33	; 0x21
 80059d8:	d109      	bne.n	80059ee <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059ea:	611a      	str	r2, [r3, #16]
 80059ec:	e008      	b.n	8005a00 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f043 0301 	orr.w	r3, r3, #1
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <I2C_Master_SB+0x92>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d108      	bne.n	8005a24 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d032      	beq.n	8005a80 <I2C_Master_SB+0x100>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d02d      	beq.n	8005a80 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a32:	605a      	str	r2, [r3, #4]
}
 8005a34:	e024      	b.n	8005a80 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10e      	bne.n	8005a5c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	11db      	asrs	r3, r3, #7
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f003 0306 	and.w	r3, r3, #6
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f063 030f 	orn	r3, r3, #15
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	611a      	str	r2, [r3, #16]
}
 8005a5a:	e011      	b.n	8005a80 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d10d      	bne.n	8005a80 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	11db      	asrs	r3, r3, #7
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0306 	and.w	r3, r3, #6
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f063 030e 	orn	r3, r3, #14
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <I2C_Master_ADD10+0x24>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <I2C_Master_ADD10+0x38>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ad2:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b091      	sub	sp, #68	; 0x44
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b22      	cmp	r3, #34	; 0x22
 8005b08:	f040 8169 	bne.w	8005dde <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10f      	bne.n	8005b34 <I2C_Master_ADDR+0x54>
 8005b14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b18:	2b40      	cmp	r3, #64	; 0x40
 8005b1a:	d10b      	bne.n	8005b34 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	e160      	b.n	8005df6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11d      	bne.n	8005b78 <I2C_Master_ADDR+0x98>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b44:	d118      	bne.n	8005b78 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b46:	2300      	movs	r3, #0
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b6a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	651a      	str	r2, [r3, #80]	; 0x50
 8005b76:	e13e      	b.n	8005df6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d113      	bne.n	8005baa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b82:	2300      	movs	r3, #0
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e115      	b.n	8005dd6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	f040 808a 	bne.w	8005cca <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bbc:	d137      	bne.n	8005c2e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bcc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bdc:	d113      	bne.n	8005c06 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bec:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	e0e7      	b.n	8005dd6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c06:	2300      	movs	r3, #0
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	623b      	str	r3, [r7, #32]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e0d3      	b.n	8005dd6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d02e      	beq.n	8005c92 <I2C_Master_ADDR+0x1b2>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d02b      	beq.n	8005c92 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	2b12      	cmp	r3, #18
 8005c3e:	d102      	bne.n	8005c46 <I2C_Master_ADDR+0x166>
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d125      	bne.n	8005c92 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d00e      	beq.n	8005c6a <I2C_Master_ADDR+0x18a>
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d00b      	beq.n	8005c6a <I2C_Master_ADDR+0x18a>
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d008      	beq.n	8005c6a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e007      	b.n	8005c7a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c78:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	e0a1      	b.n	8005dd6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	e085      	b.n	8005dd6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d14d      	bne.n	8005d70 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d016      	beq.n	8005d08 <I2C_Master_ADDR+0x228>
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d013      	beq.n	8005d08 <I2C_Master_ADDR+0x228>
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d010      	beq.n	8005d08 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e007      	b.n	8005d18 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d16:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d26:	d117      	bne.n	8005d58 <I2C_Master_ADDR+0x278>
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d2e:	d00b      	beq.n	8005d48 <I2C_Master_ADDR+0x268>
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d008      	beq.n	8005d48 <I2C_Master_ADDR+0x268>
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d005      	beq.n	8005d48 <I2C_Master_ADDR+0x268>
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d002      	beq.n	8005d48 <I2C_Master_ADDR+0x268>
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d107      	bne.n	8005d58 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d56:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	e032      	b.n	8005dd6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d7e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d8e:	d117      	bne.n	8005dc0 <I2C_Master_ADDR+0x2e0>
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d96:	d00b      	beq.n	8005db0 <I2C_Master_ADDR+0x2d0>
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d008      	beq.n	8005db0 <I2C_Master_ADDR+0x2d0>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d005      	beq.n	8005db0 <I2C_Master_ADDR+0x2d0>
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d002      	beq.n	8005db0 <I2C_Master_ADDR+0x2d0>
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d107      	bne.n	8005dc0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dbe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005ddc:	e00b      	b.n	8005df6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	e7ff      	b.n	8005df6 <I2C_Master_ADDR+0x316>
 8005df6:	bf00      	nop
 8005df8:	3744      	adds	r7, #68	; 0x44
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d02b      	beq.n	8005e74 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d114      	bne.n	8005e74 <I2C_SlaveTransmit_TXE+0x72>
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b29      	cmp	r3, #41	; 0x29
 8005e4e:	d111      	bne.n	8005e74 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2221      	movs	r2, #33	; 0x21
 8005e64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2228      	movs	r2, #40	; 0x28
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fa04 	bl	800527c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d011      	beq.n	8005eb2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d02c      	beq.n	8005f32 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d114      	bne.n	8005f32 <I2C_SlaveReceive_RXNE+0x74>
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0c:	d111      	bne.n	8005f32 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2222      	movs	r2, #34	; 0x22
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2228      	movs	r2, #40	; 0x28
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff f9af 	bl	8005290 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d012      	beq.n	8005f72 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f98:	2b28      	cmp	r3, #40	; 0x28
 8005f9a:	d127      	bne.n	8005fec <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005faa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	089b      	lsrs	r3, r3, #2
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	09db      	lsrs	r3, r3, #7
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d103      	bne.n	8005fd0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	81bb      	strh	r3, [r7, #12]
 8005fce:	e002      	b.n	8005fd6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005fde:	89ba      	ldrh	r2, [r7, #12]
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff f95d 	bl	80052a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005fea:	e008      	b.n	8005ffe <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0202 	mvn.w	r2, #2
 8005ff4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006016:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006026:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006028:	2300      	movs	r3, #0
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006054:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006064:	d172      	bne.n	800614c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b22      	cmp	r3, #34	; 0x22
 800606a:	d002      	beq.n	8006072 <I2C_Slave_STOPF+0x6a>
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	2b2a      	cmp	r3, #42	; 0x2a
 8006070:	d135      	bne.n	80060de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f043 0204 	orr.w	r2, r3, #4
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fa18 	bl	80044e0 <HAL_DMA_GetState>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d049      	beq.n	800614a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	4a69      	ldr	r2, [pc, #420]	; (8006260 <I2C_Slave_STOPF+0x258>)
 80060bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe f860 	bl	8004188 <HAL_DMA_Abort_IT>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d03d      	beq.n	800614a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060dc:	e035      	b.n	800614a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d005      	beq.n	8006102 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	f043 0204 	orr.w	r2, r3, #4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006110:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe f9e2 	bl	80044e0 <HAL_DMA_GetState>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d014      	beq.n	800614c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	4a4e      	ldr	r2, [pc, #312]	; (8006260 <I2C_Slave_STOPF+0x258>)
 8006128:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe f82a 	bl	8004188 <HAL_DMA_Abort_IT>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d008      	beq.n	800614c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006144:	4610      	mov	r0, r2
 8006146:	4798      	blx	r3
 8006148:	e000      	b.n	800614c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800614a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d03e      	beq.n	80061d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b04      	cmp	r3, #4
 8006162:	d112      	bne.n	800618a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	2b40      	cmp	r3, #64	; 0x40
 8006196:	d112      	bne.n	80061be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f043 0204 	orr.w	r2, r3, #4
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8b3 	bl	8006348 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80061e2:	e039      	b.n	8006258 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b2a      	cmp	r3, #42	; 0x2a
 80061e8:	d109      	bne.n	80061fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2228      	movs	r2, #40	; 0x28
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff f849 	bl	8005290 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b28      	cmp	r3, #40	; 0x28
 8006208:	d111      	bne.n	800622e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a15      	ldr	r2, [pc, #84]	; (8006264 <I2C_Slave_STOPF+0x25c>)
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff f84a 	bl	80052c0 <HAL_I2C_ListenCpltCallback>
}
 800622c:	e014      	b.n	8006258 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	2b22      	cmp	r3, #34	; 0x22
 8006234:	d002      	beq.n	800623c <I2C_Slave_STOPF+0x234>
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	2b22      	cmp	r3, #34	; 0x22
 800623a:	d10d      	bne.n	8006258 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff f81c 	bl	8005290 <HAL_I2C_SlaveRxCpltCallback>
}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	080065ad 	.word	0x080065ad
 8006264:	ffff0000 	.word	0xffff0000

08006268 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d002      	beq.n	800628a <I2C_Slave_AF+0x22>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b20      	cmp	r3, #32
 8006288:	d129      	bne.n	80062de <I2C_Slave_AF+0x76>
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b28      	cmp	r3, #40	; 0x28
 800628e:	d126      	bne.n	80062de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a2c      	ldr	r2, [pc, #176]	; (8006344 <I2C_Slave_AF+0xdc>)
 8006294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fe fff2 	bl	80052c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80062dc:	e02e      	b.n	800633c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b21      	cmp	r3, #33	; 0x21
 80062e2:	d126      	bne.n	8006332 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a17      	ldr	r2, [pc, #92]	; (8006344 <I2C_Slave_AF+0xdc>)
 80062e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2221      	movs	r2, #33	; 0x21
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800630e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006318:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006328:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fe ffa6 	bl	800527c <HAL_I2C_SlaveTxCpltCallback>
}
 8006330:	e004      	b.n	800633c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800633a:	615a      	str	r2, [r3, #20]
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	ffff0000 	.word	0xffff0000

08006348 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006356:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800635e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	2b10      	cmp	r3, #16
 8006364:	d002      	beq.n	800636c <I2C_ITError+0x24>
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d10a      	bne.n	8006382 <I2C_ITError+0x3a>
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b22      	cmp	r3, #34	; 0x22
 8006370:	d107      	bne.n	8006382 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006380:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006388:	2b28      	cmp	r3, #40	; 0x28
 800638a:	d107      	bne.n	800639c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2228      	movs	r2, #40	; 0x28
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800639a:	e015      	b.n	80063c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063aa:	d00a      	beq.n	80063c2 <I2C_ITError+0x7a>
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	2b60      	cmp	r3, #96	; 0x60
 80063b0:	d007      	beq.n	80063c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d6:	d162      	bne.n	800649e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d020      	beq.n	8006438 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fa:	4a6a      	ldr	r2, [pc, #424]	; (80065a4 <I2C_ITError+0x25c>)
 80063fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	4618      	mov	r0, r3
 8006404:	f7fd fec0 	bl	8004188 <HAL_DMA_Abort_IT>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8089 	beq.w	8006522 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006432:	4610      	mov	r0, r2
 8006434:	4798      	blx	r3
 8006436:	e074      	b.n	8006522 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	4a59      	ldr	r2, [pc, #356]	; (80065a4 <I2C_ITError+0x25c>)
 800643e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	4618      	mov	r0, r3
 8006446:	f7fd fe9f 	bl	8004188 <HAL_DMA_Abort_IT>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d068      	beq.n	8006522 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d10b      	bne.n	8006476 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0201 	bic.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
 800649c:	e041      	b.n	8006522 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b60      	cmp	r3, #96	; 0x60
 80064a8:	d125      	bne.n	80064f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b40      	cmp	r3, #64	; 0x40
 80064c4:	d10b      	bne.n	80064de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0201 	bic.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fe ff0e 	bl	8005310 <HAL_I2C_AbortCpltCallback>
 80064f4:	e015      	b.n	8006522 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d10b      	bne.n	800651c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fe feed 	bl	80052fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10e      	bne.n	8006550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006538:	2b00      	cmp	r3, #0
 800653a:	d109      	bne.n	8006550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800655e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006566:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b04      	cmp	r3, #4
 8006572:	d113      	bne.n	800659c <I2C_ITError+0x254>
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	2b28      	cmp	r3, #40	; 0x28
 8006578:	d110      	bne.n	800659c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <I2C_ITError+0x260>)
 800657e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fe fe92 	bl	80052c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	080065ad 	.word	0x080065ad
 80065a8:	ffff0000 	.word	0xffff0000

080065ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80065c6:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <I2C_DMAAbort+0x148>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	08db      	lsrs	r3, r3, #3
 80065cc:	4a4a      	ldr	r2, [pc, #296]	; (80066f8 <I2C_DMAAbort+0x14c>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	0a1a      	lsrs	r2, r3, #8
 80065d4:	4613      	mov	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	00da      	lsls	r2, r3, #3
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80065f2:	e00a      	b.n	800660a <I2C_DMAAbort+0x5e>
    }
    count--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006608:	d0ea      	beq.n	80065e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006616:	2200      	movs	r2, #0
 8006618:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	2200      	movs	r2, #0
 8006628:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006638:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2200      	movs	r2, #0
 800663e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	2200      	movs	r2, #0
 800664e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	2200      	movs	r2, #0
 800665e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b60      	cmp	r3, #96	; 0x60
 800667a:	d10e      	bne.n	800669a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2200      	movs	r2, #0
 8006690:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006692:	6978      	ldr	r0, [r7, #20]
 8006694:	f7fe fe3c 	bl	8005310 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006698:	e027      	b.n	80066ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800669a:	7cfb      	ldrb	r3, [r7, #19]
 800669c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066a0:	2b28      	cmp	r3, #40	; 0x28
 80066a2:	d117      	bne.n	80066d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2228      	movs	r2, #40	; 0x28
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066d2:	e007      	b.n	80066e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80066e4:	6978      	ldr	r0, [r7, #20]
 80066e6:	f7fe fe09 	bl	80052fc <HAL_I2C_ErrorCallback>
}
 80066ea:	bf00      	nop
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	2000002c 	.word	0x2000002c
 80066f8:	14f8b589 	.word	0x14f8b589

080066fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006708:	4b13      	ldr	r3, [pc, #76]	; (8006758 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	08db      	lsrs	r3, r3, #3
 800670e:	4a13      	ldr	r2, [pc, #76]	; (800675c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	0a1a      	lsrs	r2, r3, #8
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3b01      	subs	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d107      	bne.n	800673a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e008      	b.n	800674c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006748:	d0e9      	beq.n	800671e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	2000002c 	.word	0x2000002c
 800675c:	14f8b589 	.word	0x14f8b589

08006760 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006770:	d103      	bne.n	800677a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006778:	e007      	b.n	800678a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006782:	d102      	bne.n	800678a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2208      	movs	r2, #8
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e25e      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d075      	beq.n	80068a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067b6:	4b88      	ldr	r3, [pc, #544]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d00c      	beq.n	80067dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067c2:	4b85      	ldr	r3, [pc, #532]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d112      	bne.n	80067f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ce:	4b82      	ldr	r3, [pc, #520]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067da:	d10b      	bne.n	80067f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067dc:	4b7e      	ldr	r3, [pc, #504]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d05b      	beq.n	80068a0 <HAL_RCC_OscConfig+0x108>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d157      	bne.n	80068a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e239      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fc:	d106      	bne.n	800680c <HAL_RCC_OscConfig+0x74>
 80067fe:	4b76      	ldr	r3, [pc, #472]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a75      	ldr	r2, [pc, #468]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e01d      	b.n	8006848 <HAL_RCC_OscConfig+0xb0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006814:	d10c      	bne.n	8006830 <HAL_RCC_OscConfig+0x98>
 8006816:	4b70      	ldr	r3, [pc, #448]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a6f      	ldr	r2, [pc, #444]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800681c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	4b6d      	ldr	r3, [pc, #436]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a6c      	ldr	r2, [pc, #432]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e00b      	b.n	8006848 <HAL_RCC_OscConfig+0xb0>
 8006830:	4b69      	ldr	r3, [pc, #420]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a68      	ldr	r2, [pc, #416]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	4b66      	ldr	r3, [pc, #408]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a65      	ldr	r2, [pc, #404]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d013      	beq.n	8006878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006850:	f7fd fa52 	bl	8003cf8 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006858:	f7fd fa4e 	bl	8003cf8 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b64      	cmp	r3, #100	; 0x64
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e1fe      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686a:	4b5b      	ldr	r3, [pc, #364]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0f0      	beq.n	8006858 <HAL_RCC_OscConfig+0xc0>
 8006876:	e014      	b.n	80068a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006878:	f7fd fa3e 	bl	8003cf8 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006880:	f7fd fa3a 	bl	8003cf8 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b64      	cmp	r3, #100	; 0x64
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e1ea      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006892:	4b51      	ldr	r3, [pc, #324]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0xe8>
 800689e:	e000      	b.n	80068a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d063      	beq.n	8006976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ae:	4b4a      	ldr	r3, [pc, #296]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ba:	4b47      	ldr	r3, [pc, #284]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d11c      	bne.n	8006900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068c6:	4b44      	ldr	r3, [pc, #272]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d116      	bne.n	8006900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068d2:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_RCC_OscConfig+0x152>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d001      	beq.n	80068ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e1be      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ea:	4b3b      	ldr	r3, [pc, #236]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4937      	ldr	r1, [pc, #220]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068fe:	e03a      	b.n	8006976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d020      	beq.n	800694a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006908:	4b34      	ldr	r3, [pc, #208]	; (80069dc <HAL_RCC_OscConfig+0x244>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690e:	f7fd f9f3 	bl	8003cf8 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006916:	f7fd f9ef 	bl	8003cf8 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e19f      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006928:	4b2b      	ldr	r3, [pc, #172]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f0      	beq.n	8006916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006934:	4b28      	ldr	r3, [pc, #160]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	4925      	ldr	r1, [pc, #148]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006944:	4313      	orrs	r3, r2
 8006946:	600b      	str	r3, [r1, #0]
 8006948:	e015      	b.n	8006976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <HAL_RCC_OscConfig+0x244>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006950:	f7fd f9d2 	bl	8003cf8 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006958:	f7fd f9ce 	bl	8003cf8 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e17e      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f0      	bne.n	8006958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d036      	beq.n	80069f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d016      	beq.n	80069b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <HAL_RCC_OscConfig+0x248>)
 800698c:	2201      	movs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006990:	f7fd f9b2 	bl	8003cf8 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006998:	f7fd f9ae 	bl	8003cf8 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e15e      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80069ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f0      	beq.n	8006998 <HAL_RCC_OscConfig+0x200>
 80069b6:	e01b      	b.n	80069f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <HAL_RCC_OscConfig+0x248>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069be:	f7fd f99b 	bl	8003cf8 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c4:	e00e      	b.n	80069e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069c6:	f7fd f997 	bl	8003cf8 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d907      	bls.n	80069e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e147      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
 80069d8:	40023800 	.word	0x40023800
 80069dc:	42470000 	.word	0x42470000
 80069e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069e4:	4b88      	ldr	r3, [pc, #544]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 80069e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1ea      	bne.n	80069c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8097 	beq.w	8006b2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069fe:	2300      	movs	r3, #0
 8006a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a02:	4b81      	ldr	r3, [pc, #516]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10f      	bne.n	8006a2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	4b7d      	ldr	r3, [pc, #500]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	4a7c      	ldr	r2, [pc, #496]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a1e:	4b7a      	ldr	r3, [pc, #488]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a26:	60bb      	str	r3, [r7, #8]
 8006a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2e:	4b77      	ldr	r3, [pc, #476]	; (8006c0c <HAL_RCC_OscConfig+0x474>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d118      	bne.n	8006a6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a3a:	4b74      	ldr	r3, [pc, #464]	; (8006c0c <HAL_RCC_OscConfig+0x474>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a73      	ldr	r2, [pc, #460]	; (8006c0c <HAL_RCC_OscConfig+0x474>)
 8006a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a46:	f7fd f957 	bl	8003cf8 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4e:	f7fd f953 	bl	8003cf8 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e103      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a60:	4b6a      	ldr	r3, [pc, #424]	; (8006c0c <HAL_RCC_OscConfig+0x474>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0f0      	beq.n	8006a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d106      	bne.n	8006a82 <HAL_RCC_OscConfig+0x2ea>
 8006a74:	4b64      	ldr	r3, [pc, #400]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a78:	4a63      	ldr	r2, [pc, #396]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a7a:	f043 0301 	orr.w	r3, r3, #1
 8006a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a80:	e01c      	b.n	8006abc <HAL_RCC_OscConfig+0x324>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x30c>
 8006a8a:	4b5f      	ldr	r3, [pc, #380]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	4a5e      	ldr	r2, [pc, #376]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a90:	f043 0304 	orr.w	r3, r3, #4
 8006a94:	6713      	str	r3, [r2, #112]	; 0x70
 8006a96:	4b5c      	ldr	r3, [pc, #368]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	4a5b      	ldr	r2, [pc, #364]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8006aa2:	e00b      	b.n	8006abc <HAL_RCC_OscConfig+0x324>
 8006aa4:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa8:	4a57      	ldr	r2, [pc, #348]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab0:	4b55      	ldr	r3, [pc, #340]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab4:	4a54      	ldr	r2, [pc, #336]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	f023 0304 	bic.w	r3, r3, #4
 8006aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d015      	beq.n	8006af0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac4:	f7fd f918 	bl	8003cf8 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aca:	e00a      	b.n	8006ae2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006acc:	f7fd f914 	bl	8003cf8 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e0c2      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae2:	4b49      	ldr	r3, [pc, #292]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0ee      	beq.n	8006acc <HAL_RCC_OscConfig+0x334>
 8006aee:	e014      	b.n	8006b1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af0:	f7fd f902 	bl	8003cf8 <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af6:	e00a      	b.n	8006b0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006af8:	f7fd f8fe 	bl	8003cf8 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e0ac      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b0e:	4b3e      	ldr	r3, [pc, #248]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1ee      	bne.n	8006af8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d105      	bne.n	8006b2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b20:	4b39      	ldr	r3, [pc, #228]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	4a38      	ldr	r2, [pc, #224]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8098 	beq.w	8006c66 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b36:	4b34      	ldr	r3, [pc, #208]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d05c      	beq.n	8006bfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d141      	bne.n	8006bce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4a:	4b31      	ldr	r3, [pc, #196]	; (8006c10 <HAL_RCC_OscConfig+0x478>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b50:	f7fd f8d2 	bl	8003cf8 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b58:	f7fd f8ce 	bl	8003cf8 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e07e      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6a:	4b27      	ldr	r3, [pc, #156]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1f0      	bne.n	8006b58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69da      	ldr	r2, [r3, #28]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	041b      	lsls	r3, r3, #16
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	491b      	ldr	r1, [pc, #108]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ba0:	4b1b      	ldr	r3, [pc, #108]	; (8006c10 <HAL_RCC_OscConfig+0x478>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba6:	f7fd f8a7 	bl	8003cf8 <HAL_GetTick>
 8006baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bae:	f7fd f8a3 	bl	8003cf8 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e053      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0f0      	beq.n	8006bae <HAL_RCC_OscConfig+0x416>
 8006bcc:	e04b      	b.n	8006c66 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bce:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <HAL_RCC_OscConfig+0x478>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd4:	f7fd f890 	bl	8003cf8 <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bdc:	f7fd f88c 	bl	8003cf8 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e03c      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bee:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1f0      	bne.n	8006bdc <HAL_RCC_OscConfig+0x444>
 8006bfa:	e034      	b.n	8006c66 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d107      	bne.n	8006c14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e02f      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	40007000 	.word	0x40007000
 8006c10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c14:	4b16      	ldr	r3, [pc, #88]	; (8006c70 <HAL_RCC_OscConfig+0x4d8>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d11c      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d115      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d10d      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d106      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d001      	beq.n	8006c66 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40023800 	.word	0x40023800

08006c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0cc      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c88:	4b68      	ldr	r3, [pc, #416]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d90c      	bls.n	8006cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c96:	4b65      	ldr	r3, [pc, #404]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9e:	4b63      	ldr	r3, [pc, #396]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0b8      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d020      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cc8:	4b59      	ldr	r3, [pc, #356]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4a58      	ldr	r2, [pc, #352]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ce0:	4b53      	ldr	r3, [pc, #332]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4a52      	ldr	r2, [pc, #328]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cec:	4b50      	ldr	r3, [pc, #320]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	494d      	ldr	r1, [pc, #308]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d044      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d107      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d12:	4b47      	ldr	r3, [pc, #284]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d119      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e07f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d003      	beq.n	8006d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d107      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d32:	4b3f      	ldr	r3, [pc, #252]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e06f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d42:	4b3b      	ldr	r3, [pc, #236]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e067      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d52:	4b37      	ldr	r3, [pc, #220]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f023 0203 	bic.w	r2, r3, #3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4934      	ldr	r1, [pc, #208]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d64:	f7fc ffc8 	bl	8003cf8 <HAL_GetTick>
 8006d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6a:	e00a      	b.n	8006d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d6c:	f7fc ffc4 	bl	8003cf8 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e04f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	4b2b      	ldr	r3, [pc, #172]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 020c 	and.w	r2, r3, #12
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d1eb      	bne.n	8006d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d94:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d20c      	bcs.n	8006dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da2:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	4b20      	ldr	r3, [pc, #128]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e032      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dc8:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4916      	ldr	r1, [pc, #88]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006de6:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	490e      	ldr	r1, [pc, #56]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dfa:	f000 f821 	bl	8006e40 <HAL_RCC_GetSysClockFreq>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	490a      	ldr	r1, [pc, #40]	; (8006e34 <HAL_RCC_ClockConfig+0x1c0>)
 8006e0c:	5ccb      	ldrb	r3, [r1, r3]
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <HAL_RCC_ClockConfig+0x1c4>)
 8006e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <HAL_RCC_ClockConfig+0x1c8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fc ff28 	bl	8003c70 <HAL_InitTick>

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40023c00 	.word	0x40023c00
 8006e30:	40023800 	.word	0x40023800
 8006e34:	08009560 	.word	0x08009560
 8006e38:	2000002c 	.word	0x2000002c
 8006e3c:	20000030 	.word	0x20000030

08006e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e44:	b094      	sub	sp, #80	; 0x50
 8006e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e50:	2300      	movs	r3, #0
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e58:	4b79      	ldr	r3, [pc, #484]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 030c 	and.w	r3, r3, #12
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d00d      	beq.n	8006e80 <HAL_RCC_GetSysClockFreq+0x40>
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	f200 80e1 	bhi.w	800702c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <HAL_RCC_GetSysClockFreq+0x34>
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d003      	beq.n	8006e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e72:	e0db      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e74:	4b73      	ldr	r3, [pc, #460]	; (8007044 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e78:	e0db      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e7a:	4b73      	ldr	r3, [pc, #460]	; (8007048 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e7e:	e0d8      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e80:	4b6f      	ldr	r3, [pc, #444]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e8a:	4b6d      	ldr	r3, [pc, #436]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d063      	beq.n	8006f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e96:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	099b      	lsrs	r3, r3, #6
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
 8006eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	462b      	mov	r3, r5
 8006eb6:	f04f 0000 	mov.w	r0, #0
 8006eba:	f04f 0100 	mov.w	r1, #0
 8006ebe:	0159      	lsls	r1, r3, #5
 8006ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ec4:	0150      	lsls	r0, r2, #5
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4621      	mov	r1, r4
 8006ecc:	1a51      	subs	r1, r2, r1
 8006ece:	6139      	str	r1, [r7, #16]
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	018b      	lsls	r3, r1, #6
 8006ee8:	4651      	mov	r1, sl
 8006eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eee:	4651      	mov	r1, sl
 8006ef0:	018a      	lsls	r2, r1, #6
 8006ef2:	4651      	mov	r1, sl
 8006ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ef8:	4659      	mov	r1, fp
 8006efa:	eb63 0901 	sbc.w	r9, r3, r1
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f12:	4690      	mov	r8, r2
 8006f14:	4699      	mov	r9, r3
 8006f16:	4623      	mov	r3, r4
 8006f18:	eb18 0303 	adds.w	r3, r8, r3
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	462b      	mov	r3, r5
 8006f20:	eb49 0303 	adc.w	r3, r9, r3
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f32:	4629      	mov	r1, r5
 8006f34:	024b      	lsls	r3, r1, #9
 8006f36:	4621      	mov	r1, r4
 8006f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	024a      	lsls	r2, r1, #9
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f46:	2200      	movs	r2, #0
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f50:	f7f9 ff0c 	bl	8000d6c <__aeabi_uldivmod>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4613      	mov	r3, r2
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5c:	e058      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f5e:	4b38      	ldr	r3, [pc, #224]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	2200      	movs	r2, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	4611      	mov	r1, r2
 8006f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f6e:	623b      	str	r3, [r7, #32]
 8006f70:	2300      	movs	r3, #0
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
 8006f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	f04f 0000 	mov.w	r0, #0
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	0159      	lsls	r1, r3, #5
 8006f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f8a:	0150      	lsls	r0, r2, #5
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4641      	mov	r1, r8
 8006f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f96:	4649      	mov	r1, r9
 8006f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8006fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	00eb      	lsls	r3, r5, #3
 8006fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fc6:	00e2      	lsls	r2, r4, #3
 8006fc8:	4614      	mov	r4, r2
 8006fca:	461d      	mov	r5, r3
 8006fcc:	4643      	mov	r3, r8
 8006fce:	18e3      	adds	r3, r4, r3
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	eb45 0303 	adc.w	r3, r5, r3
 8006fd8:	607b      	str	r3, [r7, #4]
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	028b      	lsls	r3, r1, #10
 8006fea:	4621      	mov	r1, r4
 8006fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	028a      	lsls	r2, r1, #10
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	61fa      	str	r2, [r7, #28]
 8007000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007004:	f7f9 feb2 	bl	8000d6c <__aeabi_uldivmod>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4613      	mov	r3, r2
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	3301      	adds	r3, #1
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800702a:	e002      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_RCC_GetSysClockFreq+0x204>)
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007034:	4618      	mov	r0, r3
 8007036:	3750      	adds	r7, #80	; 0x50
 8007038:	46bd      	mov	sp, r7
 800703a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800703e:	bf00      	nop
 8007040:	40023800 	.word	0x40023800
 8007044:	00f42400 	.word	0x00f42400
 8007048:	007a1200 	.word	0x007a1200

0800704c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007050:	4b03      	ldr	r3, [pc, #12]	; (8007060 <HAL_RCC_GetHCLKFreq+0x14>)
 8007052:	681b      	ldr	r3, [r3, #0]
}
 8007054:	4618      	mov	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	2000002c 	.word	0x2000002c

08007064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007068:	f7ff fff0 	bl	800704c <HAL_RCC_GetHCLKFreq>
 800706c:	4602      	mov	r2, r0
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	0a9b      	lsrs	r3, r3, #10
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	4903      	ldr	r1, [pc, #12]	; (8007088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007080:	4618      	mov	r0, r3
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40023800 	.word	0x40023800
 8007088:	08009570 	.word	0x08009570

0800708c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007090:	f7ff ffdc 	bl	800704c <HAL_RCC_GetHCLKFreq>
 8007094:	4602      	mov	r2, r0
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	0b5b      	lsrs	r3, r3, #13
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	4903      	ldr	r1, [pc, #12]	; (80070b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070a2:	5ccb      	ldrb	r3, [r1, r3]
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40023800 	.word	0x40023800
 80070b0:	08009570 	.word	0x08009570

080070b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e01d      	b.n	8007102 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fc fbb0 	bl	8003840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f000 fc18 	bl	8007928 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0201 	orr.w	r2, r2, #1
 8007120:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b06      	cmp	r3, #6
 8007132:	d007      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e01d      	b.n	80071a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f815 	bl	80071a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f000 fbc9 	bl	8007928 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2201      	movs	r2, #1
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fe50 	bl	8007e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a10      	ldr	r2, [pc, #64]	; (800721c <HAL_TIM_PWM_Start+0x60>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d107      	bne.n	80071ee <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b06      	cmp	r3, #6
 80071fe:	d007      	beq.n	8007210 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40010000 	.word	0x40010000

08007220 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e083      	b.n	800733c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7fc fab1 	bl	80037b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007264:	f023 0307 	bic.w	r3, r3, #7
 8007268:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3304      	adds	r3, #4
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f000 fb57 	bl	8007928 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	4313      	orrs	r3, r2
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80072c0:	f023 030c 	bic.w	r3, r3, #12
 80072c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	4313      	orrs	r3, r2
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	011a      	lsls	r2, r3, #4
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	031b      	lsls	r3, r3, #12
 80072f0:	4313      	orrs	r3, r2
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80072fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007306:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	4313      	orrs	r3, r2
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_TIM_Encoder_Start+0x18>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b04      	cmp	r3, #4
 8007358:	d008      	beq.n	800736c <HAL_TIM_Encoder_Start+0x28>
 800735a:	e00f      	b.n	800737c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2201      	movs	r2, #1
 8007362:	2100      	movs	r1, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fd85 	bl	8007e74 <TIM_CCxChannelCmd>
      break;
 800736a:	e016      	b.n	800739a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2201      	movs	r2, #1
 8007372:	2104      	movs	r1, #4
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fd7d 	bl	8007e74 <TIM_CCxChannelCmd>
      break;
 800737a:	e00e      	b.n	800739a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2201      	movs	r2, #1
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fd75 	bl	8007e74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2201      	movs	r2, #1
 8007390:	2104      	movs	r1, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fd6e 	bl	8007e74 <TIM_CCxChannelCmd>
      break;
 8007398:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f042 0201 	orr.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d122      	bne.n	8007410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d11b      	bne.n	8007410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0202 	mvn.w	r2, #2
 80073e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa78 	bl	80078ec <HAL_TIM_IC_CaptureCallback>
 80073fc:	e005      	b.n	800740a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa6a 	bl	80078d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fa7b 	bl	8007900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b04      	cmp	r3, #4
 800741c:	d122      	bne.n	8007464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b04      	cmp	r3, #4
 800742a:	d11b      	bne.n	8007464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0204 	mvn.w	r2, #4
 8007434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa4e 	bl	80078ec <HAL_TIM_IC_CaptureCallback>
 8007450:	e005      	b.n	800745e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa40 	bl	80078d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fa51 	bl	8007900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0308 	and.w	r3, r3, #8
 800746e:	2b08      	cmp	r3, #8
 8007470:	d122      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b08      	cmp	r3, #8
 800747e:	d11b      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0208 	mvn.w	r2, #8
 8007488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fa24 	bl	80078ec <HAL_TIM_IC_CaptureCallback>
 80074a4:	e005      	b.n	80074b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa16 	bl	80078d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fa27 	bl	8007900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b10      	cmp	r3, #16
 80074c4:	d122      	bne.n	800750c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 0310 	and.w	r3, r3, #16
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	d11b      	bne.n	800750c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0210 	mvn.w	r2, #16
 80074dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2208      	movs	r2, #8
 80074e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9fa 	bl	80078ec <HAL_TIM_IC_CaptureCallback>
 80074f8:	e005      	b.n	8007506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9ec 	bl	80078d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f9fd 	bl	8007900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b01      	cmp	r3, #1
 8007518:	d10e      	bne.n	8007538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b01      	cmp	r3, #1
 8007526:	d107      	bne.n	8007538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0201 	mvn.w	r2, #1
 8007530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fc f882 	bl	800363c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b80      	cmp	r3, #128	; 0x80
 8007544:	d10e      	bne.n	8007564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007550:	2b80      	cmp	r3, #128	; 0x80
 8007552:	d107      	bne.n	8007564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800755c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fd26 	bl	8007fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d10e      	bne.n	8007590 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d107      	bne.n	8007590 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f9c2 	bl	8007914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b20      	cmp	r3, #32
 800759c:	d10e      	bne.n	80075bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d107      	bne.n	80075bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0220 	mvn.w	r2, #32
 80075b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fcf0 	bl	8007f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075da:	2302      	movs	r3, #2
 80075dc:	e0b4      	b.n	8007748 <HAL_TIM_PWM_ConfigChannel+0x184>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2202      	movs	r2, #2
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b0c      	cmp	r3, #12
 80075f2:	f200 809f 	bhi.w	8007734 <HAL_TIM_PWM_ConfigChannel+0x170>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007631 	.word	0x08007631
 8007600:	08007735 	.word	0x08007735
 8007604:	08007735 	.word	0x08007735
 8007608:	08007735 	.word	0x08007735
 800760c:	08007671 	.word	0x08007671
 8007610:	08007735 	.word	0x08007735
 8007614:	08007735 	.word	0x08007735
 8007618:	08007735 	.word	0x08007735
 800761c:	080076b3 	.word	0x080076b3
 8007620:	08007735 	.word	0x08007735
 8007624:	08007735 	.word	0x08007735
 8007628:	08007735 	.word	0x08007735
 800762c:	080076f3 	.word	0x080076f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f9f6 	bl	8007a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0208 	orr.w	r2, r2, #8
 800764a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0204 	bic.w	r2, r2, #4
 800765a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6999      	ldr	r1, [r3, #24]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	619a      	str	r2, [r3, #24]
      break;
 800766e:	e062      	b.n	8007736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fa3c 	bl	8007af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800768a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800769a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6999      	ldr	r1, [r3, #24]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	021a      	lsls	r2, r3, #8
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	619a      	str	r2, [r3, #24]
      break;
 80076b0:	e041      	b.n	8007736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68b9      	ldr	r1, [r7, #8]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 fa87 	bl	8007bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0208 	orr.w	r2, r2, #8
 80076cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0204 	bic.w	r2, r2, #4
 80076dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69d9      	ldr	r1, [r3, #28]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	61da      	str	r2, [r3, #28]
      break;
 80076f0:	e021      	b.n	8007736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fad1 	bl	8007ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800770c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800771c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69d9      	ldr	r1, [r3, #28]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	021a      	lsls	r2, r3, #8
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	61da      	str	r2, [r3, #28]
      break;
 8007732:	e000      	b.n	8007736 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007734:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_TIM_ConfigClockSource+0x18>
 8007764:	2302      	movs	r3, #2
 8007766:	e0b3      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x180>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800778e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a0:	d03e      	beq.n	8007820 <HAL_TIM_ConfigClockSource+0xd0>
 80077a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a6:	f200 8087 	bhi.w	80078b8 <HAL_TIM_ConfigClockSource+0x168>
 80077aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ae:	f000 8085 	beq.w	80078bc <HAL_TIM_ConfigClockSource+0x16c>
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b6:	d87f      	bhi.n	80078b8 <HAL_TIM_ConfigClockSource+0x168>
 80077b8:	2b70      	cmp	r3, #112	; 0x70
 80077ba:	d01a      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0xa2>
 80077bc:	2b70      	cmp	r3, #112	; 0x70
 80077be:	d87b      	bhi.n	80078b8 <HAL_TIM_ConfigClockSource+0x168>
 80077c0:	2b60      	cmp	r3, #96	; 0x60
 80077c2:	d050      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0x116>
 80077c4:	2b60      	cmp	r3, #96	; 0x60
 80077c6:	d877      	bhi.n	80078b8 <HAL_TIM_ConfigClockSource+0x168>
 80077c8:	2b50      	cmp	r3, #80	; 0x50
 80077ca:	d03c      	beq.n	8007846 <HAL_TIM_ConfigClockSource+0xf6>
 80077cc:	2b50      	cmp	r3, #80	; 0x50
 80077ce:	d873      	bhi.n	80078b8 <HAL_TIM_ConfigClockSource+0x168>
 80077d0:	2b40      	cmp	r3, #64	; 0x40
 80077d2:	d058      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0x136>
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	d86f      	bhi.n	80078b8 <HAL_TIM_ConfigClockSource+0x168>
 80077d8:	2b30      	cmp	r3, #48	; 0x30
 80077da:	d064      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x156>
 80077dc:	2b30      	cmp	r3, #48	; 0x30
 80077de:	d86b      	bhi.n	80078b8 <HAL_TIM_ConfigClockSource+0x168>
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d060      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x156>
 80077e4:	2b20      	cmp	r3, #32
 80077e6:	d867      	bhi.n	80078b8 <HAL_TIM_ConfigClockSource+0x168>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d05c      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x156>
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d05a      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80077f0:	e062      	b.n	80078b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6899      	ldr	r1, [r3, #8]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f000 fb17 	bl	8007e34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007814:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	609a      	str	r2, [r3, #8]
      break;
 800781e:	e04e      	b.n	80078be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	6899      	ldr	r1, [r3, #8]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f000 fb00 	bl	8007e34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007842:	609a      	str	r2, [r3, #8]
      break;
 8007844:	e03b      	b.n	80078be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	6859      	ldr	r1, [r3, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	461a      	mov	r2, r3
 8007854:	f000 fa74 	bl	8007d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2150      	movs	r1, #80	; 0x50
 800785e:	4618      	mov	r0, r3
 8007860:	f000 facd 	bl	8007dfe <TIM_ITRx_SetConfig>
      break;
 8007864:	e02b      	b.n	80078be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6859      	ldr	r1, [r3, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	461a      	mov	r2, r3
 8007874:	f000 fa93 	bl	8007d9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2160      	movs	r1, #96	; 0x60
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fabd 	bl	8007dfe <TIM_ITRx_SetConfig>
      break;
 8007884:	e01b      	b.n	80078be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6859      	ldr	r1, [r3, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	461a      	mov	r2, r3
 8007894:	f000 fa54 	bl	8007d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2140      	movs	r1, #64	; 0x40
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 faad 	bl	8007dfe <TIM_ITRx_SetConfig>
      break;
 80078a4:	e00b      	b.n	80078be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f000 faa4 	bl	8007dfe <TIM_ITRx_SetConfig>
      break;
 80078b6:	e002      	b.n	80078be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a34      	ldr	r2, [pc, #208]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00f      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007946:	d00b      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a31      	ldr	r2, [pc, #196]	; (8007a10 <TIM_Base_SetConfig+0xe8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d007      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a30      	ldr	r2, [pc, #192]	; (8007a14 <TIM_Base_SetConfig+0xec>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d003      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a2f      	ldr	r2, [pc, #188]	; (8007a18 <TIM_Base_SetConfig+0xf0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d108      	bne.n	8007972 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01b      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007980:	d017      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <TIM_Base_SetConfig+0xe8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_Base_SetConfig+0xec>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_Base_SetConfig+0xf0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1f      	ldr	r2, [pc, #124]	; (8007a1c <TIM_Base_SetConfig+0xf4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <TIM_Base_SetConfig+0xf8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <TIM_Base_SetConfig+0xfc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d108      	bne.n	80079c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a08      	ldr	r2, [pc, #32]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d103      	bne.n	80079f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	615a      	str	r2, [r3, #20]
}
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800
 8007a18:	40000c00 	.word	0x40000c00
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0201 	bic.w	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 0302 	bic.w	r3, r3, #2
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	; (8007af0 <TIM_OC1_SetConfig+0xc8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d10c      	bne.n	8007a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0308 	bic.w	r3, r3, #8
 8007a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f023 0304 	bic.w	r3, r3, #4
 8007a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <TIM_OC1_SetConfig+0xc8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d111      	bne.n	8007aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	621a      	str	r2, [r3, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	40010000 	.word	0x40010000

08007af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f023 0210 	bic.w	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0320 	bic.w	r3, r3, #32
 8007b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a1e      	ldr	r2, [pc, #120]	; (8007bc8 <TIM_OC2_SetConfig+0xd4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10d      	bne.n	8007b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <TIM_OC2_SetConfig+0xd4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d113      	bne.n	8007ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	621a      	str	r2, [r3, #32]
}
 8007bba:	bf00      	nop
 8007bbc:	371c      	adds	r7, #28
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40010000 	.word	0x40010000

08007bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0303 	bic.w	r3, r3, #3
 8007c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1d      	ldr	r2, [pc, #116]	; (8007c9c <TIM_OC3_SetConfig+0xd0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d10d      	bne.n	8007c46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a14      	ldr	r2, [pc, #80]	; (8007c9c <TIM_OC3_SetConfig+0xd0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d113      	bne.n	8007c76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	011b      	lsls	r3, r3, #4
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	621a      	str	r2, [r3, #32]
}
 8007c90:	bf00      	nop
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	40010000 	.word	0x40010000

08007ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	031b      	lsls	r3, r3, #12
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <TIM_OC4_SetConfig+0x9c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d109      	bne.n	8007d14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	019b      	lsls	r3, r3, #6
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000

08007d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f023 030a 	bic.w	r3, r3, #10
 8007d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b087      	sub	sp, #28
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f023 0210 	bic.w	r2, r3, #16
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	031b      	lsls	r3, r3, #12
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f043 0307 	orr.w	r3, r3, #7
 8007e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	609a      	str	r2, [r3, #8]
}
 8007e28:	bf00      	nop
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	609a      	str	r2, [r3, #8]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	2201      	movs	r2, #1
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1a      	ldr	r2, [r3, #32]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	43db      	mvns	r3, r3
 8007e96:	401a      	ands	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a1a      	ldr	r2, [r3, #32]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8007eac:	431a      	orrs	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e050      	b.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a1c      	ldr	r2, [pc, #112]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d018      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f24:	d013      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a18      	ldr	r2, [pc, #96]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00e      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a16      	ldr	r2, [pc, #88]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d009      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a15      	ldr	r2, [pc, #84]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d004      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a13      	ldr	r2, [pc, #76]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d10c      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40010000 	.word	0x40010000
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40000c00 	.word	0x40000c00
 8007f98:	40014000 	.word	0x40014000

08007f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e03f      	b.n	8008056 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d106      	bne.n	8007ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7fb fcf8 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2224      	movs	r2, #36	; 0x24
 8007ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fcbd 	bl	8008988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800801c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	695a      	ldr	r2, [r3, #20]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800802c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800803c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b088      	sub	sp, #32
 8008062:	af02      	add	r7, sp, #8
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	603b      	str	r3, [r7, #0]
 800806a:	4613      	mov	r3, r2
 800806c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b20      	cmp	r3, #32
 800807c:	f040 8083 	bne.w	8008186 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <HAL_UART_Transmit+0x2e>
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e07b      	b.n	8008188 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_UART_Transmit+0x40>
 800809a:	2302      	movs	r3, #2
 800809c:	e074      	b.n	8008188 <HAL_UART_Transmit+0x12a>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2221      	movs	r2, #33	; 0x21
 80080b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80080b4:	f7fb fe20 	bl	8003cf8 <HAL_GetTick>
 80080b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	88fa      	ldrh	r2, [r7, #6]
 80080be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	88fa      	ldrh	r2, [r7, #6]
 80080c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80080ce:	e042      	b.n	8008156 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e6:	d122      	bne.n	800812e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2200      	movs	r2, #0
 80080f0:	2180      	movs	r1, #128	; 0x80
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fac6 	bl	8008684 <UART_WaitOnFlagUntilTimeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e042      	b.n	8008188 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008114:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d103      	bne.n	8008126 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	3302      	adds	r3, #2
 8008122:	60bb      	str	r3, [r7, #8]
 8008124:	e017      	b.n	8008156 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	3301      	adds	r3, #1
 800812a:	60bb      	str	r3, [r7, #8]
 800812c:	e013      	b.n	8008156 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2200      	movs	r2, #0
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 faa3 	bl	8008684 <UART_WaitOnFlagUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e01f      	b.n	8008188 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	60ba      	str	r2, [r7, #8]
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1b7      	bne.n	80080d0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2200      	movs	r2, #0
 8008168:	2140      	movs	r1, #64	; 0x40
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fa8a 	bl	8008684 <UART_WaitOnFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e006      	b.n	8008188 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	e000      	b.n	8008188 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008186:	2302      	movs	r3, #2
  }
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	4613      	mov	r3, r2
 800819c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d130      	bne.n	800820c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_UART_Transmit_IT+0x26>
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e029      	b.n	800820e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_UART_Transmit_IT+0x38>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e022      	b.n	800820e <HAL_UART_Transmit_IT+0x7e>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	88fa      	ldrh	r2, [r7, #6]
 80081da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	88fa      	ldrh	r2, [r7, #6]
 80081e0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2221      	movs	r2, #33	; 0x21
 80081ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008206:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	e000      	b.n	800820e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800820c:	2302      	movs	r3, #2
  }
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b20      	cmp	r3, #32
 8008234:	d166      	bne.n	8008304 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <HAL_UART_Receive_DMA+0x26>
 800823c:	88fb      	ldrh	r3, [r7, #6]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e05f      	b.n	8008306 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_UART_Receive_DMA+0x38>
 8008250:	2302      	movs	r3, #2
 8008252:	e058      	b.n	8008306 <HAL_UART_Receive_DMA+0xea>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2222      	movs	r2, #34	; 0x22
 8008272:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827a:	4a25      	ldr	r2, [pc, #148]	; (8008310 <HAL_UART_Receive_DMA+0xf4>)
 800827c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	4a24      	ldr	r2, [pc, #144]	; (8008314 <HAL_UART_Receive_DMA+0xf8>)
 8008284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828a:	4a23      	ldr	r2, [pc, #140]	; (8008318 <HAL_UART_Receive_DMA+0xfc>)
 800828c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008292:	2200      	movs	r2, #0
 8008294:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008296:	f107 0308 	add.w	r3, r7, #8
 800829a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3304      	adds	r3, #4
 80082a6:	4619      	mov	r1, r3
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	88fb      	ldrh	r3, [r7, #6]
 80082ae:	f7fb ff13 	bl	80040d8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80082b2:	2300      	movs	r3, #0
 80082b4:	613b      	str	r3, [r7, #16]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	613b      	str	r3, [r7, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082de:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695a      	ldr	r2, [r3, #20]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	695a      	ldr	r2, [r3, #20]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082fe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	e000      	b.n	8008306 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008304:	2302      	movs	r3, #2
  }
}
 8008306:	4618      	mov	r0, r3
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	0800856d 	.word	0x0800856d
 8008314:	080085d5 	.word	0x080085d5
 8008318:	080085f1 	.word	0x080085f1

0800831c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f003 030f 	and.w	r3, r3, #15
 800834a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10d      	bne.n	800836e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d008      	beq.n	800836e <HAL_UART_IRQHandler+0x52>
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa8c 	bl	8008884 <UART_Receive_IT>
      return;
 800836c:	e0d0      	b.n	8008510 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80b0 	beq.w	80084d6 <HAL_UART_IRQHandler+0x1ba>
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d105      	bne.n	800838c <HAL_UART_IRQHandler+0x70>
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 80a5 	beq.w	80084d6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <HAL_UART_IRQHandler+0x90>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a4:	f043 0201 	orr.w	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f003 0304 	and.w	r3, r3, #4
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <HAL_UART_IRQHandler+0xb0>
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c4:	f043 0202 	orr.w	r2, r3, #2
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <HAL_UART_IRQHandler+0xd0>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e4:	f043 0204 	orr.w	r2, r3, #4
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00f      	beq.n	8008416 <HAL_UART_IRQHandler+0xfa>
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f003 0320 	and.w	r3, r3, #32
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <HAL_UART_IRQHandler+0xee>
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840e:	f043 0208 	orr.w	r2, r3, #8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d077      	beq.n	800850e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d007      	beq.n	8008438 <HAL_UART_IRQHandler+0x11c>
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa26 	bl	8008884 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008452:	f003 0308 	and.w	r3, r3, #8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <HAL_UART_IRQHandler+0x144>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d031      	beq.n	80084c4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f96f 	bl	8008744 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d123      	bne.n	80084bc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695a      	ldr	r2, [r3, #20]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008482:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008488:	2b00      	cmp	r3, #0
 800848a:	d013      	beq.n	80084b4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008490:	4a21      	ldr	r2, [pc, #132]	; (8008518 <HAL_UART_IRQHandler+0x1fc>)
 8008492:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	4618      	mov	r0, r3
 800849a:	f7fb fe75 	bl	8004188 <HAL_DMA_Abort_IT>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d016      	beq.n	80084d2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084ae:	4610      	mov	r0, r2
 80084b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b2:	e00e      	b.n	80084d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f84f 	bl	8008558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ba:	e00a      	b.n	80084d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f84b 	bl	8008558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c2:	e006      	b.n	80084d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f847 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80084d0:	e01d      	b.n	800850e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d2:	bf00      	nop
    return;
 80084d4:	e01b      	b.n	800850e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d008      	beq.n	80084f2 <HAL_UART_IRQHandler+0x1d6>
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f95c 	bl	80087a8 <UART_Transmit_IT>
    return;
 80084f0:	e00e      	b.n	8008510 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d009      	beq.n	8008510 <HAL_UART_IRQHandler+0x1f4>
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f9a4 	bl	8008854 <UART_EndTransmit_IT>
    return;
 800850c:	e000      	b.n	8008510 <HAL_UART_IRQHandler+0x1f4>
    return;
 800850e:	bf00      	nop
  }
}
 8008510:	3720      	adds	r7, #32
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	08008781 	.word	0x08008781

0800851c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d11e      	bne.n	80085c6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800859c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	695a      	ldr	r2, [r3, #20]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0201 	bic.w	r2, r2, #1
 80085ac:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695a      	ldr	r2, [r3, #20]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085bc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7ff ffb2 	bl	8008530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff ffae 	bl	8008544 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e8:	bf00      	nop
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	bf0c      	ite	eq
 8008610:	2301      	moveq	r3, #1
 8008612:	2300      	movne	r3, #0
 8008614:	b2db      	uxtb	r3, r3
 8008616:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b21      	cmp	r3, #33	; 0x21
 8008622:	d108      	bne.n	8008636 <UART_DMAError+0x46>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2200      	movs	r2, #0
 800862e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008630:	68b8      	ldr	r0, [r7, #8]
 8008632:	f000 f871 	bl	8008718 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	bf0c      	ite	eq
 8008644:	2301      	moveq	r3, #1
 8008646:	2300      	movne	r3, #0
 8008648:	b2db      	uxtb	r3, r3
 800864a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b22      	cmp	r3, #34	; 0x22
 8008656:	d108      	bne.n	800866a <UART_DMAError+0x7a>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2200      	movs	r2, #0
 8008662:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008664:	68b8      	ldr	r0, [r7, #8]
 8008666:	f000 f86d 	bl	8008744 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866e:	f043 0210 	orr.w	r2, r3, #16
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008676:	68b8      	ldr	r0, [r7, #8]
 8008678:	f7ff ff6e 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	4613      	mov	r3, r2
 8008692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008694:	e02c      	b.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869c:	d028      	beq.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80086a4:	f7fb fb28 	bl	8003cf8 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d21d      	bcs.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695a      	ldr	r2, [r3, #20]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0201 	bic.w	r2, r2, #1
 80086d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e00f      	b.n	8008710 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	4013      	ands	r3, r2
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	bf0c      	ite	eq
 8008700:	2301      	moveq	r3, #1
 8008702:	2300      	movne	r3, #0
 8008704:	b2db      	uxtb	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	429a      	cmp	r2, r3
 800870c:	d0c3      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800872e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800875a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0201 	bic.w	r2, r2, #1
 800876a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7ff fedc 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b21      	cmp	r3, #33	; 0x21
 80087ba:	d144      	bne.n	8008846 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c4:	d11a      	bne.n	80087fc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087da:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	1c9a      	adds	r2, r3, #2
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	621a      	str	r2, [r3, #32]
 80087ee:	e00e      	b.n	800880e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	621a      	str	r2, [r3, #32]
 80087fa:	e008      	b.n	800880e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	1c59      	adds	r1, r3, #1
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6211      	str	r1, [r2, #32]
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008812:	b29b      	uxth	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	b29b      	uxth	r3, r3
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	4619      	mov	r1, r3
 800881c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10f      	bne.n	8008842 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008830:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008840:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	e000      	b.n	8008848 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008846:	2302      	movs	r3, #2
  }
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800886a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff fe51 	bl	800851c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b22      	cmp	r3, #34	; 0x22
 8008896:	d171      	bne.n	800897c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a0:	d123      	bne.n	80088ea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10e      	bne.n	80088ce <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	1c9a      	adds	r2, r3, #2
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	629a      	str	r2, [r3, #40]	; 0x28
 80088cc:	e029      	b.n	8008922 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	629a      	str	r2, [r3, #40]	; 0x28
 80088e8:	e01b      	b.n	8008922 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10a      	bne.n	8008908 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6858      	ldr	r0, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	1c59      	adds	r1, r3, #1
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6291      	str	r1, [r2, #40]	; 0x28
 8008902:	b2c2      	uxtb	r2, r0
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	e00c      	b.n	8008922 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	1c58      	adds	r0, r3, #1
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	6288      	str	r0, [r1, #40]	; 0x28
 800891a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800891e:	b2d2      	uxtb	r2, r2
 8008920:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29b      	uxth	r3, r3
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	4619      	mov	r1, r3
 8008930:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008932:	2b00      	cmp	r3, #0
 8008934:	d120      	bne.n	8008978 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0220 	bic.w	r2, r2, #32
 8008944:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008954:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695a      	ldr	r2, [r3, #20]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2220      	movs	r2, #32
 800896a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fdde 	bl	8008530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	e002      	b.n	800897e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	e000      	b.n	800897e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800897c:	2302      	movs	r3, #2
  }
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800898c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008990:	af00      	add	r7, sp, #0
 8008992:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008996:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089a6:	68d9      	ldr	r1, [r3, #12]
 80089a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	ea40 0301 	orr.w	r3, r0, r1
 80089b2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	431a      	orrs	r2, r3
 80089c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	431a      	orrs	r2, r3
 80089ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80089d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089e2:	f021 010c 	bic.w	r1, r1, #12
 80089e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80089f0:	430b      	orrs	r3, r1
 80089f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008a04:	6999      	ldr	r1, [r3, #24]
 8008a06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	ea40 0301 	orr.w	r3, r0, r1
 8008a10:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a1c:	f040 824a 	bne.w	8008eb4 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b96      	ldr	r3, [pc, #600]	; (8008c80 <UART_SetConfig+0x2f8>)
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d006      	beq.n	8008a3a <UART_SetConfig+0xb2>
 8008a2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b94      	ldr	r3, [pc, #592]	; (8008c84 <UART_SetConfig+0x2fc>)
 8008a34:	429a      	cmp	r2, r3
 8008a36:	f040 8129 	bne.w	8008c8c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a3a:	f7fe fb27 	bl	800708c <HAL_RCC_GetPCLK2Freq>
 8008a3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8008a4c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8008a50:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8008a54:	4622      	mov	r2, r4
 8008a56:	462b      	mov	r3, r5
 8008a58:	1891      	adds	r1, r2, r2
 8008a5a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008a5e:	415b      	adcs	r3, r3
 8008a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a64:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008a68:	4621      	mov	r1, r4
 8008a6a:	1851      	adds	r1, r2, r1
 8008a6c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008a70:	4629      	mov	r1, r5
 8008a72:	414b      	adcs	r3, r1
 8008a74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8008a84:	4649      	mov	r1, r9
 8008a86:	00cb      	lsls	r3, r1, #3
 8008a88:	4641      	mov	r1, r8
 8008a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a8e:	4641      	mov	r1, r8
 8008a90:	00ca      	lsls	r2, r1, #3
 8008a92:	4610      	mov	r0, r2
 8008a94:	4619      	mov	r1, r3
 8008a96:	4603      	mov	r3, r0
 8008a98:	4622      	mov	r2, r4
 8008a9a:	189b      	adds	r3, r3, r2
 8008a9c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008aa0:	462b      	mov	r3, r5
 8008aa2:	460a      	mov	r2, r1
 8008aa4:	eb42 0303 	adc.w	r3, r2, r3
 8008aa8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8008aac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008ab8:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8008abc:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	18db      	adds	r3, r3, r3
 8008ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ac8:	4613      	mov	r3, r2
 8008aca:	eb42 0303 	adc.w	r3, r2, r3
 8008ace:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ad2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8008ad6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8008ada:	f7f8 f947 	bl	8000d6c <__aeabi_uldivmod>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4b69      	ldr	r3, [pc, #420]	; (8008c88 <UART_SetConfig+0x300>)
 8008ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8008ae8:	095b      	lsrs	r3, r3, #5
 8008aea:	011c      	lsls	r4, r3, #4
 8008aec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008af0:	2200      	movs	r2, #0
 8008af2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8008af6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008afa:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8008afe:	4642      	mov	r2, r8
 8008b00:	464b      	mov	r3, r9
 8008b02:	1891      	adds	r1, r2, r2
 8008b04:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008b08:	415b      	adcs	r3, r3
 8008b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b0e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008b12:	4641      	mov	r1, r8
 8008b14:	1851      	adds	r1, r2, r1
 8008b16:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	414b      	adcs	r3, r1
 8008b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b22:	f04f 0200 	mov.w	r2, #0
 8008b26:	f04f 0300 	mov.w	r3, #0
 8008b2a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8008b2e:	4659      	mov	r1, fp
 8008b30:	00cb      	lsls	r3, r1, #3
 8008b32:	4651      	mov	r1, sl
 8008b34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b38:	4651      	mov	r1, sl
 8008b3a:	00ca      	lsls	r2, r1, #3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4603      	mov	r3, r0
 8008b42:	4642      	mov	r2, r8
 8008b44:	189b      	adds	r3, r3, r2
 8008b46:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	460a      	mov	r2, r1
 8008b4e:	eb42 0303 	adc.w	r3, r2, r3
 8008b52:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008b56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008b62:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8008b66:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	18db      	adds	r3, r3, r3
 8008b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b72:	4613      	mov	r3, r2
 8008b74:	eb42 0303 	adc.w	r3, r2, r3
 8008b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b7c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8008b80:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8008b84:	f7f8 f8f2 	bl	8000d6c <__aeabi_uldivmod>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4b3e      	ldr	r3, [pc, #248]	; (8008c88 <UART_SetConfig+0x300>)
 8008b90:	fba3 2301 	umull	r2, r3, r3, r1
 8008b94:	095b      	lsrs	r3, r3, #5
 8008b96:	2264      	movs	r2, #100	; 0x64
 8008b98:	fb02 f303 	mul.w	r3, r2, r3
 8008b9c:	1acb      	subs	r3, r1, r3
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ba4:	4b38      	ldr	r3, [pc, #224]	; (8008c88 <UART_SetConfig+0x300>)
 8008ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bb2:	441c      	add	r4, r3
 8008bb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008bbe:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8008bc2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	464b      	mov	r3, r9
 8008bca:	1891      	adds	r1, r2, r2
 8008bcc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8008bd0:	415b      	adcs	r3, r3
 8008bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008bd6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008bda:	4641      	mov	r1, r8
 8008bdc:	1851      	adds	r1, r2, r1
 8008bde:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8008be2:	4649      	mov	r1, r9
 8008be4:	414b      	adcs	r3, r1
 8008be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bea:	f04f 0200 	mov.w	r2, #0
 8008bee:	f04f 0300 	mov.w	r3, #0
 8008bf2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	00cb      	lsls	r3, r1, #3
 8008bfa:	4651      	mov	r1, sl
 8008bfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c00:	4651      	mov	r1, sl
 8008c02:	00ca      	lsls	r2, r1, #3
 8008c04:	4610      	mov	r0, r2
 8008c06:	4619      	mov	r1, r3
 8008c08:	4603      	mov	r3, r0
 8008c0a:	4642      	mov	r2, r8
 8008c0c:	189b      	adds	r3, r3, r2
 8008c0e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008c12:	464b      	mov	r3, r9
 8008c14:	460a      	mov	r2, r1
 8008c16:	eb42 0303 	adc.w	r3, r2, r3
 8008c1a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008c1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8008c2a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8008c2e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8008c32:	460b      	mov	r3, r1
 8008c34:	18db      	adds	r3, r3, r3
 8008c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	eb42 0303 	adc.w	r3, r2, r3
 8008c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c44:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008c48:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8008c4c:	f7f8 f88e 	bl	8000d6c <__aeabi_uldivmod>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <UART_SetConfig+0x300>)
 8008c56:	fba3 1302 	umull	r1, r3, r3, r2
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	2164      	movs	r1, #100	; 0x64
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	00db      	lsls	r3, r3, #3
 8008c66:	3332      	adds	r3, #50	; 0x32
 8008c68:	4a07      	ldr	r2, [pc, #28]	; (8008c88 <UART_SetConfig+0x300>)
 8008c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	f003 0207 	and.w	r2, r3, #7
 8008c74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4422      	add	r2, r4
 8008c7c:	609a      	str	r2, [r3, #8]
 8008c7e:	e349      	b.n	8009314 <UART_SetConfig+0x98c>
 8008c80:	40011000 	.word	0x40011000
 8008c84:	40011400 	.word	0x40011400
 8008c88:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c8c:	f7fe f9ea 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 8008c90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008c9e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8008ca2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	462b      	mov	r3, r5
 8008caa:	1891      	adds	r1, r2, r2
 8008cac:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008cb0:	415b      	adcs	r3, r3
 8008cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008cb6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008cba:	4621      	mov	r1, r4
 8008cbc:	eb12 0a01 	adds.w	sl, r2, r1
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	eb43 0b01 	adc.w	fp, r3, r1
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	f04f 0300 	mov.w	r3, #0
 8008cce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cd2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cda:	4692      	mov	sl, r2
 8008cdc:	469b      	mov	fp, r3
 8008cde:	4623      	mov	r3, r4
 8008ce0:	eb1a 0303 	adds.w	r3, sl, r3
 8008ce4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008ce8:	462b      	mov	r3, r5
 8008cea:	eb4b 0303 	adc.w	r3, fp, r3
 8008cee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008cf2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8008cfe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008d02:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8008d06:	460b      	mov	r3, r1
 8008d08:	18db      	adds	r3, r3, r3
 8008d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d0e:	4613      	mov	r3, r2
 8008d10:	eb42 0303 	adc.w	r3, r2, r3
 8008d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d18:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008d1c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8008d20:	f7f8 f824 	bl	8000d6c <__aeabi_uldivmod>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4b61      	ldr	r3, [pc, #388]	; (8008eb0 <UART_SetConfig+0x528>)
 8008d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	011c      	lsls	r4, r3, #4
 8008d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8008d3c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8008d40:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	1891      	adds	r1, r2, r2
 8008d4a:	67b9      	str	r1, [r7, #120]	; 0x78
 8008d4c:	415b      	adcs	r3, r3
 8008d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d50:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008d54:	4641      	mov	r1, r8
 8008d56:	1851      	adds	r1, r2, r1
 8008d58:	6739      	str	r1, [r7, #112]	; 0x70
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	414b      	adcs	r3, r1
 8008d5e:	677b      	str	r3, [r7, #116]	; 0x74
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	00cb      	lsls	r3, r1, #3
 8008d70:	4651      	mov	r1, sl
 8008d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d76:	4651      	mov	r1, sl
 8008d78:	00ca      	lsls	r2, r1, #3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4642      	mov	r2, r8
 8008d82:	189b      	adds	r3, r3, r2
 8008d84:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008d88:	464b      	mov	r3, r9
 8008d8a:	460a      	mov	r2, r1
 8008d8c:	eb42 0303 	adc.w	r3, r2, r3
 8008d90:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8008d94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008da0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8008da4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8008da8:	460b      	mov	r3, r1
 8008daa:	18db      	adds	r3, r3, r3
 8008dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dae:	4613      	mov	r3, r2
 8008db0:	eb42 0303 	adc.w	r3, r2, r3
 8008db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008db6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008dba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8008dbe:	f7f7 ffd5 	bl	8000d6c <__aeabi_uldivmod>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4b39      	ldr	r3, [pc, #228]	; (8008eb0 <UART_SetConfig+0x528>)
 8008dca:	fba3 2301 	umull	r2, r3, r3, r1
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	2264      	movs	r2, #100	; 0x64
 8008dd2:	fb02 f303 	mul.w	r3, r2, r3
 8008dd6:	1acb      	subs	r3, r1, r3
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008dde:	4b34      	ldr	r3, [pc, #208]	; (8008eb0 <UART_SetConfig+0x528>)
 8008de0:	fba3 2302 	umull	r2, r3, r3, r2
 8008de4:	095b      	lsrs	r3, r3, #5
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dec:	441c      	add	r4, r3
 8008dee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8008df8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008dfc:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	1891      	adds	r1, r2, r2
 8008e06:	6639      	str	r1, [r7, #96]	; 0x60
 8008e08:	415b      	adcs	r3, r3
 8008e0a:	667b      	str	r3, [r7, #100]	; 0x64
 8008e0c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008e10:	4641      	mov	r1, r8
 8008e12:	1851      	adds	r1, r2, r1
 8008e14:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e16:	4649      	mov	r1, r9
 8008e18:	414b      	adcs	r3, r1
 8008e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	f04f 0300 	mov.w	r3, #0
 8008e24:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8008e28:	4659      	mov	r1, fp
 8008e2a:	00cb      	lsls	r3, r1, #3
 8008e2c:	4651      	mov	r1, sl
 8008e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e32:	4651      	mov	r1, sl
 8008e34:	00ca      	lsls	r2, r1, #3
 8008e36:	4610      	mov	r0, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	189b      	adds	r3, r3, r2
 8008e40:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8008e44:	464b      	mov	r3, r9
 8008e46:	460a      	mov	r2, r1
 8008e48:	eb42 0303 	adc.w	r3, r2, r3
 8008e4c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8008e50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8008e5c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8008e60:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8008e64:	460b      	mov	r3, r1
 8008e66:	18db      	adds	r3, r3, r3
 8008e68:	653b      	str	r3, [r7, #80]	; 0x50
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	eb42 0303 	adc.w	r3, r2, r3
 8008e70:	657b      	str	r3, [r7, #84]	; 0x54
 8008e72:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e76:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8008e7a:	f7f7 ff77 	bl	8000d6c <__aeabi_uldivmod>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <UART_SetConfig+0x528>)
 8008e84:	fba3 1302 	umull	r1, r3, r3, r2
 8008e88:	095b      	lsrs	r3, r3, #5
 8008e8a:	2164      	movs	r1, #100	; 0x64
 8008e8c:	fb01 f303 	mul.w	r3, r1, r3
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	3332      	adds	r3, #50	; 0x32
 8008e96:	4a06      	ldr	r2, [pc, #24]	; (8008eb0 <UART_SetConfig+0x528>)
 8008e98:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	f003 0207 	and.w	r2, r3, #7
 8008ea2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4422      	add	r2, r4
 8008eaa:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008eac:	e232      	b.n	8009314 <UART_SetConfig+0x98c>
 8008eae:	bf00      	nop
 8008eb0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008eb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b8d      	ldr	r3, [pc, #564]	; (80090f0 <UART_SetConfig+0x768>)
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d006      	beq.n	8008ece <UART_SetConfig+0x546>
 8008ec0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	4b8b      	ldr	r3, [pc, #556]	; (80090f4 <UART_SetConfig+0x76c>)
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	f040 8117 	bne.w	80090fc <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ece:	f7fe f8dd 	bl	800708c <HAL_RCC_GetPCLK2Freq>
 8008ed2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ed6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8008ee0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8008ee4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8008ee8:	4622      	mov	r2, r4
 8008eea:	462b      	mov	r3, r5
 8008eec:	1891      	adds	r1, r2, r2
 8008eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ef0:	415b      	adcs	r3, r3
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ef8:	4621      	mov	r1, r4
 8008efa:	eb12 0801 	adds.w	r8, r2, r1
 8008efe:	4629      	mov	r1, r5
 8008f00:	eb43 0901 	adc.w	r9, r3, r1
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f18:	4690      	mov	r8, r2
 8008f1a:	4699      	mov	r9, r3
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	eb18 0303 	adds.w	r3, r8, r3
 8008f22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008f26:	462b      	mov	r3, r5
 8008f28:	eb49 0303 	adc.w	r3, r9, r3
 8008f2c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8008f30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008f3c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	f04f 0300 	mov.w	r3, #0
 8008f48:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	008b      	lsls	r3, r1, #2
 8008f50:	4621      	mov	r1, r4
 8008f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f56:	4621      	mov	r1, r4
 8008f58:	008a      	lsls	r2, r1, #2
 8008f5a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8008f5e:	f7f7 ff05 	bl	8000d6c <__aeabi_uldivmod>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4b64      	ldr	r3, [pc, #400]	; (80090f8 <UART_SetConfig+0x770>)
 8008f68:	fba3 2302 	umull	r2, r3, r3, r2
 8008f6c:	095b      	lsrs	r3, r3, #5
 8008f6e:	011c      	lsls	r4, r3, #4
 8008f70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008f7a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008f7e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8008f82:	4642      	mov	r2, r8
 8008f84:	464b      	mov	r3, r9
 8008f86:	1891      	adds	r1, r2, r2
 8008f88:	6439      	str	r1, [r7, #64]	; 0x40
 8008f8a:	415b      	adcs	r3, r3
 8008f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f92:	4641      	mov	r1, r8
 8008f94:	1851      	adds	r1, r2, r1
 8008f96:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f98:	4649      	mov	r1, r9
 8008f9a:	414b      	adcs	r3, r1
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8008faa:	4659      	mov	r1, fp
 8008fac:	00cb      	lsls	r3, r1, #3
 8008fae:	4651      	mov	r1, sl
 8008fb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fb4:	4651      	mov	r1, sl
 8008fb6:	00ca      	lsls	r2, r1, #3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	4642      	mov	r2, r8
 8008fc0:	189b      	adds	r3, r3, r2
 8008fc2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008fc6:	464b      	mov	r3, r9
 8008fc8:	460a      	mov	r2, r1
 8008fca:	eb42 0303 	adc.w	r3, r2, r3
 8008fce:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8008fd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008fde:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	f04f 0300 	mov.w	r3, #0
 8008fea:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8008fee:	4649      	mov	r1, r9
 8008ff0:	008b      	lsls	r3, r1, #2
 8008ff2:	4641      	mov	r1, r8
 8008ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ff8:	4641      	mov	r1, r8
 8008ffa:	008a      	lsls	r2, r1, #2
 8008ffc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009000:	f7f7 feb4 	bl	8000d6c <__aeabi_uldivmod>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4b3b      	ldr	r3, [pc, #236]	; (80090f8 <UART_SetConfig+0x770>)
 800900a:	fba3 1302 	umull	r1, r3, r3, r2
 800900e:	095b      	lsrs	r3, r3, #5
 8009010:	2164      	movs	r1, #100	; 0x64
 8009012:	fb01 f303 	mul.w	r3, r1, r3
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	3332      	adds	r3, #50	; 0x32
 800901c:	4a36      	ldr	r2, [pc, #216]	; (80090f8 <UART_SetConfig+0x770>)
 800901e:	fba2 2303 	umull	r2, r3, r2, r3
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009028:	441c      	add	r4, r3
 800902a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800902e:	2200      	movs	r2, #0
 8009030:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009034:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8009038:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800903c:	4642      	mov	r2, r8
 800903e:	464b      	mov	r3, r9
 8009040:	1891      	adds	r1, r2, r2
 8009042:	6339      	str	r1, [r7, #48]	; 0x30
 8009044:	415b      	adcs	r3, r3
 8009046:	637b      	str	r3, [r7, #52]	; 0x34
 8009048:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800904c:	4641      	mov	r1, r8
 800904e:	1851      	adds	r1, r2, r1
 8009050:	62b9      	str	r1, [r7, #40]	; 0x28
 8009052:	4649      	mov	r1, r9
 8009054:	414b      	adcs	r3, r1
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8009064:	4659      	mov	r1, fp
 8009066:	00cb      	lsls	r3, r1, #3
 8009068:	4651      	mov	r1, sl
 800906a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800906e:	4651      	mov	r1, sl
 8009070:	00ca      	lsls	r2, r1, #3
 8009072:	4610      	mov	r0, r2
 8009074:	4619      	mov	r1, r3
 8009076:	4603      	mov	r3, r0
 8009078:	4642      	mov	r2, r8
 800907a:	189b      	adds	r3, r3, r2
 800907c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009080:	464b      	mov	r3, r9
 8009082:	460a      	mov	r2, r1
 8009084:	eb42 0303 	adc.w	r3, r2, r3
 8009088:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800908c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009098:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800909c:	f04f 0200 	mov.w	r2, #0
 80090a0:	f04f 0300 	mov.w	r3, #0
 80090a4:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80090a8:	4649      	mov	r1, r9
 80090aa:	008b      	lsls	r3, r1, #2
 80090ac:	4641      	mov	r1, r8
 80090ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090b2:	4641      	mov	r1, r8
 80090b4:	008a      	lsls	r2, r1, #2
 80090b6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80090ba:	f7f7 fe57 	bl	8000d6c <__aeabi_uldivmod>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <UART_SetConfig+0x770>)
 80090c4:	fba3 1302 	umull	r1, r3, r3, r2
 80090c8:	095b      	lsrs	r3, r3, #5
 80090ca:	2164      	movs	r1, #100	; 0x64
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	3332      	adds	r3, #50	; 0x32
 80090d6:	4a08      	ldr	r2, [pc, #32]	; (80090f8 <UART_SetConfig+0x770>)
 80090d8:	fba2 2303 	umull	r2, r3, r2, r3
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	f003 020f 	and.w	r2, r3, #15
 80090e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4422      	add	r2, r4
 80090ea:	609a      	str	r2, [r3, #8]
 80090ec:	e112      	b.n	8009314 <UART_SetConfig+0x98c>
 80090ee:	bf00      	nop
 80090f0:	40011000 	.word	0x40011000
 80090f4:	40011400 	.word	0x40011400
 80090f8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80090fc:	f7fd ffb2 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 8009100:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009104:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009108:	2200      	movs	r2, #0
 800910a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800910e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009112:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8009116:	4642      	mov	r2, r8
 8009118:	464b      	mov	r3, r9
 800911a:	1891      	adds	r1, r2, r2
 800911c:	6239      	str	r1, [r7, #32]
 800911e:	415b      	adcs	r3, r3
 8009120:	627b      	str	r3, [r7, #36]	; 0x24
 8009122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009126:	4641      	mov	r1, r8
 8009128:	1854      	adds	r4, r2, r1
 800912a:	4649      	mov	r1, r9
 800912c:	eb43 0501 	adc.w	r5, r3, r1
 8009130:	f04f 0200 	mov.w	r2, #0
 8009134:	f04f 0300 	mov.w	r3, #0
 8009138:	00eb      	lsls	r3, r5, #3
 800913a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800913e:	00e2      	lsls	r2, r4, #3
 8009140:	4614      	mov	r4, r2
 8009142:	461d      	mov	r5, r3
 8009144:	4643      	mov	r3, r8
 8009146:	18e3      	adds	r3, r4, r3
 8009148:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800914c:	464b      	mov	r3, r9
 800914e:	eb45 0303 	adc.w	r3, r5, r3
 8009152:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009156:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009162:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	f04f 0300 	mov.w	r3, #0
 800916e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8009172:	4629      	mov	r1, r5
 8009174:	008b      	lsls	r3, r1, #2
 8009176:	4621      	mov	r1, r4
 8009178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800917c:	4621      	mov	r1, r4
 800917e:	008a      	lsls	r2, r1, #2
 8009180:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8009184:	f7f7 fdf2 	bl	8000d6c <__aeabi_uldivmod>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4b64      	ldr	r3, [pc, #400]	; (8009320 <UART_SetConfig+0x998>)
 800918e:	fba3 2302 	umull	r2, r3, r3, r2
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	011c      	lsls	r4, r3, #4
 8009196:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800919a:	2200      	movs	r2, #0
 800919c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091a0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80091a4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80091a8:	4642      	mov	r2, r8
 80091aa:	464b      	mov	r3, r9
 80091ac:	1891      	adds	r1, r2, r2
 80091ae:	61b9      	str	r1, [r7, #24]
 80091b0:	415b      	adcs	r3, r3
 80091b2:	61fb      	str	r3, [r7, #28]
 80091b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091b8:	4641      	mov	r1, r8
 80091ba:	1851      	adds	r1, r2, r1
 80091bc:	6139      	str	r1, [r7, #16]
 80091be:	4649      	mov	r1, r9
 80091c0:	414b      	adcs	r3, r1
 80091c2:	617b      	str	r3, [r7, #20]
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091d0:	4659      	mov	r1, fp
 80091d2:	00cb      	lsls	r3, r1, #3
 80091d4:	4651      	mov	r1, sl
 80091d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091da:	4651      	mov	r1, sl
 80091dc:	00ca      	lsls	r2, r1, #3
 80091de:	4610      	mov	r0, r2
 80091e0:	4619      	mov	r1, r3
 80091e2:	4603      	mov	r3, r0
 80091e4:	4642      	mov	r2, r8
 80091e6:	189b      	adds	r3, r3, r2
 80091e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091ec:	464b      	mov	r3, r9
 80091ee:	460a      	mov	r2, r1
 80091f0:	eb42 0303 	adc.w	r3, r2, r3
 80091f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009204:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009208:	f04f 0200 	mov.w	r2, #0
 800920c:	f04f 0300 	mov.w	r3, #0
 8009210:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8009214:	4649      	mov	r1, r9
 8009216:	008b      	lsls	r3, r1, #2
 8009218:	4641      	mov	r1, r8
 800921a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800921e:	4641      	mov	r1, r8
 8009220:	008a      	lsls	r2, r1, #2
 8009222:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8009226:	f7f7 fda1 	bl	8000d6c <__aeabi_uldivmod>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4b3c      	ldr	r3, [pc, #240]	; (8009320 <UART_SetConfig+0x998>)
 8009230:	fba3 1302 	umull	r1, r3, r3, r2
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	2164      	movs	r1, #100	; 0x64
 8009238:	fb01 f303 	mul.w	r3, r1, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	3332      	adds	r3, #50	; 0x32
 8009242:	4a37      	ldr	r2, [pc, #220]	; (8009320 <UART_SetConfig+0x998>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800924e:	441c      	add	r4, r3
 8009250:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009254:	2200      	movs	r2, #0
 8009256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800925a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800925e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8009262:	4642      	mov	r2, r8
 8009264:	464b      	mov	r3, r9
 8009266:	1891      	adds	r1, r2, r2
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	415b      	adcs	r3, r3
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009272:	4641      	mov	r1, r8
 8009274:	1851      	adds	r1, r2, r1
 8009276:	6039      	str	r1, [r7, #0]
 8009278:	4649      	mov	r1, r9
 800927a:	414b      	adcs	r3, r1
 800927c:	607b      	str	r3, [r7, #4]
 800927e:	f04f 0200 	mov.w	r2, #0
 8009282:	f04f 0300 	mov.w	r3, #0
 8009286:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800928a:	4659      	mov	r1, fp
 800928c:	00cb      	lsls	r3, r1, #3
 800928e:	4651      	mov	r1, sl
 8009290:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009294:	4651      	mov	r1, sl
 8009296:	00ca      	lsls	r2, r1, #3
 8009298:	4610      	mov	r0, r2
 800929a:	4619      	mov	r1, r3
 800929c:	4603      	mov	r3, r0
 800929e:	4642      	mov	r2, r8
 80092a0:	189b      	adds	r3, r3, r2
 80092a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092a6:	464b      	mov	r3, r9
 80092a8:	460a      	mov	r2, r1
 80092aa:	eb42 0303 	adc.w	r3, r2, r3
 80092ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092c2:	f04f 0200 	mov.w	r2, #0
 80092c6:	f04f 0300 	mov.w	r3, #0
 80092ca:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80092ce:	4649      	mov	r1, r9
 80092d0:	008b      	lsls	r3, r1, #2
 80092d2:	4641      	mov	r1, r8
 80092d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092d8:	4641      	mov	r1, r8
 80092da:	008a      	lsls	r2, r1, #2
 80092dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092e0:	f7f7 fd44 	bl	8000d6c <__aeabi_uldivmod>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <UART_SetConfig+0x998>)
 80092ea:	fba3 1302 	umull	r1, r3, r3, r2
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	2164      	movs	r1, #100	; 0x64
 80092f2:	fb01 f303 	mul.w	r3, r1, r3
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	3332      	adds	r3, #50	; 0x32
 80092fc:	4a08      	ldr	r2, [pc, #32]	; (8009320 <UART_SetConfig+0x998>)
 80092fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	f003 020f 	and.w	r2, r3, #15
 8009308:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4422      	add	r2, r4
 8009310:	609a      	str	r2, [r3, #8]
}
 8009312:	e7ff      	b.n	8009314 <UART_SetConfig+0x98c>
 8009314:	bf00      	nop
 8009316:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800931a:	46bd      	mov	sp, r7
 800931c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009320:	51eb851f 	.word	0x51eb851f

08009324 <__errno>:
 8009324:	4b01      	ldr	r3, [pc, #4]	; (800932c <__errno+0x8>)
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	20000038 	.word	0x20000038

08009330 <__libc_init_array>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4d0d      	ldr	r5, [pc, #52]	; (8009368 <__libc_init_array+0x38>)
 8009334:	4c0d      	ldr	r4, [pc, #52]	; (800936c <__libc_init_array+0x3c>)
 8009336:	1b64      	subs	r4, r4, r5
 8009338:	10a4      	asrs	r4, r4, #2
 800933a:	2600      	movs	r6, #0
 800933c:	42a6      	cmp	r6, r4
 800933e:	d109      	bne.n	8009354 <__libc_init_array+0x24>
 8009340:	4d0b      	ldr	r5, [pc, #44]	; (8009370 <__libc_init_array+0x40>)
 8009342:	4c0c      	ldr	r4, [pc, #48]	; (8009374 <__libc_init_array+0x44>)
 8009344:	f000 f8fe 	bl	8009544 <_init>
 8009348:	1b64      	subs	r4, r4, r5
 800934a:	10a4      	asrs	r4, r4, #2
 800934c:	2600      	movs	r6, #0
 800934e:	42a6      	cmp	r6, r4
 8009350:	d105      	bne.n	800935e <__libc_init_array+0x2e>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	f855 3b04 	ldr.w	r3, [r5], #4
 8009358:	4798      	blx	r3
 800935a:	3601      	adds	r6, #1
 800935c:	e7ee      	b.n	800933c <__libc_init_array+0xc>
 800935e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009362:	4798      	blx	r3
 8009364:	3601      	adds	r6, #1
 8009366:	e7f2      	b.n	800934e <__libc_init_array+0x1e>
 8009368:	08009588 	.word	0x08009588
 800936c:	08009588 	.word	0x08009588
 8009370:	08009588 	.word	0x08009588
 8009374:	0800958c 	.word	0x0800958c

08009378 <memset>:
 8009378:	4402      	add	r2, r0
 800937a:	4603      	mov	r3, r0
 800937c:	4293      	cmp	r3, r2
 800937e:	d100      	bne.n	8009382 <memset+0xa>
 8009380:	4770      	bx	lr
 8009382:	f803 1b01 	strb.w	r1, [r3], #1
 8009386:	e7f9      	b.n	800937c <memset+0x4>

08009388 <sqrt>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	ed2d 8b02 	vpush	{d8}
 800938e:	ec55 4b10 	vmov	r4, r5, d0
 8009392:	f000 f825 	bl	80093e0 <__ieee754_sqrt>
 8009396:	4622      	mov	r2, r4
 8009398:	462b      	mov	r3, r5
 800939a:	4620      	mov	r0, r4
 800939c:	4629      	mov	r1, r5
 800939e:	eeb0 8a40 	vmov.f32	s16, s0
 80093a2:	eef0 8a60 	vmov.f32	s17, s1
 80093a6:	f7f7 fb6d 	bl	8000a84 <__aeabi_dcmpun>
 80093aa:	b990      	cbnz	r0, 80093d2 <sqrt+0x4a>
 80093ac:	2200      	movs	r2, #0
 80093ae:	2300      	movs	r3, #0
 80093b0:	4620      	mov	r0, r4
 80093b2:	4629      	mov	r1, r5
 80093b4:	f7f7 fb3e 	bl	8000a34 <__aeabi_dcmplt>
 80093b8:	b158      	cbz	r0, 80093d2 <sqrt+0x4a>
 80093ba:	f7ff ffb3 	bl	8009324 <__errno>
 80093be:	2321      	movs	r3, #33	; 0x21
 80093c0:	6003      	str	r3, [r0, #0]
 80093c2:	2200      	movs	r2, #0
 80093c4:	2300      	movs	r3, #0
 80093c6:	4610      	mov	r0, r2
 80093c8:	4619      	mov	r1, r3
 80093ca:	f7f7 f9eb 	bl	80007a4 <__aeabi_ddiv>
 80093ce:	ec41 0b18 	vmov	d8, r0, r1
 80093d2:	eeb0 0a48 	vmov.f32	s0, s16
 80093d6:	eef0 0a68 	vmov.f32	s1, s17
 80093da:	ecbd 8b02 	vpop	{d8}
 80093de:	bd38      	pop	{r3, r4, r5, pc}

080093e0 <__ieee754_sqrt>:
 80093e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e4:	ec55 4b10 	vmov	r4, r5, d0
 80093e8:	4e55      	ldr	r6, [pc, #340]	; (8009540 <__ieee754_sqrt+0x160>)
 80093ea:	43ae      	bics	r6, r5
 80093ec:	ee10 0a10 	vmov	r0, s0
 80093f0:	ee10 3a10 	vmov	r3, s0
 80093f4:	462a      	mov	r2, r5
 80093f6:	4629      	mov	r1, r5
 80093f8:	d110      	bne.n	800941c <__ieee754_sqrt+0x3c>
 80093fa:	ee10 2a10 	vmov	r2, s0
 80093fe:	462b      	mov	r3, r5
 8009400:	f7f7 f8a6 	bl	8000550 <__aeabi_dmul>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4620      	mov	r0, r4
 800940a:	4629      	mov	r1, r5
 800940c:	f7f6 feea 	bl	80001e4 <__adddf3>
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	ec45 4b10 	vmov	d0, r4, r5
 8009418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941c:	2d00      	cmp	r5, #0
 800941e:	dc10      	bgt.n	8009442 <__ieee754_sqrt+0x62>
 8009420:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009424:	4330      	orrs	r0, r6
 8009426:	d0f5      	beq.n	8009414 <__ieee754_sqrt+0x34>
 8009428:	b15d      	cbz	r5, 8009442 <__ieee754_sqrt+0x62>
 800942a:	ee10 2a10 	vmov	r2, s0
 800942e:	462b      	mov	r3, r5
 8009430:	ee10 0a10 	vmov	r0, s0
 8009434:	f7f6 fed4 	bl	80001e0 <__aeabi_dsub>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	f7f7 f9b2 	bl	80007a4 <__aeabi_ddiv>
 8009440:	e7e6      	b.n	8009410 <__ieee754_sqrt+0x30>
 8009442:	1512      	asrs	r2, r2, #20
 8009444:	d074      	beq.n	8009530 <__ieee754_sqrt+0x150>
 8009446:	07d4      	lsls	r4, r2, #31
 8009448:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800944c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009450:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009454:	bf5e      	ittt	pl
 8009456:	0fda      	lsrpl	r2, r3, #31
 8009458:	005b      	lslpl	r3, r3, #1
 800945a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800945e:	2400      	movs	r4, #0
 8009460:	0fda      	lsrs	r2, r3, #31
 8009462:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009466:	107f      	asrs	r7, r7, #1
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	2516      	movs	r5, #22
 800946c:	4620      	mov	r0, r4
 800946e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009472:	1886      	adds	r6, r0, r2
 8009474:	428e      	cmp	r6, r1
 8009476:	bfde      	ittt	le
 8009478:	1b89      	suble	r1, r1, r6
 800947a:	18b0      	addle	r0, r6, r2
 800947c:	18a4      	addle	r4, r4, r2
 800947e:	0049      	lsls	r1, r1, #1
 8009480:	3d01      	subs	r5, #1
 8009482:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009486:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800948a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800948e:	d1f0      	bne.n	8009472 <__ieee754_sqrt+0x92>
 8009490:	462a      	mov	r2, r5
 8009492:	f04f 0e20 	mov.w	lr, #32
 8009496:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800949a:	4281      	cmp	r1, r0
 800949c:	eb06 0c05 	add.w	ip, r6, r5
 80094a0:	dc02      	bgt.n	80094a8 <__ieee754_sqrt+0xc8>
 80094a2:	d113      	bne.n	80094cc <__ieee754_sqrt+0xec>
 80094a4:	459c      	cmp	ip, r3
 80094a6:	d811      	bhi.n	80094cc <__ieee754_sqrt+0xec>
 80094a8:	f1bc 0f00 	cmp.w	ip, #0
 80094ac:	eb0c 0506 	add.w	r5, ip, r6
 80094b0:	da43      	bge.n	800953a <__ieee754_sqrt+0x15a>
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	db41      	blt.n	800953a <__ieee754_sqrt+0x15a>
 80094b6:	f100 0801 	add.w	r8, r0, #1
 80094ba:	1a09      	subs	r1, r1, r0
 80094bc:	459c      	cmp	ip, r3
 80094be:	bf88      	it	hi
 80094c0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80094c4:	eba3 030c 	sub.w	r3, r3, ip
 80094c8:	4432      	add	r2, r6
 80094ca:	4640      	mov	r0, r8
 80094cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80094d0:	f1be 0e01 	subs.w	lr, lr, #1
 80094d4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80094d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80094e0:	d1db      	bne.n	800949a <__ieee754_sqrt+0xba>
 80094e2:	430b      	orrs	r3, r1
 80094e4:	d006      	beq.n	80094f4 <__ieee754_sqrt+0x114>
 80094e6:	1c50      	adds	r0, r2, #1
 80094e8:	bf13      	iteet	ne
 80094ea:	3201      	addne	r2, #1
 80094ec:	3401      	addeq	r4, #1
 80094ee:	4672      	moveq	r2, lr
 80094f0:	f022 0201 	bicne.w	r2, r2, #1
 80094f4:	1063      	asrs	r3, r4, #1
 80094f6:	0852      	lsrs	r2, r2, #1
 80094f8:	07e1      	lsls	r1, r4, #31
 80094fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80094fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009502:	bf48      	it	mi
 8009504:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009508:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800950c:	4614      	mov	r4, r2
 800950e:	e781      	b.n	8009414 <__ieee754_sqrt+0x34>
 8009510:	0ad9      	lsrs	r1, r3, #11
 8009512:	3815      	subs	r0, #21
 8009514:	055b      	lsls	r3, r3, #21
 8009516:	2900      	cmp	r1, #0
 8009518:	d0fa      	beq.n	8009510 <__ieee754_sqrt+0x130>
 800951a:	02cd      	lsls	r5, r1, #11
 800951c:	d50a      	bpl.n	8009534 <__ieee754_sqrt+0x154>
 800951e:	f1c2 0420 	rsb	r4, r2, #32
 8009522:	fa23 f404 	lsr.w	r4, r3, r4
 8009526:	1e55      	subs	r5, r2, #1
 8009528:	4093      	lsls	r3, r2
 800952a:	4321      	orrs	r1, r4
 800952c:	1b42      	subs	r2, r0, r5
 800952e:	e78a      	b.n	8009446 <__ieee754_sqrt+0x66>
 8009530:	4610      	mov	r0, r2
 8009532:	e7f0      	b.n	8009516 <__ieee754_sqrt+0x136>
 8009534:	0049      	lsls	r1, r1, #1
 8009536:	3201      	adds	r2, #1
 8009538:	e7ef      	b.n	800951a <__ieee754_sqrt+0x13a>
 800953a:	4680      	mov	r8, r0
 800953c:	e7bd      	b.n	80094ba <__ieee754_sqrt+0xda>
 800953e:	bf00      	nop
 8009540:	7ff00000 	.word	0x7ff00000

08009544 <_init>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr

08009550 <_fini>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	bf00      	nop
 8009554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009556:	bc08      	pop	{r3}
 8009558:	469e      	mov	lr, r3
 800955a:	4770      	bx	lr
